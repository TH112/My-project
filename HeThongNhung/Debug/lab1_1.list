
lab1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008694  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008828  08008828  00018828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c3c  08008c3c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008c3c  08008c3c  00018c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c44  08008c44  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c44  08008c44  00018c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000042c4  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000449c  2000449c  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001384c  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003024  00000000  00000000  00033a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  00036ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e8c  00000000  00000000  00037d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000230d5  00000000  00000000  00038c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015b29  00000000  00000000  0005bce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6eff  00000000  00000000  0007180a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f88  00000000  00000000  0014870c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0014e694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800880c 	.word	0x0800880c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800880c 	.word	0x0800880c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <vApplicationGetIdleTaskMemory+0x30>)
 8000f5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001f4 	.word	0x200001f4
 8000f74:	20000248 	.word	0x20000248

08000f78 <get_temp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float get_temp(uint32_t variable)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  return (((VSENSE * variable - V25) / Avg_Slope) + 25);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fabf 	bl	8000504 <__aeabi_ui2d>
 8000f86:	a319      	add	r3, pc, #100	; (adr r3, 8000fec <get_temp+0x74>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fb34 	bl	80005f8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	a316      	add	r3, pc, #88	; (adr r3, 8000ff4 <get_temp+0x7c>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	f7ff f973 	bl	8000288 <__aeabi_dsub>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	a314      	add	r3, pc, #80	; (adr r3, 8000ffc <get_temp+0x84>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff fc4c 	bl	800084c <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <get_temp+0x70>)
 8000fc2:	f7ff f963 	bl	800028c <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f7ff fdeb 	bl	8000ba8 <__aeabi_d2f>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	ee07 3a90 	vmov	s15, r3
}
 8000fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	40390000 	.word	0x40390000
 8000fec:	66666666 	.word	0x66666666
 8000ff0:	3f4a6666 	.word	0x3f4a6666
 8000ff4:	851eb852 	.word	0x851eb852
 8000ff8:	3fe851eb 	.word	0x3fe851eb
 8000ffc:	47ae147b 	.word	0x47ae147b
 8001000:	3f647ae1 	.word	0x3f647ae1

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b096      	sub	sp, #88	; 0x58
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f000 fcc7 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f84f 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 f95b 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001016:	f000 f931 	bl	800127c <MX_DMA_Init>
  MX_ADC1_Init();
 800101a:	f000 f8b3 	bl	8001184 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800101e:	f000 f903 	bl	8001228 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task01 */
  osThreadDef(task01, task_01, osPriorityNormal, 0, 256);
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <main+0x94>)
 8001024:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001028:	461d      	mov	r5, r3
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task01Handle = osThreadCreate(osThread(task01), NULL);
 8001036:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fb48 	bl	80046d2 <osThreadCreate>
 8001042:	4603      	mov	r3, r0
 8001044:	4a15      	ldr	r2, [pc, #84]	; (800109c <main+0x98>)
 8001046:	6013      	str	r3, [r2, #0]

  /* definition and creation of task02 */
  osThreadDef(task02, task_02, osPriorityNormal, 0, 256);
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <main+0x9c>)
 800104a:	f107 0420 	add.w	r4, r7, #32
 800104e:	461d      	mov	r5, r3
 8001050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001054:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001058:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task02Handle = osThreadCreate(osThread(task02), NULL);
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f003 fb35 	bl	80046d2 <osThreadCreate>
 8001068:	4603      	mov	r3, r0
 800106a:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <main+0xa0>)
 800106c:	6013      	str	r3, [r2, #0]

  /* definition and creation of task03 */
  osThreadDef(task03, task_03, osPriorityNormal, 0, 256);
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <main+0xa4>)
 8001070:	1d3c      	adds	r4, r7, #4
 8001072:	461d      	mov	r5, r3
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task03Handle = osThreadCreate(osThread(task03), NULL);
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fb24 	bl	80046d2 <osThreadCreate>
 800108a:	4603      	mov	r3, r0
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <main+0xa8>)
 800108e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001090:	f003 fb18 	bl	80046c4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001094:	e7fe      	b.n	8001094 <main+0x90>
 8001096:	bf00      	nop
 8001098:	08008830 	.word	0x08008830
 800109c:	20000594 	.word	0x20000594
 80010a0:	08008854 	.word	0x08008854
 80010a4:	20000598 	.word	0x20000598
 80010a8:	08008878 	.word	0x08008878
 80010ac:	2000059c 	.word	0x2000059c

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	2230      	movs	r2, #48	; 0x30
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f005 faad 	bl	800661e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	4b28      	ldr	r3, [pc, #160]	; (800117c <SystemClock_Config+0xcc>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	4a27      	ldr	r2, [pc, #156]	; (800117c <SystemClock_Config+0xcc>)
 80010de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <SystemClock_Config+0xcc>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <SystemClock_Config+0xd0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <SystemClock_Config+0xd0>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <SystemClock_Config+0xd0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001124:	23a8      	movs	r3, #168	; 0xa8
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800112c:	2304      	movs	r3, #4
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fea7 	bl	8002e88 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001140:	f000 f979 	bl	8001436 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2302      	movs	r3, #2
 800114a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001150:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001154:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2105      	movs	r1, #5
 8001162:	4618      	mov	r0, r3
 8001164:	f002 f908 	bl	8003378 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800116e:	f000 f962 	bl	8001436 <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3750      	adds	r7, #80	; 0x50
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_ADC1_Init+0x98>)
 8001198:	4a21      	ldr	r2, [pc, #132]	; (8001220 <MX_ADC1_Init+0x9c>)
 800119a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <MX_ADC1_Init+0x98>)
 800119e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_ADC1_Init+0x98>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_ADC1_Init+0x98>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_ADC1_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_ADC1_Init+0x98>)
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <MX_ADC1_Init+0xa0>)
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_ADC1_Init+0x98>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_ADC1_Init+0x98>)
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_ADC1_Init+0x98>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_ADC1_Init+0x98>)
 80011e6:	f000 fc1b 	bl	8001a20 <HAL_ADC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011f0:	f000 f921 	bl	8001436 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011f4:	2310      	movs	r3, #16
 80011f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011fc:	2307      	movs	r3, #7
 80011fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_ADC1_Init+0x98>)
 8001206:	f000 fd7d 	bl	8001d04 <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001210:	f000 f911 	bl	8001436 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000448 	.word	0x20000448
 8001220:	40012000 	.word	0x40012000
 8001224:	0f000001 	.word	0x0f000001

08001228 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART1_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART1_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART1_UART_Init+0x4c>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART1_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART1_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART1_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART1_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART1_UART_Init+0x4c>)
 8001260:	f002 fd8a 	bl	8003d78 <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f000 f8e4 	bl	8001436 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200004f0 	.word	0x200004f0
 8001278:	40011000 	.word	0x40011000

0800127c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_DMA_Init+0x4c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <MX_DMA_Init+0x4c>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <MX_DMA_Init+0x4c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2105      	movs	r1, #5
 80012a2:	2038      	movs	r0, #56	; 0x38
 80012a4:	f001 f886 	bl	80023b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012a8:	2038      	movs	r0, #56	; 0x38
 80012aa:	f001 f89f 	bl	80023ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2105      	movs	r1, #5
 80012b2:	2046      	movs	r0, #70	; 0x46
 80012b4:	f001 f87e 	bl	80023b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012b8:	2046      	movs	r0, #70	; 0x46
 80012ba:	f001 f897 	bl	80023ec <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_GPIO_Init+0x98>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a1e      	ldr	r2, [pc, #120]	; (8001364 <MX_GPIO_Init+0x98>)
 80012ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_GPIO_Init+0x98>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_GPIO_Init+0x98>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <MX_GPIO_Init+0x98>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_GPIO_Init+0x98>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_GPIO_Init+0x98>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <MX_GPIO_Init+0x98>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_GPIO_Init+0x98>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2104      	movs	r1, #4
 800133a:	480b      	ldr	r0, [pc, #44]	; (8001368 <MX_GPIO_Init+0x9c>)
 800133c:	f001 fd70 	bl	8002e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001340:	2304      	movs	r3, #4
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_GPIO_Init+0x9c>)
 8001358:	f001 fbc6 	bl	8002ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	40020400 	.word	0x40020400

0800136c <task_01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_01 */
void task_01(void const * argument)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_ADC_Start_DMA(&hadc1, &value, 1);
 8001374:	2201      	movs	r2, #1
 8001376:	490b      	ldr	r1, [pc, #44]	; (80013a4 <task_01+0x38>)
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <task_01+0x3c>)
 800137a:	f000 fb95 	bl	8001aa8 <HAL_ADC_Start_DMA>
	/* Infinite loop */
	for(;;)
	{
		temp = get_temp(value);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <task_01+0x38>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fdf8 	bl	8000f78 <get_temp>
 8001388:	eef0 7a40 	vmov.f32	s15, s0
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <task_01+0x40>)
 800138e:	edc3 7a00 	vstr	s15, [r3]
		dma_buffer[0] = temp;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <task_01+0x40>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <task_01+0x44>)
 8001398:	6013      	str	r3, [r2, #0]
		osDelay(10);
 800139a:	200a      	movs	r0, #10
 800139c:	f003 f9e5 	bl	800476a <osDelay>
		temp = get_temp(value);
 80013a0:	e7ed      	b.n	800137e <task_01+0x12>
 80013a2:	bf00      	nop
 80013a4:	200005a0 	.word	0x200005a0
 80013a8:	20000448 	.word	0x20000448
 80013ac:	200005a4 	.word	0x200005a4
 80013b0:	200005a8 	.word	0x200005a8

080013b4 <task_02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_02 */
void task_02(void const * argument)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_02 */
  /* Infinite loop */
	for(;;)
	{
		char buffer[10];
		sprintf(buffer, "t: %0.2f\r\n", dma_buffer[0]);
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <task_02+0x38>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8c1 	bl	8000548 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	f107 000c 	add.w	r0, r7, #12
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <task_02+0x3c>)
 80013d0:	f005 f8c2 	bl	8006558 <siprintf>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)buffer, sizeof(buffer));
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	220a      	movs	r2, #10
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <task_02+0x40>)
 80013de:	f002 fd19 	bl	8003e14 <HAL_UART_Transmit_DMA>
		osDelay(1000);
 80013e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e6:	f003 f9c0 	bl	800476a <osDelay>
	{
 80013ea:	e7e7      	b.n	80013bc <task_02+0x8>
 80013ec:	200005a8 	.word	0x200005a8
 80013f0:	08008894 	.word	0x08008894
 80013f4:	200004f0 	.word	0x200004f0

080013f8 <task_03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_03 */
void task_03(void const * argument)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_03 */
  /* Infinite loop */
	  for(;;)
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001400:	2104      	movs	r1, #4
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <task_03+0x1c>)
 8001404:	f001 fd25 	bl	8002e52 <HAL_GPIO_TogglePin>
		  osDelay(1000);
 8001408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140c:	f003 f9ad 	bl	800476a <osDelay>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001410:	e7f6      	b.n	8001400 <task_03+0x8>
 8001412:	bf00      	nop
 8001414:	40020400 	.word	0x40020400

08001418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d101      	bne.n	800142e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800142a:	f000 fad9 	bl	80019e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143a:	b672      	cpsid	i
}
 800143c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143e:	e7fe      	b.n	800143e <Error_Handler+0x8>

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_MspInit+0x54>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_MspInit+0x54>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_MspInit+0x54>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_MspInit+0x54>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_MspInit+0x54>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_MspInit+0x54>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	210f      	movs	r1, #15
 8001482:	f06f 0001 	mvn.w	r0, #1
 8001486:	f000 ff95 	bl	80023b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_ADC_MspInit+0x98>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d13d      	bne.n	8001526 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_ADC_MspInit+0x9c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_ADC_MspInit+0x9c>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_ADC_MspInit+0x9c>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <HAL_ADC_MspInit+0xa4>)
 80014ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 80014e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 80014e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 80014f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 80014f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 800150c:	f000 ff7c 	bl	8002408 <HAL_DMA_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8001516:	f7ff ff8e 	bl	8001436 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 800151e:	639a      	str	r2, [r3, #56]	; 0x38
 8001520:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_ADC_MspInit+0xa0>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40012000 	.word	0x40012000
 8001534:	40023800 	.word	0x40023800
 8001538:	20000490 	.word	0x20000490
 800153c:	40026410 	.word	0x40026410

08001540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a31      	ldr	r2, [pc, #196]	; (8001624 <HAL_UART_MspInit+0xe4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d15b      	bne.n	800161a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <HAL_UART_MspInit+0xe8>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <HAL_UART_MspInit+0xe8>)
 800156c:	f043 0310 	orr.w	r3, r3, #16
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_UART_MspInit+0xe8>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <HAL_UART_MspInit+0xe8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a28      	ldr	r2, [pc, #160]	; (8001628 <HAL_UART_MspInit+0xe8>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b26      	ldr	r3, [pc, #152]	; (8001628 <HAL_UART_MspInit+0xe8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800159a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ac:	2307      	movs	r3, #7
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	481d      	ldr	r0, [pc, #116]	; (800162c <HAL_UART_MspInit+0xec>)
 80015b8:	f001 fa96 	bl	8002ae8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015be:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <HAL_UART_MspInit+0xf4>)
 80015c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015cc:	2240      	movs	r2, #64	; 0x40
 80015ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_UART_MspInit+0xf0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015fe:	480c      	ldr	r0, [pc, #48]	; (8001630 <HAL_UART_MspInit+0xf0>)
 8001600:	f000 ff02 	bl	8002408 <HAL_DMA_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800160a:	f7ff ff14 	bl	8001436 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_UART_MspInit+0xf0>)
 8001612:	635a      	str	r2, [r3, #52]	; 0x34
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_UART_MspInit+0xf0>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40011000 	.word	0x40011000
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	20000534 	.word	0x20000534
 8001634:	400264b8 	.word	0x400264b8

08001638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	; 0x38
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4b34      	ldr	r3, [pc, #208]	; (8001720 <HAL_InitTick+0xe8>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a33      	ldr	r2, [pc, #204]	; (8001720 <HAL_InitTick+0xe8>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b31      	ldr	r3, [pc, #196]	; (8001720 <HAL_InitTick+0xe8>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001664:	f107 0210 	add.w	r2, r7, #16
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f002 f8a2 	bl	80037b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800167e:	f002 f873 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8001682:	6378      	str	r0, [r7, #52]	; 0x34
 8001684:	e004      	b.n	8001690 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001686:	f002 f86f 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 800168a:	4603      	mov	r3, r0
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001692:	4a24      	ldr	r2, [pc, #144]	; (8001724 <HAL_InitTick+0xec>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	3b01      	subs	r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_InitTick+0xf0>)
 80016a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_InitTick+0xf0>)
 80016a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ac:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80016ae:	4a1e      	ldr	r2, [pc, #120]	; (8001728 <HAL_InitTick+0xf0>)
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_InitTick+0xf0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_InitTick+0xf0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_InitTick+0xf0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80016c6:	4818      	ldr	r0, [pc, #96]	; (8001728 <HAL_InitTick+0xf0>)
 80016c8:	f002 f8a8 	bl	800381c <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11b      	bne.n	8001712 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80016da:	4813      	ldr	r0, [pc, #76]	; (8001728 <HAL_InitTick+0xf0>)
 80016dc:	f002 f8f8 	bl	80038d0 <HAL_TIM_Base_Start_IT>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d111      	bne.n	8001712 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ee:	201c      	movs	r0, #28
 80016f0:	f000 fe7c 	bl	80023ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	d808      	bhi.n	800170c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80016fa:	2200      	movs	r2, #0
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	201c      	movs	r0, #28
 8001700:	f000 fe58 	bl	80023b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001704:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_InitTick+0xf4>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e002      	b.n	8001712 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001716:	4618      	mov	r0, r3
 8001718:	3738      	adds	r7, #56	; 0x38
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	431bde83 	.word	0x431bde83
 8001728:	200005ac 	.word	0x200005ac
 800172c:	20000004 	.word	0x20000004

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <NMI_Handler+0x4>

08001736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <TIM2_IRQHandler+0x10>)
 8001762:	f002 f925 	bl	80039b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200005ac 	.word	0x200005ac

08001770 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <DMA2_Stream0_IRQHandler+0x10>)
 8001776:	f000 ff4d 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000490 	.word	0x20000490

08001784 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <DMA2_Stream7_IRQHandler+0x10>)
 800178a:	f000 ff43 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000534 	.word	0x20000534

08001798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_kill>:

int _kill(int pid, int sig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017b2:	f004 ff87 	bl	80066c4 <__errno>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2216      	movs	r2, #22
 80017ba:	601a      	str	r2, [r3, #0]
  return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_exit>:

void _exit (int status)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ffe7 	bl	80017a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017da:	e7fe      	b.n	80017da <_exit+0x12>

080017dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e00a      	b.n	8001804 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ee:	f3af 8000 	nop.w
 80017f2:	4601      	mov	r1, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	b2ca      	uxtb	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf0      	blt.n	80017ee <_read+0x12>
  }

  return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e009      	b.n	800183c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf1      	blt.n	8001828 <_write+0x12>
  }
  return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_close>:

int _close(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001876:	605a      	str	r2, [r3, #4]
  return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_isatty>:

int _isatty(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f004 feec 	bl	80066c4 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20020000 	.word	0x20020000
 8001918:	00000400 	.word	0x00000400
 800191c:	200005f4 	.word	0x200005f4
 8001920:	200044a0 	.word	0x200044a0

08001924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194e:	490e      	ldr	r1, [pc, #56]	; (8001988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001964:	4c0b      	ldr	r4, [pc, #44]	; (8001994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001972:	f7ff ffd7 	bl	8001924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001976:	f004 feab 	bl	80066d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7ff fb43 	bl	8001004 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800198c:	08008c4c 	.word	0x08008c4c
  ldr r2, =_sbss
 8001990:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001994:	2000449c 	.word	0x2000449c

08001998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_Init+0x40>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_Init+0x40>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x40>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 fcea 	bl	800239e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f7ff fe34 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fd36 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	200005f8 	.word	0x200005f8

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200005f8 	.word	0x200005f8

08001a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e033      	b.n	8001a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fd2a 	bl	8001498 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d118      	bne.n	8001a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a66:	f023 0302 	bic.w	r3, r3, #2
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fa68 	bl	8001f48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f023 0303 	bic.w	r3, r3, #3
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8e:	e001      	b.n	8001a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_Start_DMA+0x1e>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e0e9      	b.n	8001c9a <HAL_ADC_Start_DMA+0x1f2>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d018      	beq.n	8001b0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001aec:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <HAL_ADC_Start_DMA+0x1fc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6d      	ldr	r2, [pc, #436]	; (8001ca8 <HAL_ADC_Start_DMA+0x200>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9a      	lsrs	r2, r3, #18
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b00:	e002      	b.n	8001b08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f9      	bne.n	8001b02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b1c:	d107      	bne.n	8001b2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	f040 80a1 	bne.w	8001c80 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7c:	d106      	bne.n	8001b8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f023 0206 	bic.w	r2, r3, #6
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
 8001b8a:	e002      	b.n	8001b92 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9a:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_ADC_Start_DMA+0x204>)
 8001b9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	4a43      	ldr	r2, [pc, #268]	; (8001cb0 <HAL_ADC_Start_DMA+0x208>)
 8001ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	4a42      	ldr	r2, [pc, #264]	; (8001cb4 <HAL_ADC_Start_DMA+0x20c>)
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	4a41      	ldr	r2, [pc, #260]	; (8001cb8 <HAL_ADC_Start_DMA+0x210>)
 8001bb4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bbe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bde:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	334c      	adds	r3, #76	; 0x4c
 8001bea:	4619      	mov	r1, r3
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f000 fcb8 	bl	8002564 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d12a      	bne.n	8001c56 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <HAL_ADC_Start_DMA+0x214>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d015      	beq.n	8001c36 <HAL_ADC_Start_DMA+0x18e>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2c      	ldr	r2, [pc, #176]	; (8001cc0 <HAL_ADC_Start_DMA+0x218>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_Start_DMA+0x178>
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_ADC_Start_DMA+0x204>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00a      	beq.n	8001c36 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <HAL_ADC_Start_DMA+0x21c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d136      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_ADC_Start_DMA+0x204>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d130      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d129      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	e020      	b.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_ADC_Start_DMA+0x214>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d11b      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d114      	bne.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	e00b      	b.n	8001c98 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0210 	orr.w	r2, r3, #16
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	08002141 	.word	0x08002141
 8001cb4:	080021fb 	.word	0x080021fb
 8001cb8:	08002217 	.word	0x08002217
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	40012100 	.word	0x40012100
 8001cc4:	40012200 	.word	0x40012200

08001cc8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1c>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e105      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x228>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	d925      	bls.n	8001d7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68d9      	ldr	r1, [r3, #12]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	3b1e      	subs	r3, #30
 8001d46:	2207      	movs	r2, #7
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	400a      	ands	r2, r1
 8001d54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68d9      	ldr	r1, [r3, #12]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	4603      	mov	r3, r0
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4403      	add	r3, r0
 8001d6e:	3b1e      	subs	r3, #30
 8001d70:	409a      	lsls	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	e022      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6919      	ldr	r1, [r3, #16]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	2207      	movs	r2, #7
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6919      	ldr	r1, [r3, #16]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4403      	add	r3, r0
 8001db8:	409a      	lsls	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d824      	bhi.n	8001e14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b05      	subs	r3, #5
 8001ddc:	221f      	movs	r2, #31
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	400a      	ands	r2, r1
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	3b05      	subs	r3, #5
 8001e06:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	635a      	str	r2, [r3, #52]	; 0x34
 8001e12:	e04c      	b.n	8001eae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b0c      	cmp	r3, #12
 8001e1a:	d824      	bhi.n	8001e66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b23      	subs	r3, #35	; 0x23
 8001e2e:	221f      	movs	r2, #31
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43da      	mvns	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	3b23      	subs	r3, #35	; 0x23
 8001e58:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
 8001e64:	e023      	b.n	8001eae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3b41      	subs	r3, #65	; 0x41
 8001e78:	221f      	movs	r2, #31
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	400a      	ands	r2, r1
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b41      	subs	r3, #65	; 0x41
 8001ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_ADC_ConfigChannel+0x234>)
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <HAL_ADC_ConfigChannel+0x238>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d109      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x1cc>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	d105      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_ADC_ConfigChannel+0x238>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d123      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x21e>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d003      	beq.n	8001eea <HAL_ADC_ConfigChannel+0x1e6>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b11      	cmp	r3, #17
 8001ee8:	d11b      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d111      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_ADC_ConfigChannel+0x23c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a10      	ldr	r2, [pc, #64]	; (8001f44 <HAL_ADC_ConfigChannel+0x240>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0c9a      	lsrs	r2, r3, #18
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40012300 	.word	0x40012300
 8001f3c:	40012000 	.word	0x40012000
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f50:	4b79      	ldr	r3, [pc, #484]	; (8002138 <ADC_Init+0x1f0>)
 8001f52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	021a      	lsls	r2, r3, #8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6899      	ldr	r1, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	4a58      	ldr	r2, [pc, #352]	; (800213c <ADC_Init+0x1f4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6899      	ldr	r1, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e00f      	b.n	8002046 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002044:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0202 	bic.w	r2, r2, #2
 8002054:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6899      	ldr	r1, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7e1b      	ldrb	r3, [r3, #24]
 8002060:	005a      	lsls	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01b      	beq.n	80020ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002082:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002092:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6859      	ldr	r1, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	3b01      	subs	r3, #1
 80020a0:	035a      	lsls	r2, r3, #13
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	e007      	b.n	80020bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	051a      	lsls	r2, r3, #20
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020fe:	025a      	lsls	r2, r3, #9
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002116:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6899      	ldr	r1, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	029a      	lsls	r2, r3, #10
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40012300 	.word	0x40012300
 800213c:	0f000001 	.word	0x0f000001

08002140 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002156:	2b00      	cmp	r3, #0
 8002158:	d13c      	bne.n	80021d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d12b      	bne.n	80021cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002178:	2b00      	cmp	r3, #0
 800217a:	d127      	bne.n	80021cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	d006      	beq.n	8002198 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002194:	2b00      	cmp	r3, #0
 8002196:	d119      	bne.n	80021cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0220 	bic.w	r2, r2, #32
 80021a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d105      	bne.n	80021cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0201 	orr.w	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff fd7b 	bl	8001cc8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021d2:	e00e      	b.n	80021f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f7ff fd85 	bl	8001cf0 <HAL_ADC_ErrorCallback>
}
 80021e6:	e004      	b.n	80021f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f7ff fd67 	bl	8001cdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2240      	movs	r2, #64	; 0x40
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f043 0204 	orr.w	r2, r3, #4
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff fd5a 	bl	8001cf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff4c 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c6:	f7ff ff61 	bl	800228c <__NVIC_GetPriorityGrouping>
 80023ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f7ff ffb1 	bl	8002338 <NVIC_EncodePriority>
 80023d6:	4602      	mov	r2, r0
 80023d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff80 	bl	80022e4 <__NVIC_SetPriority>
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff54 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff faf8 	bl	8001a08 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e099      	b.n	8002558 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002444:	e00f      	b.n	8002466 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002446:	f7ff fadf 	bl	8001a08 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b05      	cmp	r3, #5
 8002452:	d908      	bls.n	8002466 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2203      	movs	r2, #3
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e078      	b.n	8002558 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e8      	bne.n	8002446 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	4b38      	ldr	r3, [pc, #224]	; (8002560 <HAL_DMA_Init+0x158>)
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d107      	bne.n	80024d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	4313      	orrs	r3, r2
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f023 0307 	bic.w	r3, r3, #7
 80024e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d117      	bne.n	800252a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00e      	beq.n	800252a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fa6f 	bl	80029f0 <DMA_CheckFifoParam>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2240      	movs	r2, #64	; 0x40
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002526:	2301      	movs	r3, #1
 8002528:	e016      	b.n	8002558 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa26 	bl	8002984 <DMA_CalcBaseAndBitshift>
 8002538:	4603      	mov	r3, r0
 800253a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	223f      	movs	r2, #63	; 0x3f
 8002542:	409a      	lsls	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	f010803f 	.word	0xf010803f

08002564 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_DMA_Start_IT+0x26>
 8002586:	2302      	movs	r3, #2
 8002588:	e040      	b.n	800260c <HAL_DMA_Start_IT+0xa8>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d12f      	bne.n	80025fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f9b8 	bl	8002928 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	223f      	movs	r2, #63	; 0x3f
 80025be:	409a      	lsls	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0216 	orr.w	r2, r2, #22
 80025d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0208 	orr.w	r2, r2, #8
 80025ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e005      	b.n	800260a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002606:	2302      	movs	r3, #2
 8002608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800260a:	7dfb      	ldrb	r3, [r7, #23]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002620:	4b8e      	ldr	r3, [pc, #568]	; (800285c <HAL_DMA_IRQHandler+0x248>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a8e      	ldr	r2, [pc, #568]	; (8002860 <HAL_DMA_IRQHandler+0x24c>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0a9b      	lsrs	r3, r3, #10
 800262c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2208      	movs	r2, #8
 8002640:	409a      	lsls	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01a      	beq.n	8002680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0204 	bic.w	r2, r2, #4
 8002666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	2208      	movs	r2, #8
 800266e:	409a      	lsls	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	2201      	movs	r2, #1
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2201      	movs	r2, #1
 80026a4:	409a      	lsls	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f043 0202 	orr.w	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2204      	movs	r2, #4
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d012      	beq.n	80026ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2204      	movs	r2, #4
 80026da:	409a      	lsls	r2, r3
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	2210      	movs	r2, #16
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d043      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03c      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	2210      	movs	r2, #16
 8002710:	409a      	lsls	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d024      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
 8002742:	e01f      	b.n	8002784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
 8002754:	e016      	b.n	8002784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0208 	bic.w	r2, r2, #8
 8002772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	2220      	movs	r2, #32
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 808f 	beq.w	80028b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8087 	beq.w	80028b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	2220      	movs	r2, #32
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d136      	bne.n	800282c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0216 	bic.w	r2, r2, #22
 80027cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_DMA_IRQHandler+0x1da>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0208 	bic.w	r2, r2, #8
 80027fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	223f      	movs	r2, #63	; 0x3f
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	2b00      	cmp	r3, #0
 8002820:	d07e      	beq.n	8002920 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
        }
        return;
 800282a:	e079      	b.n	8002920 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01d      	beq.n	8002876 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	2b00      	cmp	r3, #0
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e02c      	b.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
 800285a:	bf00      	nop
 800285c:	20000000 	.word	0x20000000
 8002860:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d023      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
 8002874:	e01e      	b.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10f      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0210 	bic.w	r2, r2, #16
 8002892:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d032      	beq.n	8002922 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d022      	beq.n	800290e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2205      	movs	r2, #5
 80028cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d307      	bcc.n	80028fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f2      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x2cc>
 80028fa:	e000      	b.n	80028fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
 800291e:	e000      	b.n	8002922 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002920:	bf00      	nop
    }
  }
}
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002944:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d108      	bne.n	8002968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002966:	e007      	b.n	8002978 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3b10      	subs	r3, #16
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800299e:	4a13      	ldr	r2, [pc, #76]	; (80029ec <DMA_CalcBaseAndBitshift+0x68>)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d909      	bls.n	80029c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	1d1a      	adds	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	659a      	str	r2, [r3, #88]	; 0x58
 80029c4:	e007      	b.n	80029d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	aaaaaaab 	.word	0xaaaaaaab
 80029ec:	080088c0 	.word	0x080088c0

080029f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11f      	bne.n	8002a4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d856      	bhi.n	8002abe <DMA_CheckFifoParam+0xce>
 8002a10:	a201      	add	r2, pc, #4	; (adr r2, 8002a18 <DMA_CheckFifoParam+0x28>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a3b 	.word	0x08002a3b
 8002a20:	08002a29 	.word	0x08002a29
 8002a24:	08002abf 	.word	0x08002abf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d046      	beq.n	8002ac2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a38:	e043      	b.n	8002ac2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a42:	d140      	bne.n	8002ac6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e03d      	b.n	8002ac6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a52:	d121      	bne.n	8002a98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d837      	bhi.n	8002aca <DMA_CheckFifoParam+0xda>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <DMA_CheckFifoParam+0x70>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a77 	.word	0x08002a77
 8002a68:	08002a71 	.word	0x08002a71
 8002a6c:	08002a89 	.word	0x08002a89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e030      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d025      	beq.n	8002ace <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a86:	e022      	b.n	8002ace <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a90:	d11f      	bne.n	8002ad2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a96:	e01c      	b.n	8002ad2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d903      	bls.n	8002aa6 <DMA_CheckFifoParam+0xb6>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d003      	beq.n	8002aac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aa4:	e018      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aaa:	e015      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00e      	beq.n	8002ad6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e00b      	b.n	8002ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e00a      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e008      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e006      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
 8002acc:	e004      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e002      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e16b      	b.n	8002ddc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 815a 	bne.w	8002dd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d130      	bne.n	8002b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80b4 	beq.w	8002dd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b60      	ldr	r3, [pc, #384]	; (8002df4 <HAL_GPIO_Init+0x30c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a5f      	ldr	r2, [pc, #380]	; (8002df4 <HAL_GPIO_Init+0x30c>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <HAL_GPIO_Init+0x30c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8a:	4a5b      	ldr	r2, [pc, #364]	; (8002df8 <HAL_GPIO_Init+0x310>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	; (8002dfc <HAL_GPIO_Init+0x314>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x226>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a51      	ldr	r2, [pc, #324]	; (8002e00 <HAL_GPIO_Init+0x318>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x222>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a50      	ldr	r2, [pc, #320]	; (8002e04 <HAL_GPIO_Init+0x31c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x21e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4f      	ldr	r2, [pc, #316]	; (8002e08 <HAL_GPIO_Init+0x320>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x21a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x216>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4d      	ldr	r2, [pc, #308]	; (8002e10 <HAL_GPIO_Init+0x328>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x212>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_GPIO_Init+0x32c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x20e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4b      	ldr	r2, [pc, #300]	; (8002e18 <HAL_GPIO_Init+0x330>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x20a>
 8002cee:	2307      	movs	r3, #7
 8002cf0:	e00e      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	e00c      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	e00a      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e008      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e004      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	f002 0203 	and.w	r2, r2, #3
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	4093      	lsls	r3, r2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d20:	4935      	ldr	r1, [pc, #212]	; (8002df8 <HAL_GPIO_Init+0x310>)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d52:	4a32      	ldr	r2, [pc, #200]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d58:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d7c:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da6:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd0:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <HAL_GPIO_Init+0x334>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	f67f ae90 	bls.w	8002b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40020c00 	.word	0x40020c00
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40021400 	.word	0x40021400
 8002e14:	40021800 	.word	0x40021800
 8002e18:	40021c00 	.word	0x40021c00
 8002e1c:	40013c00 	.word	0x40013c00

08002e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e30:	787b      	ldrb	r3, [r7, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e3c:	e003      	b.n	8002e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	041a      	lsls	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	619a      	str	r2, [r3, #24]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e64:	887a      	ldrh	r2, [r7, #2]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	041a      	lsls	r2, r3, #16
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	43d9      	mvns	r1, r3
 8002e70:	887b      	ldrh	r3, [r7, #2]
 8002e72:	400b      	ands	r3, r1
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	619a      	str	r2, [r3, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e267      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d075      	beq.n	8002f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ea6:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d00c      	beq.n	8002ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b85      	ldr	r3, [pc, #532]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d112      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ebe:	4b82      	ldr	r3, [pc, #520]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	4b7e      	ldr	r3, [pc, #504]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d05b      	beq.n	8002f90 <HAL_RCC_OscConfig+0x108>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d157      	bne.n	8002f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e242      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eec:	d106      	bne.n	8002efc <HAL_RCC_OscConfig+0x74>
 8002eee:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a75      	ldr	r2, [pc, #468]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e01d      	b.n	8002f38 <HAL_RCC_OscConfig+0xb0>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x98>
 8002f06:	4b70      	ldr	r3, [pc, #448]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6f      	ldr	r2, [pc, #444]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b6d      	ldr	r3, [pc, #436]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6c      	ldr	r2, [pc, #432]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0xb0>
 8002f20:	4b69      	ldr	r3, [pc, #420]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a68      	ldr	r2, [pc, #416]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b66      	ldr	r3, [pc, #408]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a65      	ldr	r2, [pc, #404]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d013      	beq.n	8002f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fd62 	bl	8001a08 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe fd5e 	bl	8001a08 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e207      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b5b      	ldr	r3, [pc, #364]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0xc0>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fd4e 	bl	8001a08 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe fd4a 	bl	8001a08 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e1f3      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0xe8>
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d063      	beq.n	8003066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d11c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_RCC_OscConfig+0x152>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e1c7      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4937      	ldr	r1, [pc, #220]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	e03a      	b.n	8003066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff8:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_RCC_OscConfig+0x244>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fd03 	bl	8001a08 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe fcff 	bl	8001a08 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1a8      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4925      	ldr	r1, [pc, #148]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
 8003038:	e015      	b.n	8003066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_OscConfig+0x244>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fce2 	bl	8001a08 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe fcde 	bl	8001a08 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e187      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d036      	beq.n	80030e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_RCC_OscConfig+0x248>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe fcc2 	bl	8001a08 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe fcbe 	bl	8001a08 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e167      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x240>)
 800309c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x200>
 80030a6:	e01b      	b.n	80030e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_OscConfig+0x248>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fe fcab 	bl	8001a08 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b4:	e00e      	b.n	80030d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b6:	f7fe fca7 	bl	8001a08 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d907      	bls.n	80030d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e150      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
 80030c8:	40023800 	.word	0x40023800
 80030cc:	42470000 	.word	0x42470000
 80030d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 80030d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ea      	bne.n	80030b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8097 	beq.w	800321c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b81      	ldr	r3, [pc, #516]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	4b7d      	ldr	r3, [pc, #500]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a7c      	ldr	r2, [pc, #496]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b7a      	ldr	r3, [pc, #488]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b77      	ldr	r3, [pc, #476]	; (80032fc <HAL_RCC_OscConfig+0x474>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d118      	bne.n	800315c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312a:	4b74      	ldr	r3, [pc, #464]	; (80032fc <HAL_RCC_OscConfig+0x474>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a73      	ldr	r2, [pc, #460]	; (80032fc <HAL_RCC_OscConfig+0x474>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003136:	f7fe fc67 	bl	8001a08 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fe fc63 	bl	8001a08 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e10c      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_RCC_OscConfig+0x474>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x2ea>
 8003164:	4b64      	ldr	r3, [pc, #400]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a63      	ldr	r2, [pc, #396]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	e01c      	b.n	80031ac <HAL_RCC_OscConfig+0x324>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b05      	cmp	r3, #5
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x30c>
 800317a:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	4a5e      	ldr	r2, [pc, #376]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6713      	str	r3, [r2, #112]	; 0x70
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a5b      	ldr	r2, [pc, #364]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0x324>
 8003194:	4b58      	ldr	r3, [pc, #352]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
 80031a0:	4b55      	ldr	r3, [pc, #340]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a54      	ldr	r2, [pc, #336]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 80031a6:	f023 0304 	bic.w	r3, r3, #4
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fc28 	bl	8001a08 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe fc24 	bl	8001a08 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0cb      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d2:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ee      	beq.n	80031bc <HAL_RCC_OscConfig+0x334>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e0:	f7fe fc12 	bl	8001a08 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fe fc0e 	bl	8001a08 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0b5      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fe:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ee      	bne.n	80031e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d105      	bne.n	800321c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003210:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	4a38      	ldr	r2, [pc, #224]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80a1 	beq.w	8003368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003226:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b08      	cmp	r3, #8
 8003230:	d05c      	beq.n	80032ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d141      	bne.n	80032be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323a:	4b31      	ldr	r3, [pc, #196]	; (8003300 <HAL_RCC_OscConfig+0x478>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe fbe2 	bl	8001a08 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fbde 	bl	8001a08 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e087      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	019b      	lsls	r3, r3, #6
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	3b01      	subs	r3, #1
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	491b      	ldr	r1, [pc, #108]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <HAL_RCC_OscConfig+0x478>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe fbb7 	bl	8001a08 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329e:	f7fe fbb3 	bl	8001a08 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e05c      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x416>
 80032bc:	e054      	b.n	8003368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_OscConfig+0x478>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe fba0 	bl	8001a08 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe fb9c 	bl	8001a08 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e045      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCC_OscConfig+0x470>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x444>
 80032ea:	e03d      	b.n	8003368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e038      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000
 8003300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x4ec>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d028      	beq.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d121      	bne.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	429a      	cmp	r2, r3
 800332c:	d11a      	bne.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800333a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800333c:	4293      	cmp	r3, r2
 800333e:	d111      	bne.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	085b      	lsrs	r3, r3, #1
 800334c:	3b01      	subs	r3, #1
 800334e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d107      	bne.n	8003364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800

08003378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0cc      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800338c:	4b68      	ldr	r3, [pc, #416]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d90c      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339a:	4b65      	ldr	r3, [pc, #404]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b63      	ldr	r3, [pc, #396]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0b8      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d020      	beq.n	8003402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033cc:	4b59      	ldr	r3, [pc, #356]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a58      	ldr	r2, [pc, #352]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e4:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a52      	ldr	r2, [pc, #328]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	494d      	ldr	r1, [pc, #308]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d044      	beq.n	8003498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d119      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d003      	beq.n	8003436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003432:	2b03      	cmp	r3, #3
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003436:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e06f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003446:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e067      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003456:	4b37      	ldr	r3, [pc, #220]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4934      	ldr	r1, [pc, #208]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003468:	f7fe face 	bl	8001a08 <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	e00a      	b.n	8003486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7fe faca 	bl	8001a08 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e04f      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	4b2b      	ldr	r3, [pc, #172]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 020c 	and.w	r2, r3, #12
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	429a      	cmp	r2, r3
 8003496:	d1eb      	bne.n	8003470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003498:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d20c      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b22      	ldr	r3, [pc, #136]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e032      	b.n	8003526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4916      	ldr	r1, [pc, #88]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	490e      	ldr	r1, [pc, #56]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034fe:	f000 f821 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8003502:	4602      	mov	r2, r0
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	490a      	ldr	r1, [pc, #40]	; (8003538 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	5ccb      	ldrb	r3, [r1, r3]
 8003512:	fa22 f303 	lsr.w	r3, r2, r3
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe f88a 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023c00 	.word	0x40023c00
 8003534:	40023800 	.word	0x40023800
 8003538:	080088a8 	.word	0x080088a8
 800353c:	20000000 	.word	0x20000000
 8003540:	20000004 	.word	0x20000004

08003544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b094      	sub	sp, #80	; 0x50
 800354a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	647b      	str	r3, [r7, #68]	; 0x44
 8003550:	2300      	movs	r3, #0
 8003552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003554:	2300      	movs	r3, #0
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800355c:	4b79      	ldr	r3, [pc, #484]	; (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d00d      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x40>
 8003568:	2b08      	cmp	r3, #8
 800356a:	f200 80e1 	bhi.w	8003730 <HAL_RCC_GetSysClockFreq+0x1ec>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x34>
 8003572:	2b04      	cmp	r3, #4
 8003574:	d003      	beq.n	800357e <HAL_RCC_GetSysClockFreq+0x3a>
 8003576:	e0db      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003578:	4b73      	ldr	r3, [pc, #460]	; (8003748 <HAL_RCC_GetSysClockFreq+0x204>)
 800357a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800357c:	e0db      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800357e:	4b73      	ldr	r3, [pc, #460]	; (800374c <HAL_RCC_GetSysClockFreq+0x208>)
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003582:	e0d8      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003584:	4b6f      	ldr	r3, [pc, #444]	; (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800358c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800358e:	4b6d      	ldr	r3, [pc, #436]	; (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d063      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359a:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	2200      	movs	r2, #0
 80035a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
 80035ae:	2300      	movs	r3, #0
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
 80035b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035b6:	4622      	mov	r2, r4
 80035b8:	462b      	mov	r3, r5
 80035ba:	f04f 0000 	mov.w	r0, #0
 80035be:	f04f 0100 	mov.w	r1, #0
 80035c2:	0159      	lsls	r1, r3, #5
 80035c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c8:	0150      	lsls	r0, r2, #5
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4621      	mov	r1, r4
 80035d0:	1a51      	subs	r1, r2, r1
 80035d2:	6139      	str	r1, [r7, #16]
 80035d4:	4629      	mov	r1, r5
 80035d6:	eb63 0301 	sbc.w	r3, r3, r1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035e8:	4659      	mov	r1, fp
 80035ea:	018b      	lsls	r3, r1, #6
 80035ec:	4651      	mov	r1, sl
 80035ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035f2:	4651      	mov	r1, sl
 80035f4:	018a      	lsls	r2, r1, #6
 80035f6:	4651      	mov	r1, sl
 80035f8:	ebb2 0801 	subs.w	r8, r2, r1
 80035fc:	4659      	mov	r1, fp
 80035fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800360e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003616:	4690      	mov	r8, r2
 8003618:	4699      	mov	r9, r3
 800361a:	4623      	mov	r3, r4
 800361c:	eb18 0303 	adds.w	r3, r8, r3
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	462b      	mov	r3, r5
 8003624:	eb49 0303 	adc.w	r3, r9, r3
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003636:	4629      	mov	r1, r5
 8003638:	024b      	lsls	r3, r1, #9
 800363a:	4621      	mov	r1, r4
 800363c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003640:	4621      	mov	r1, r4
 8003642:	024a      	lsls	r2, r1, #9
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364a:	2200      	movs	r2, #0
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
 800364e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003654:	f7fd faf8 	bl	8000c48 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003660:	e058      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003662:	4b38      	ldr	r3, [pc, #224]	; (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	2200      	movs	r2, #0
 800366a:	4618      	mov	r0, r3
 800366c:	4611      	mov	r1, r2
 800366e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	2300      	movs	r3, #0
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
 8003678:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	f04f 0000 	mov.w	r0, #0
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	0159      	lsls	r1, r3, #5
 800368a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800368e:	0150      	lsls	r0, r2, #5
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4641      	mov	r1, r8
 8003696:	ebb2 0a01 	subs.w	sl, r2, r1
 800369a:	4649      	mov	r1, r9
 800369c:	eb63 0b01 	sbc.w	fp, r3, r1
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036b4:	ebb2 040a 	subs.w	r4, r2, sl
 80036b8:	eb63 050b 	sbc.w	r5, r3, fp
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	00eb      	lsls	r3, r5, #3
 80036c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ca:	00e2      	lsls	r2, r4, #3
 80036cc:	4614      	mov	r4, r2
 80036ce:	461d      	mov	r5, r3
 80036d0:	4643      	mov	r3, r8
 80036d2:	18e3      	adds	r3, r4, r3
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	464b      	mov	r3, r9
 80036d8:	eb45 0303 	adc.w	r3, r5, r3
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ea:	4629      	mov	r1, r5
 80036ec:	028b      	lsls	r3, r1, #10
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f4:	4621      	mov	r1, r4
 80036f6:	028a      	lsls	r2, r1, #10
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fe:	2200      	movs	r2, #0
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	61fa      	str	r2, [r7, #28]
 8003704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003708:	f7fd fa9e 	bl	8000c48 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_GetSysClockFreq+0x200>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	3301      	adds	r3, #1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800372e:	e002      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_GetSysClockFreq+0x204>)
 8003732:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003738:	4618      	mov	r0, r3
 800373a:	3750      	adds	r7, #80	; 0x50
 800373c:	46bd      	mov	sp, r7
 800373e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	00f42400 	.word	0x00f42400
 800374c:	007a1200 	.word	0x007a1200

08003750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_RCC_GetHCLKFreq+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000000 	.word	0x20000000

08003768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800376c:	f7ff fff0 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	0a9b      	lsrs	r3, r3, #10
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	4903      	ldr	r1, [pc, #12]	; (800378c <HAL_RCC_GetPCLK1Freq+0x24>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	080088b8 	.word	0x080088b8

08003790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003794:	f7ff ffdc 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	0b5b      	lsrs	r3, r3, #13
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4903      	ldr	r1, [pc, #12]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40023800 	.word	0x40023800
 80037b4:	080088b8 	.word	0x080088b8

080037b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	220f      	movs	r2, #15
 80037c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_RCC_GetClockConfig+0x5c>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_RCC_GetClockConfig+0x5c>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <HAL_RCC_GetClockConfig+0x5c>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <HAL_RCC_GetClockConfig+0x60>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0207 	and.w	r2, r3, #7
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	601a      	str	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	40023c00 	.word	0x40023c00

0800381c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e041      	b.n	80038b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f839 	bl	80038ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 f9d8 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d001      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e04e      	b.n	8003986 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a23      	ldr	r2, [pc, #140]	; (8003994 <HAL_TIM_Base_Start_IT+0xc4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x80>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d01d      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x80>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_TIM_Base_Start_IT+0xc8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x80>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_TIM_Base_Start_IT+0xcc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x80>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x80>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x80>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x80>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_TIM_Base_Start_IT+0xdc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b06      	cmp	r3, #6
 8003960:	d010      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003972:	e007      	b.n	8003984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40010000 	.word	0x40010000
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800
 80039a0:	40000c00 	.word	0x40000c00
 80039a4:	40010400 	.word	0x40010400
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40001800 	.word	0x40001800

080039b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d122      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d11b      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0202 	mvn.w	r2, #2
 80039dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8ee 	bl	8003bd4 <HAL_TIM_IC_CaptureCallback>
 80039f8:	e005      	b.n	8003a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f8e0 	bl	8003bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f8f1 	bl	8003be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d122      	bne.n	8003a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d11b      	bne.n	8003a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0204 	mvn.w	r2, #4
 8003a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f8c4 	bl	8003bd4 <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8b6 	bl	8003bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f8c7 	bl	8003be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d122      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0208 	mvn.w	r2, #8
 8003a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f89a 	bl	8003bd4 <HAL_TIM_IC_CaptureCallback>
 8003aa0:	e005      	b.n	8003aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f88c 	bl	8003bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f89d 	bl	8003be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0210 	mvn.w	r2, #16
 8003ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2208      	movs	r2, #8
 8003ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f870 	bl	8003bd4 <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f862 	bl	8003bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f873 	bl	8003be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d10e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0201 	mvn.w	r2, #1
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fc72 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b80      	cmp	r3, #128	; 0x80
 8003b40:	d10e      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f902 	bl	8003d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d10e      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f838 	bl	8003bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d10e      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d107      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0220 	mvn.w	r2, #32
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8cc 	bl	8003d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a40      	ldr	r2, [pc, #256]	; (8003d24 <TIM_Base_SetConfig+0x114>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d013      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d00f      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3d      	ldr	r2, [pc, #244]	; (8003d28 <TIM_Base_SetConfig+0x118>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a3c      	ldr	r2, [pc, #240]	; (8003d2c <TIM_Base_SetConfig+0x11c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d007      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a3b      	ldr	r2, [pc, #236]	; (8003d30 <TIM_Base_SetConfig+0x120>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d003      	beq.n	8003c50 <TIM_Base_SetConfig+0x40>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3a      	ldr	r2, [pc, #232]	; (8003d34 <TIM_Base_SetConfig+0x124>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d108      	bne.n	8003c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2f      	ldr	r2, [pc, #188]	; (8003d24 <TIM_Base_SetConfig+0x114>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d02b      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c70:	d027      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2c      	ldr	r2, [pc, #176]	; (8003d28 <TIM_Base_SetConfig+0x118>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d023      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2b      	ldr	r2, [pc, #172]	; (8003d2c <TIM_Base_SetConfig+0x11c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01f      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <TIM_Base_SetConfig+0x120>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01b      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <TIM_Base_SetConfig+0x124>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d017      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a28      	ldr	r2, [pc, #160]	; (8003d38 <TIM_Base_SetConfig+0x128>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <TIM_Base_SetConfig+0x12c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <TIM_Base_SetConfig+0x130>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a25      	ldr	r2, [pc, #148]	; (8003d44 <TIM_Base_SetConfig+0x134>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a24      	ldr	r2, [pc, #144]	; (8003d48 <TIM_Base_SetConfig+0x138>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a23      	ldr	r2, [pc, #140]	; (8003d4c <TIM_Base_SetConfig+0x13c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <TIM_Base_SetConfig+0x114>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <TIM_Base_SetConfig+0xf8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <TIM_Base_SetConfig+0x124>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d103      	bne.n	8003d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	615a      	str	r2, [r3, #20]
}
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40010400 	.word	0x40010400
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40014400 	.word	0x40014400
 8003d40:	40014800 	.word	0x40014800
 8003d44:	40001800 	.word	0x40001800
 8003d48:	40001c00 	.word	0x40001c00
 8003d4c:	40002000 	.word	0x40002000

08003d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e03f      	b.n	8003e0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fd fbce 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	; 0x24
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f9f5 	bl	80041ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d165      	bne.n	8003efa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_UART_Transmit_DMA+0x26>
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e05e      	b.n	8003efc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_UART_Transmit_DMA+0x38>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e057      	b.n	8003efc <HAL_UART_Transmit_DMA+0xe8>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2221      	movs	r2, #33	; 0x21
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <HAL_UART_Transmit_DMA+0xf0>)
 8003e7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <HAL_UART_Transmit_DMA+0xf4>)
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <HAL_UART_Transmit_DMA+0xf8>)
 8003e8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	2200      	movs	r2, #0
 8003e92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	f7fe fb5a 	bl	8002564 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ee4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3730      	adds	r7, #48	; 0x30
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	08003f4d 	.word	0x08003f4d
 8003f08:	08003fe7 	.word	0x08003fe7
 8003f0c:	08004003 	.word	0x08004003

08003f10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b090      	sub	sp, #64	; 0x40
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d137      	bne.n	8003fd8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3314      	adds	r3, #20
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fc2:	61fa      	str	r2, [r7, #28]
 8003fc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	617b      	str	r3, [r7, #20]
   return(result);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e5      	bne.n	8003fa2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fd6:	e002      	b.n	8003fde <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003fd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fda:	f7ff ff99 	bl	8003f10 <HAL_UART_TxCpltCallback>
}
 8003fde:	bf00      	nop
 8003fe0:	3740      	adds	r7, #64	; 0x40
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff ff95 	bl	8003f24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b21      	cmp	r3, #33	; 0x21
 8004034:	d108      	bne.n	8004048 <UART_DMAError+0x46>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004042:	68b8      	ldr	r0, [r7, #8]
 8004044:	f000 f827 	bl	8004096 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b22      	cmp	r3, #34	; 0x22
 8004068:	d108      	bne.n	800407c <UART_DMAError+0x7a>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2200      	movs	r2, #0
 8004074:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004076:	68b8      	ldr	r0, [r7, #8]
 8004078:	f000 f835 	bl	80040e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f043 0210 	orr.w	r2, r3, #16
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004088:	68b8      	ldr	r0, [r7, #8]
 800408a:	f7ff ff55 	bl	8003f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004096:	b480      	push	{r7}
 8004098:	b089      	sub	sp, #36	; 0x24
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	330c      	adds	r3, #12
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	61ba      	str	r2, [r7, #24]
 80040c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6979      	ldr	r1, [r7, #20]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	613b      	str	r3, [r7, #16]
   return(result);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e5      	bne.n	800409e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80040da:	bf00      	nop
 80040dc:	3724      	adds	r7, #36	; 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b095      	sub	sp, #84	; 0x54
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800410e:	643a      	str	r2, [r7, #64]	; 0x40
 8004110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e5      	bne.n	80040ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3314      	adds	r3, #20
 8004128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	61fb      	str	r3, [r7, #28]
   return(result);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	64bb      	str	r3, [r7, #72]	; 0x48
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3314      	adds	r3, #20
 8004140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e5      	bne.n	8004122 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	2b01      	cmp	r3, #1
 800415c:	d119      	bne.n	8004192 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	60bb      	str	r3, [r7, #8]
   return(result);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f023 0310 	bic.w	r3, r3, #16
 8004174:	647b      	str	r3, [r7, #68]	; 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800417e:	61ba      	str	r2, [r7, #24]
 8004180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6979      	ldr	r1, [r7, #20]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	613b      	str	r3, [r7, #16]
   return(result);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041a0:	bf00      	nop
 80041a2:	3754      	adds	r7, #84	; 0x54
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b0:	b0c0      	sub	sp, #256	; 0x100
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	68d9      	ldr	r1, [r3, #12]
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	ea40 0301 	orr.w	r3, r0, r1
 80041d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004204:	f021 010c 	bic.w	r1, r1, #12
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004212:	430b      	orrs	r3, r1
 8004214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004226:	6999      	ldr	r1, [r3, #24]
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	ea40 0301 	orr.w	r3, r0, r1
 8004232:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b8f      	ldr	r3, [pc, #572]	; (8004478 <UART_SetConfig+0x2cc>)
 800423c:	429a      	cmp	r2, r3
 800423e:	d005      	beq.n	800424c <UART_SetConfig+0xa0>
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b8d      	ldr	r3, [pc, #564]	; (800447c <UART_SetConfig+0x2d0>)
 8004248:	429a      	cmp	r2, r3
 800424a:	d104      	bne.n	8004256 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800424c:	f7ff faa0 	bl	8003790 <HAL_RCC_GetPCLK2Freq>
 8004250:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004254:	e003      	b.n	800425e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004256:	f7ff fa87 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 800425a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	f040 810c 	bne.w	8004484 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800426c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004276:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800427a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800427e:	4622      	mov	r2, r4
 8004280:	462b      	mov	r3, r5
 8004282:	1891      	adds	r1, r2, r2
 8004284:	65b9      	str	r1, [r7, #88]	; 0x58
 8004286:	415b      	adcs	r3, r3
 8004288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800428a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800428e:	4621      	mov	r1, r4
 8004290:	eb12 0801 	adds.w	r8, r2, r1
 8004294:	4629      	mov	r1, r5
 8004296:	eb43 0901 	adc.w	r9, r3, r1
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ae:	4690      	mov	r8, r2
 80042b0:	4699      	mov	r9, r3
 80042b2:	4623      	mov	r3, r4
 80042b4:	eb18 0303 	adds.w	r3, r8, r3
 80042b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042bc:	462b      	mov	r3, r5
 80042be:	eb49 0303 	adc.w	r3, r9, r3
 80042c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042da:	460b      	mov	r3, r1
 80042dc:	18db      	adds	r3, r3, r3
 80042de:	653b      	str	r3, [r7, #80]	; 0x50
 80042e0:	4613      	mov	r3, r2
 80042e2:	eb42 0303 	adc.w	r3, r2, r3
 80042e6:	657b      	str	r3, [r7, #84]	; 0x54
 80042e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042f0:	f7fc fcaa 	bl	8000c48 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4b61      	ldr	r3, [pc, #388]	; (8004480 <UART_SetConfig+0x2d4>)
 80042fa:	fba3 2302 	umull	r2, r3, r3, r2
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	011c      	lsls	r4, r3, #4
 8004302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800430c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004310:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	1891      	adds	r1, r2, r2
 800431a:	64b9      	str	r1, [r7, #72]	; 0x48
 800431c:	415b      	adcs	r3, r3
 800431e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004324:	4641      	mov	r1, r8
 8004326:	eb12 0a01 	adds.w	sl, r2, r1
 800432a:	4649      	mov	r1, r9
 800432c:	eb43 0b01 	adc.w	fp, r3, r1
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800433c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004344:	4692      	mov	sl, r2
 8004346:	469b      	mov	fp, r3
 8004348:	4643      	mov	r3, r8
 800434a:	eb1a 0303 	adds.w	r3, sl, r3
 800434e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004352:	464b      	mov	r3, r9
 8004354:	eb4b 0303 	adc.w	r3, fp, r3
 8004358:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004368:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800436c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004370:	460b      	mov	r3, r1
 8004372:	18db      	adds	r3, r3, r3
 8004374:	643b      	str	r3, [r7, #64]	; 0x40
 8004376:	4613      	mov	r3, r2
 8004378:	eb42 0303 	adc.w	r3, r2, r3
 800437c:	647b      	str	r3, [r7, #68]	; 0x44
 800437e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004382:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004386:	f7fc fc5f 	bl	8000c48 <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4611      	mov	r1, r2
 8004390:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <UART_SetConfig+0x2d4>)
 8004392:	fba3 2301 	umull	r2, r3, r3, r1
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2264      	movs	r2, #100	; 0x64
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	1acb      	subs	r3, r1, r3
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043a6:	4b36      	ldr	r3, [pc, #216]	; (8004480 <UART_SetConfig+0x2d4>)
 80043a8:	fba3 2302 	umull	r2, r3, r3, r2
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b4:	441c      	add	r4, r3
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	1891      	adds	r1, r2, r2
 80043ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80043d0:	415b      	adcs	r3, r3
 80043d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043d8:	4641      	mov	r1, r8
 80043da:	1851      	adds	r1, r2, r1
 80043dc:	6339      	str	r1, [r7, #48]	; 0x30
 80043de:	4649      	mov	r1, r9
 80043e0:	414b      	adcs	r3, r1
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043f0:	4659      	mov	r1, fp
 80043f2:	00cb      	lsls	r3, r1, #3
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fa:	4651      	mov	r1, sl
 80043fc:	00ca      	lsls	r2, r1, #3
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	4603      	mov	r3, r0
 8004404:	4642      	mov	r2, r8
 8004406:	189b      	adds	r3, r3, r2
 8004408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800440c:	464b      	mov	r3, r9
 800440e:	460a      	mov	r2, r1
 8004410:	eb42 0303 	adc.w	r3, r2, r3
 8004414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004424:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800442c:	460b      	mov	r3, r1
 800442e:	18db      	adds	r3, r3, r3
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
 8004432:	4613      	mov	r3, r2
 8004434:	eb42 0303 	adc.w	r3, r2, r3
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800443e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004442:	f7fc fc01 	bl	8000c48 <__aeabi_uldivmod>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <UART_SetConfig+0x2d4>)
 800444c:	fba3 1302 	umull	r1, r3, r3, r2
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	2164      	movs	r1, #100	; 0x64
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	3332      	adds	r3, #50	; 0x32
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <UART_SetConfig+0x2d4>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	f003 0207 	and.w	r2, r3, #7
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4422      	add	r2, r4
 8004472:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004474:	e106      	b.n	8004684 <UART_SetConfig+0x4d8>
 8004476:	bf00      	nop
 8004478:	40011000 	.word	0x40011000
 800447c:	40011400 	.word	0x40011400
 8004480:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004488:	2200      	movs	r2, #0
 800448a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800448e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004492:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004496:	4642      	mov	r2, r8
 8004498:	464b      	mov	r3, r9
 800449a:	1891      	adds	r1, r2, r2
 800449c:	6239      	str	r1, [r7, #32]
 800449e:	415b      	adcs	r3, r3
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044a6:	4641      	mov	r1, r8
 80044a8:	1854      	adds	r4, r2, r1
 80044aa:	4649      	mov	r1, r9
 80044ac:	eb43 0501 	adc.w	r5, r3, r1
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	00eb      	lsls	r3, r5, #3
 80044ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044be:	00e2      	lsls	r2, r4, #3
 80044c0:	4614      	mov	r4, r2
 80044c2:	461d      	mov	r5, r3
 80044c4:	4643      	mov	r3, r8
 80044c6:	18e3      	adds	r3, r4, r3
 80044c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044cc:	464b      	mov	r3, r9
 80044ce:	eb45 0303 	adc.w	r3, r5, r3
 80044d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044f2:	4629      	mov	r1, r5
 80044f4:	008b      	lsls	r3, r1, #2
 80044f6:	4621      	mov	r1, r4
 80044f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044fc:	4621      	mov	r1, r4
 80044fe:	008a      	lsls	r2, r1, #2
 8004500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004504:	f7fc fba0 	bl	8000c48 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4b60      	ldr	r3, [pc, #384]	; (8004690 <UART_SetConfig+0x4e4>)
 800450e:	fba3 2302 	umull	r2, r3, r3, r2
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	011c      	lsls	r4, r3, #4
 8004516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451a:	2200      	movs	r2, #0
 800451c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004520:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	1891      	adds	r1, r2, r2
 800452e:	61b9      	str	r1, [r7, #24]
 8004530:	415b      	adcs	r3, r3
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004538:	4641      	mov	r1, r8
 800453a:	1851      	adds	r1, r2, r1
 800453c:	6139      	str	r1, [r7, #16]
 800453e:	4649      	mov	r1, r9
 8004540:	414b      	adcs	r3, r1
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004550:	4659      	mov	r1, fp
 8004552:	00cb      	lsls	r3, r1, #3
 8004554:	4651      	mov	r1, sl
 8004556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455a:	4651      	mov	r1, sl
 800455c:	00ca      	lsls	r2, r1, #3
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4603      	mov	r3, r0
 8004564:	4642      	mov	r2, r8
 8004566:	189b      	adds	r3, r3, r2
 8004568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800456c:	464b      	mov	r3, r9
 800456e:	460a      	mov	r2, r1
 8004570:	eb42 0303 	adc.w	r3, r2, r3
 8004574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	67bb      	str	r3, [r7, #120]	; 0x78
 8004582:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004590:	4649      	mov	r1, r9
 8004592:	008b      	lsls	r3, r1, #2
 8004594:	4641      	mov	r1, r8
 8004596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459a:	4641      	mov	r1, r8
 800459c:	008a      	lsls	r2, r1, #2
 800459e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045a2:	f7fc fb51 	bl	8000c48 <__aeabi_uldivmod>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	4b38      	ldr	r3, [pc, #224]	; (8004690 <UART_SetConfig+0x4e4>)
 80045ae:	fba3 2301 	umull	r2, r3, r3, r1
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2264      	movs	r2, #100	; 0x64
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	1acb      	subs	r3, r1, r3
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	3332      	adds	r3, #50	; 0x32
 80045c0:	4a33      	ldr	r2, [pc, #204]	; (8004690 <UART_SetConfig+0x4e4>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045cc:	441c      	add	r4, r3
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	673b      	str	r3, [r7, #112]	; 0x70
 80045d6:	677a      	str	r2, [r7, #116]	; 0x74
 80045d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045dc:	4642      	mov	r2, r8
 80045de:	464b      	mov	r3, r9
 80045e0:	1891      	adds	r1, r2, r2
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	415b      	adcs	r3, r3
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ec:	4641      	mov	r1, r8
 80045ee:	1851      	adds	r1, r2, r1
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	4649      	mov	r1, r9
 80045f4:	414b      	adcs	r3, r1
 80045f6:	607b      	str	r3, [r7, #4]
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004604:	4659      	mov	r1, fp
 8004606:	00cb      	lsls	r3, r1, #3
 8004608:	4651      	mov	r1, sl
 800460a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800460e:	4651      	mov	r1, sl
 8004610:	00ca      	lsls	r2, r1, #3
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	4603      	mov	r3, r0
 8004618:	4642      	mov	r2, r8
 800461a:	189b      	adds	r3, r3, r2
 800461c:	66bb      	str	r3, [r7, #104]	; 0x68
 800461e:	464b      	mov	r3, r9
 8004620:	460a      	mov	r2, r1
 8004622:	eb42 0303 	adc.w	r3, r2, r3
 8004626:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	663b      	str	r3, [r7, #96]	; 0x60
 8004632:	667a      	str	r2, [r7, #100]	; 0x64
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004640:	4649      	mov	r1, r9
 8004642:	008b      	lsls	r3, r1, #2
 8004644:	4641      	mov	r1, r8
 8004646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464a:	4641      	mov	r1, r8
 800464c:	008a      	lsls	r2, r1, #2
 800464e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004652:	f7fc faf9 	bl	8000c48 <__aeabi_uldivmod>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <UART_SetConfig+0x4e4>)
 800465c:	fba3 1302 	umull	r1, r3, r3, r2
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	2164      	movs	r1, #100	; 0x64
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	3332      	adds	r3, #50	; 0x32
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <UART_SetConfig+0x4e4>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	f003 020f 	and.w	r2, r3, #15
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4422      	add	r2, r4
 8004682:	609a      	str	r2, [r3, #8]
}
 8004684:	bf00      	nop
 8004686:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800468a:	46bd      	mov	sp, r7
 800468c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004690:	51eb851f 	.word	0x51eb851f

08004694 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80046a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046a6:	2b84      	cmp	r3, #132	; 0x84
 80046a8:	d005      	beq.n	80046b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80046aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	3303      	adds	r3, #3
 80046b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80046b6:	68fb      	ldr	r3, [r7, #12]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80046c8:	f000 fade 	bl	8004c88 <vTaskStartScheduler>
  
  return osOK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d4:	b089      	sub	sp, #36	; 0x24
 80046d6:	af04      	add	r7, sp, #16
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <osThreadCreate+0x54>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01c      	beq.n	8004726 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685c      	ldr	r4, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691e      	ldr	r6, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff ffc8 	bl	8004694 <makeFreeRtosPriority>
 8004704:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800470e:	9202      	str	r2, [sp, #8]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	9100      	str	r1, [sp, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	4632      	mov	r2, r6
 8004718:	4629      	mov	r1, r5
 800471a:	4620      	mov	r0, r4
 800471c:	f000 f8ed 	bl	80048fa <xTaskCreateStatic>
 8004720:	4603      	mov	r3, r0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e01c      	b.n	8004760 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685c      	ldr	r4, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004732:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff ffaa 	bl	8004694 <makeFreeRtosPriority>
 8004740:	4602      	mov	r2, r0
 8004742:	f107 030c 	add.w	r3, r7, #12
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	9200      	str	r2, [sp, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	4632      	mov	r2, r6
 800474e:	4629      	mov	r1, r5
 8004750:	4620      	mov	r0, r4
 8004752:	f000 f92f 	bl	80049b4 <xTaskCreate>
 8004756:	4603      	mov	r3, r0
 8004758:	2b01      	cmp	r3, #1
 800475a:	d001      	beq.n	8004760 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004760:	68fb      	ldr	r3, [r7, #12]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800476a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <osDelay+0x16>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	e000      	b.n	8004782 <osDelay+0x18>
 8004780:	2301      	movs	r3, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fa4c 	bl	8004c20 <vTaskDelay>
  
  return osOK;
 8004788:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f103 0208 	add.w	r2, r3, #8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f04f 32ff 	mov.w	r2, #4294967295
 80047aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f103 0208 	add.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f103 0208 	add.w	r2, r3, #8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	601a      	str	r2, [r3, #0]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d103      	bne.n	8004854 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e00c      	b.n	800486e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3308      	adds	r3, #8
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e002      	b.n	8004862 <vListInsert+0x2e>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d2f6      	bcs.n	800485c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6892      	ldr	r2, [r2, #8]
 80048bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6852      	ldr	r2, [r2, #4]
 80048c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d103      	bne.n	80048da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	1e5a      	subs	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b08e      	sub	sp, #56	; 0x38
 80048fe:	af04      	add	r7, sp, #16
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <xTaskCreateStatic+0x46>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	61fb      	str	r3, [r7, #28]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004940:	2354      	movs	r3, #84	; 0x54
 8004942:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b54      	cmp	r3, #84	; 0x54
 8004948:	d00a      	beq.n	8004960 <xTaskCreateStatic+0x66>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	61bb      	str	r3, [r7, #24]
}
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004960:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01e      	beq.n	80049a6 <xTaskCreateStatic+0xac>
 8004968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01b      	beq.n	80049a6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004976:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	2202      	movs	r2, #2
 800497c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004980:	2300      	movs	r3, #0
 8004982:	9303      	str	r3, [sp, #12]
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	9302      	str	r3, [sp, #8]
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f850 	bl	8004a3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800499e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049a0:	f000 f8d4 	bl	8004b4c <prvAddNewTaskToReadyList>
 80049a4:	e001      	b.n	80049aa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049aa:	697b      	ldr	r3, [r7, #20]
	}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3728      	adds	r7, #40	; 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	; 0x30
 80049b8:	af04      	add	r7, sp, #16
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fec5 	bl	8005758 <pvPortMalloc>
 80049ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00e      	beq.n	80049f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049d6:	2054      	movs	r0, #84	; 0x54
 80049d8:	f000 febe 	bl	8005758 <pvPortMalloc>
 80049dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
 80049ea:	e005      	b.n	80049f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049ec:	6978      	ldr	r0, [r7, #20]
 80049ee:	f000 ff7f 	bl	80058f0 <vPortFree>
 80049f2:	e001      	b.n	80049f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d017      	beq.n	8004a2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9303      	str	r3, [sp, #12]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	9302      	str	r3, [sp, #8]
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f80e 	bl	8004a3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a22:	69f8      	ldr	r0, [r7, #28]
 8004a24:	f000 f892 	bl	8004b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	e002      	b.n	8004a34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a34:	69bb      	ldr	r3, [r7, #24]
	}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a56:	3b01      	subs	r3, #1
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f023 0307 	bic.w	r3, r3, #7
 8004a64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	617b      	str	r3, [r7, #20]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01f      	beq.n	8004acc <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e012      	b.n	8004ab8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	7819      	ldrb	r1, [r3, #0]
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3334      	adds	r3, #52	; 0x34
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	d9e9      	bls.n	8004a92 <prvInitialiseNewTask+0x54>
 8004abe:	e000      	b.n	8004ac2 <prvInitialiseNewTask+0x84>
			{
				break;
 8004ac0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aca:	e003      	b.n	8004ad4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d901      	bls.n	8004ade <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ada:	2306      	movs	r3, #6
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	2200      	movs	r2, #0
 8004aee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	3304      	adds	r3, #4
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fe6c 	bl	80047d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afc:	3318      	adds	r3, #24
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fe67 	bl	80047d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	f1c3 0207 	rsb	r2, r3, #7
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	69b8      	ldr	r0, [r7, #24]
 8004b2e:	f000 fc05 	bl	800533c <pxPortInitialiseStack>
 8004b32:	4602      	mov	r2, r0
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b44:	bf00      	nop
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b54:	f000 fd1e 	bl	8005594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b58:	4b2a      	ldr	r3, [pc, #168]	; (8004c04 <prvAddNewTaskToReadyList+0xb8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	4a29      	ldr	r2, [pc, #164]	; (8004c04 <prvAddNewTaskToReadyList+0xb8>)
 8004b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b62:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <prvAddNewTaskToReadyList+0xbc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b6a:	4a27      	ldr	r2, [pc, #156]	; (8004c08 <prvAddNewTaskToReadyList+0xbc>)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b70:	4b24      	ldr	r3, [pc, #144]	; (8004c04 <prvAddNewTaskToReadyList+0xb8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d110      	bne.n	8004b9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b78:	f000 fabc 	bl	80050f4 <prvInitialiseTaskLists>
 8004b7c:	e00d      	b.n	8004b9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b7e:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <prvAddNewTaskToReadyList+0xc0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <prvAddNewTaskToReadyList+0xbc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d802      	bhi.n	8004b9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <prvAddNewTaskToReadyList+0xbc>)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <prvAddNewTaskToReadyList+0xc4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <prvAddNewTaskToReadyList+0xc4>)
 8004ba2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	2201      	movs	r2, #1
 8004baa:	409a      	lsls	r2, r3
 8004bac:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <prvAddNewTaskToReadyList+0xc8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <prvAddNewTaskToReadyList+0xc8>)
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <prvAddNewTaskToReadyList+0xcc>)
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f7ff fe0d 	bl	80047ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bd2:	f000 fd0f 	bl	80055f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <prvAddNewTaskToReadyList+0xc0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00e      	beq.n	8004bfc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bde:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <prvAddNewTaskToReadyList+0xbc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d207      	bcs.n	8004bfc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <prvAddNewTaskToReadyList+0xd0>)
 8004bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	200006fc 	.word	0x200006fc
 8004c08:	200005fc 	.word	0x200005fc
 8004c0c:	20000708 	.word	0x20000708
 8004c10:	20000718 	.word	0x20000718
 8004c14:	20000704 	.word	0x20000704
 8004c18:	20000600 	.word	0x20000600
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d017      	beq.n	8004c62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c32:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <vTaskDelay+0x60>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <vTaskDelay+0x30>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60bb      	str	r3, [r7, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c50:	f000 f87a 	bl	8004d48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c54:	2100      	movs	r1, #0
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fb0a 	bl	8005270 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c5c:	f000 f882 	bl	8004d64 <xTaskResumeAll>
 8004c60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d107      	bne.n	8004c78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <vTaskDelay+0x64>)
 8004c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000724 	.word	0x20000724
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c96:	463a      	mov	r2, r7
 8004c98:	1d39      	adds	r1, r7, #4
 8004c9a:	f107 0308 	add.w	r3, r7, #8
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc f950 	bl	8000f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ca4:	6839      	ldr	r1, [r7, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	9202      	str	r2, [sp, #8]
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	491e      	ldr	r1, [pc, #120]	; (8004d30 <vTaskStartScheduler+0xa8>)
 8004cb8:	481e      	ldr	r0, [pc, #120]	; (8004d34 <vTaskStartScheduler+0xac>)
 8004cba:	f7ff fe1e 	bl	80048fa <xTaskCreateStatic>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4a1d      	ldr	r2, [pc, #116]	; (8004d38 <vTaskStartScheduler+0xb0>)
 8004cc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <vTaskStartScheduler+0xb0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e001      	b.n	8004cd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d116      	bne.n	8004d0a <vTaskStartScheduler+0x82>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	613b      	str	r3, [r7, #16]
}
 8004cee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cf0:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <vTaskStartScheduler+0xb4>)
 8004cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <vTaskStartScheduler+0xb8>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cfe:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <vTaskStartScheduler+0xbc>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d04:	f000 fba4 	bl	8005450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d08:	e00e      	b.n	8004d28 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d10a      	bne.n	8004d28 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60fb      	str	r3, [r7, #12]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <vTaskStartScheduler+0x9e>
}
 8004d28:	bf00      	nop
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	080088a0 	.word	0x080088a0
 8004d34:	080050c5 	.word	0x080050c5
 8004d38:	20000720 	.word	0x20000720
 8004d3c:	2000071c 	.word	0x2000071c
 8004d40:	20000708 	.word	0x20000708
 8004d44:	20000700 	.word	0x20000700

08004d48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <vTaskSuspendAll+0x18>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	4a03      	ldr	r2, [pc, #12]	; (8004d60 <vTaskSuspendAll+0x18>)
 8004d54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d56:	bf00      	nop
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	20000724 	.word	0x20000724

08004d64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <xTaskResumeAll+0x114>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	603b      	str	r3, [r7, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d90:	f000 fc00 	bl	8005594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d94:	4b38      	ldr	r3, [pc, #224]	; (8004e78 <xTaskResumeAll+0x114>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	4a37      	ldr	r2, [pc, #220]	; (8004e78 <xTaskResumeAll+0x114>)
 8004d9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <xTaskResumeAll+0x114>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d161      	bne.n	8004e6a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004da6:	4b35      	ldr	r3, [pc, #212]	; (8004e7c <xTaskResumeAll+0x118>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d05d      	beq.n	8004e6a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dae:	e02e      	b.n	8004e0e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db0:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <xTaskResumeAll+0x11c>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3318      	adds	r3, #24
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fd72 	bl	80048a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fd6d 	bl	80048a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <xTaskResumeAll+0x120>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <xTaskResumeAll+0x120>)
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4a27      	ldr	r2, [pc, #156]	; (8004e88 <xTaskResumeAll+0x124>)
 8004dec:	441a      	add	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3304      	adds	r3, #4
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f7ff fcf9 	bl	80047ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfe:	4b23      	ldr	r3, [pc, #140]	; (8004e8c <xTaskResumeAll+0x128>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004e08:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <xTaskResumeAll+0x12c>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <xTaskResumeAll+0x11c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1cc      	bne.n	8004db0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e1c:	f000 fa08 	bl	8005230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e20:	4b1c      	ldr	r3, [pc, #112]	; (8004e94 <xTaskResumeAll+0x130>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d010      	beq.n	8004e4e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e2c:	f000 f836 	bl	8004e9c <xTaskIncrementTick>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <xTaskResumeAll+0x12c>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f1      	bne.n	8004e2c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004e48:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <xTaskResumeAll+0x130>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e4e:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <xTaskResumeAll+0x12c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e56:	2301      	movs	r3, #1
 8004e58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <xTaskResumeAll+0x134>)
 8004e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e6a:	f000 fbc3 	bl	80055f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000724 	.word	0x20000724
 8004e7c:	200006fc 	.word	0x200006fc
 8004e80:	200006bc 	.word	0x200006bc
 8004e84:	20000704 	.word	0x20000704
 8004e88:	20000600 	.word	0x20000600
 8004e8c:	200005fc 	.word	0x200005fc
 8004e90:	20000710 	.word	0x20000710
 8004e94:	2000070c 	.word	0x2000070c
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea6:	4b4e      	ldr	r3, [pc, #312]	; (8004fe0 <xTaskIncrementTick+0x144>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f040 808e 	bne.w	8004fcc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004eb0:	4b4c      	ldr	r3, [pc, #304]	; (8004fe4 <xTaskIncrementTick+0x148>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004eb8:	4a4a      	ldr	r2, [pc, #296]	; (8004fe4 <xTaskIncrementTick+0x148>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d120      	bne.n	8004f06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ec4:	4b48      	ldr	r3, [pc, #288]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	603b      	str	r3, [r7, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <xTaskIncrementTick+0x46>
 8004ee4:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	4b40      	ldr	r3, [pc, #256]	; (8004fec <xTaskIncrementTick+0x150>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3e      	ldr	r2, [pc, #248]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4a3e      	ldr	r2, [pc, #248]	; (8004fec <xTaskIncrementTick+0x150>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b3d      	ldr	r3, [pc, #244]	; (8004ff0 <xTaskIncrementTick+0x154>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	4a3c      	ldr	r2, [pc, #240]	; (8004ff0 <xTaskIncrementTick+0x154>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	f000 f995 	bl	8005230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f06:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <xTaskIncrementTick+0x158>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d348      	bcc.n	8004fa2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f10:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1a:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <xTaskIncrementTick+0x158>)
 8004f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f20:	601a      	str	r2, [r3, #0]
					break;
 8004f22:	e03e      	b.n	8004fa2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	4b30      	ldr	r3, [pc, #192]	; (8004fe8 <xTaskIncrementTick+0x14c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d203      	bcs.n	8004f44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ff4 <xTaskIncrementTick+0x158>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f42:	e02e      	b.n	8004fa2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fcac 	bl	80048a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d004      	beq.n	8004f60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	3318      	adds	r3, #24
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fca3 	bl	80048a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	2201      	movs	r2, #1
 8004f66:	409a      	lsls	r2, r3
 8004f68:	4b23      	ldr	r3, [pc, #140]	; (8004ff8 <xTaskIncrementTick+0x15c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <xTaskIncrementTick+0x15c>)
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <xTaskIncrementTick+0x160>)
 8004f80:	441a      	add	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f7ff fc2f 	bl	80047ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <xTaskIncrementTick+0x164>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d3b9      	bcc.n	8004f10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa0:	e7b6      	b.n	8004f10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fa2:	4b17      	ldr	r3, [pc, #92]	; (8005000 <xTaskIncrementTick+0x164>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	4914      	ldr	r1, [pc, #80]	; (8004ffc <xTaskIncrementTick+0x160>)
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d901      	bls.n	8004fbe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fbe:	4b11      	ldr	r3, [pc, #68]	; (8005004 <xTaskIncrementTick+0x168>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e004      	b.n	8004fd6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <xTaskIncrementTick+0x16c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	4a0d      	ldr	r2, [pc, #52]	; (8005008 <xTaskIncrementTick+0x16c>)
 8004fd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fd6:	697b      	ldr	r3, [r7, #20]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000724 	.word	0x20000724
 8004fe4:	20000700 	.word	0x20000700
 8004fe8:	200006b4 	.word	0x200006b4
 8004fec:	200006b8 	.word	0x200006b8
 8004ff0:	20000714 	.word	0x20000714
 8004ff4:	2000071c 	.word	0x2000071c
 8004ff8:	20000704 	.word	0x20000704
 8004ffc:	20000600 	.word	0x20000600
 8005000:	200005fc 	.word	0x200005fc
 8005004:	20000710 	.word	0x20000710
 8005008:	2000070c 	.word	0x2000070c

0800500c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005012:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <vTaskSwitchContext+0xa4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800501a:	4b26      	ldr	r3, [pc, #152]	; (80050b4 <vTaskSwitchContext+0xa8>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005020:	e03f      	b.n	80050a2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005022:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <vTaskSwitchContext+0xa8>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005028:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <vTaskSwitchContext+0xac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005036:	7afb      	ldrb	r3, [r7, #11]
 8005038:	f1c3 031f 	rsb	r3, r3, #31
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	491f      	ldr	r1, [pc, #124]	; (80050bc <vTaskSwitchContext+0xb0>)
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	607b      	str	r3, [r7, #4]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <vTaskSwitchContext+0x5a>
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4a12      	ldr	r2, [pc, #72]	; (80050bc <vTaskSwitchContext+0xb0>)
 8005074:	4413      	add	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3308      	adds	r3, #8
 800508a:	429a      	cmp	r2, r3
 800508c:	d104      	bne.n	8005098 <vTaskSwitchContext+0x8c>
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	605a      	str	r2, [r3, #4]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <vTaskSwitchContext+0xb4>)
 80050a0:	6013      	str	r3, [r2, #0]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000724 	.word	0x20000724
 80050b4:	20000710 	.word	0x20000710
 80050b8:	20000704 	.word	0x20000704
 80050bc:	20000600 	.word	0x20000600
 80050c0:	200005fc 	.word	0x200005fc

080050c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050cc:	f000 f852 	bl	8005174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <prvIdleTask+0x28>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d9f9      	bls.n	80050cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <prvIdleTask+0x2c>)
 80050da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050e8:	e7f0      	b.n	80050cc <prvIdleTask+0x8>
 80050ea:	bf00      	nop
 80050ec:	20000600 	.word	0x20000600
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050fa:	2300      	movs	r3, #0
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	e00c      	b.n	800511a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4a12      	ldr	r2, [pc, #72]	; (8005154 <prvInitialiseTaskLists+0x60>)
 800510c:	4413      	add	r3, r2
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fb3f 	bl	8004792 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3301      	adds	r3, #1
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b06      	cmp	r3, #6
 800511e:	d9ef      	bls.n	8005100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005120:	480d      	ldr	r0, [pc, #52]	; (8005158 <prvInitialiseTaskLists+0x64>)
 8005122:	f7ff fb36 	bl	8004792 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005126:	480d      	ldr	r0, [pc, #52]	; (800515c <prvInitialiseTaskLists+0x68>)
 8005128:	f7ff fb33 	bl	8004792 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800512c:	480c      	ldr	r0, [pc, #48]	; (8005160 <prvInitialiseTaskLists+0x6c>)
 800512e:	f7ff fb30 	bl	8004792 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005132:	480c      	ldr	r0, [pc, #48]	; (8005164 <prvInitialiseTaskLists+0x70>)
 8005134:	f7ff fb2d 	bl	8004792 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005138:	480b      	ldr	r0, [pc, #44]	; (8005168 <prvInitialiseTaskLists+0x74>)
 800513a:	f7ff fb2a 	bl	8004792 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800513e:	4b0b      	ldr	r3, [pc, #44]	; (800516c <prvInitialiseTaskLists+0x78>)
 8005140:	4a05      	ldr	r2, [pc, #20]	; (8005158 <prvInitialiseTaskLists+0x64>)
 8005142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005144:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <prvInitialiseTaskLists+0x7c>)
 8005146:	4a05      	ldr	r2, [pc, #20]	; (800515c <prvInitialiseTaskLists+0x68>)
 8005148:	601a      	str	r2, [r3, #0]
}
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000600 	.word	0x20000600
 8005158:	2000068c 	.word	0x2000068c
 800515c:	200006a0 	.word	0x200006a0
 8005160:	200006bc 	.word	0x200006bc
 8005164:	200006d0 	.word	0x200006d0
 8005168:	200006e8 	.word	0x200006e8
 800516c:	200006b4 	.word	0x200006b4
 8005170:	200006b8 	.word	0x200006b8

08005174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800517a:	e019      	b.n	80051b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800517c:	f000 fa0a 	bl	8005594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005180:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <prvCheckTasksWaitingTermination+0x50>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fb8a 	bl	80048a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005192:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <prvCheckTasksWaitingTermination+0x54>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3b01      	subs	r3, #1
 8005198:	4a0b      	ldr	r2, [pc, #44]	; (80051c8 <prvCheckTasksWaitingTermination+0x54>)
 800519a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <prvCheckTasksWaitingTermination+0x58>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <prvCheckTasksWaitingTermination+0x58>)
 80051a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051a6:	f000 fa25 	bl	80055f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f810 	bl	80051d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <prvCheckTasksWaitingTermination+0x58>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e1      	bne.n	800517c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200006d0 	.word	0x200006d0
 80051c8:	200006fc 	.word	0x200006fc
 80051cc:	200006e4 	.word	0x200006e4

080051d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d108      	bne.n	80051f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fb82 	bl	80058f0 <vPortFree>
				vPortFree( pxTCB );
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fb7f 	bl	80058f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051f2:	e018      	b.n	8005226 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d103      	bne.n	8005206 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fb76 	bl	80058f0 <vPortFree>
	}
 8005204:	e00f      	b.n	8005226 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800520c:	2b02      	cmp	r3, #2
 800520e:	d00a      	beq.n	8005226 <prvDeleteTCB+0x56>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	60fb      	str	r3, [r7, #12]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <prvDeleteTCB+0x54>
	}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005236:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <prvResetNextTaskUnblockTime+0x38>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <prvResetNextTaskUnblockTime+0x3c>)
 8005242:	f04f 32ff 	mov.w	r2, #4294967295
 8005246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005248:	e008      	b.n	800525c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524a:	4b07      	ldr	r3, [pc, #28]	; (8005268 <prvResetNextTaskUnblockTime+0x38>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a04      	ldr	r2, [pc, #16]	; (800526c <prvResetNextTaskUnblockTime+0x3c>)
 800525a:	6013      	str	r3, [r2, #0]
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	200006b4 	.word	0x200006b4
 800526c:	2000071c 	.word	0x2000071c

08005270 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <prvAddCurrentTaskToDelayedList+0xb0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005280:	4b28      	ldr	r3, [pc, #160]	; (8005324 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3304      	adds	r3, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fb0d 	bl	80048a6 <uxListRemove>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10b      	bne.n	80052aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005292:	4b24      	ldr	r3, [pc, #144]	; (8005324 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	2201      	movs	r2, #1
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43da      	mvns	r2, r3
 80052a0:	4b21      	ldr	r3, [pc, #132]	; (8005328 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4013      	ands	r3, r2
 80052a6:	4a20      	ldr	r2, [pc, #128]	; (8005328 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d10a      	bne.n	80052c8 <prvAddCurrentTaskToDelayedList+0x58>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3304      	adds	r3, #4
 80052be:	4619      	mov	r1, r3
 80052c0:	481a      	ldr	r0, [pc, #104]	; (800532c <prvAddCurrentTaskToDelayedList+0xbc>)
 80052c2:	f7ff fa93 	bl	80047ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052c6:	e026      	b.n	8005316 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4413      	add	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d209      	bcs.n	80052f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e0:	4b13      	ldr	r3, [pc, #76]	; (8005330 <prvAddCurrentTaskToDelayedList+0xc0>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7ff faa1 	bl	8004834 <vListInsert>
}
 80052f2:	e010      	b.n	8005316 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052f4:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f7ff fa97 	bl	8004834 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005306:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	429a      	cmp	r2, r3
 800530e:	d202      	bcs.n	8005316 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005310:	4a09      	ldr	r2, [pc, #36]	; (8005338 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6013      	str	r3, [r2, #0]
}
 8005316:	bf00      	nop
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000700 	.word	0x20000700
 8005324:	200005fc 	.word	0x200005fc
 8005328:	20000704 	.word	0x20000704
 800532c:	200006e8 	.word	0x200006e8
 8005330:	200006b8 	.word	0x200006b8
 8005334:	200006b4 	.word	0x200006b4
 8005338:	2000071c 	.word	0x2000071c

0800533c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3b04      	subs	r3, #4
 800534c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3b04      	subs	r3, #4
 800535a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f023 0201 	bic.w	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3b04      	subs	r3, #4
 800536a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800536c:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <pxPortInitialiseStack+0x64>)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3b14      	subs	r3, #20
 8005376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3b04      	subs	r3, #4
 8005382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f06f 0202 	mvn.w	r2, #2
 800538a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3b20      	subs	r3, #32
 8005390:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005392:	68fb      	ldr	r3, [r7, #12]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	080053a5 	.word	0x080053a5

080053a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053ae:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <prvTaskExitError+0x54>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d00a      	beq.n	80053ce <prvTaskExitError+0x2a>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	60fb      	str	r3, [r7, #12]
}
 80053ca:	bf00      	nop
 80053cc:	e7fe      	b.n	80053cc <prvTaskExitError+0x28>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60bb      	str	r3, [r7, #8]
}
 80053e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053e2:	bf00      	nop
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0fc      	beq.n	80053e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	2000000c 	.word	0x2000000c
 80053fc:	00000000 	.word	0x00000000

08005400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <pxCurrentTCBConst2>)
 8005402:	6819      	ldr	r1, [r3, #0]
 8005404:	6808      	ldr	r0, [r1, #0]
 8005406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	f380 8809 	msr	PSP, r0
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8811 	msr	BASEPRI, r0
 800541a:	4770      	bx	lr
 800541c:	f3af 8000 	nop.w

08005420 <pxCurrentTCBConst2>:
 8005420:	200005fc 	.word	0x200005fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop

08005428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005428:	4808      	ldr	r0, [pc, #32]	; (800544c <prvPortStartFirstTask+0x24>)
 800542a:	6800      	ldr	r0, [r0, #0]
 800542c:	6800      	ldr	r0, [r0, #0]
 800542e:	f380 8808 	msr	MSP, r0
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f380 8814 	msr	CONTROL, r0
 800543a:	b662      	cpsie	i
 800543c:	b661      	cpsie	f
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	df00      	svc	0
 8005448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800544a:	bf00      	nop
 800544c:	e000ed08 	.word	0xe000ed08

08005450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005456:	4b46      	ldr	r3, [pc, #280]	; (8005570 <xPortStartScheduler+0x120>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a46      	ldr	r2, [pc, #280]	; (8005574 <xPortStartScheduler+0x124>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10a      	bne.n	8005476 <xPortStartScheduler+0x26>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	613b      	str	r3, [r7, #16]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005476:	4b3e      	ldr	r3, [pc, #248]	; (8005570 <xPortStartScheduler+0x120>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <xPortStartScheduler+0x128>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d10a      	bne.n	8005496 <xPortStartScheduler+0x46>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
}
 8005492:	bf00      	nop
 8005494:	e7fe      	b.n	8005494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005496:	4b39      	ldr	r3, [pc, #228]	; (800557c <xPortStartScheduler+0x12c>)
 8005498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	22ff      	movs	r2, #255	; 0xff
 80054a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	4b31      	ldr	r3, [pc, #196]	; (8005580 <xPortStartScheduler+0x130>)
 80054bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054be:	4b31      	ldr	r3, [pc, #196]	; (8005584 <xPortStartScheduler+0x134>)
 80054c0:	2207      	movs	r2, #7
 80054c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054c4:	e009      	b.n	80054da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80054c6:	4b2f      	ldr	r3, [pc, #188]	; (8005584 <xPortStartScheduler+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <xPortStartScheduler+0x134>)
 80054ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b80      	cmp	r3, #128	; 0x80
 80054e4:	d0ef      	beq.n	80054c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054e6:	4b27      	ldr	r3, [pc, #156]	; (8005584 <xPortStartScheduler+0x134>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1c3 0307 	rsb	r3, r3, #7
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d00a      	beq.n	8005508 <xPortStartScheduler+0xb8>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60bb      	str	r3, [r7, #8]
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005508:	4b1e      	ldr	r3, [pc, #120]	; (8005584 <xPortStartScheduler+0x134>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <xPortStartScheduler+0x134>)
 8005510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <xPortStartScheduler+0x134>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800551a:	4a1a      	ldr	r2, [pc, #104]	; (8005584 <xPortStartScheduler+0x134>)
 800551c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005526:	4b18      	ldr	r3, [pc, #96]	; (8005588 <xPortStartScheduler+0x138>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a17      	ldr	r2, [pc, #92]	; (8005588 <xPortStartScheduler+0x138>)
 800552c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <xPortStartScheduler+0x138>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a14      	ldr	r2, [pc, #80]	; (8005588 <xPortStartScheduler+0x138>)
 8005538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800553c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800553e:	f000 f8dd 	bl	80056fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005542:	4b12      	ldr	r3, [pc, #72]	; (800558c <xPortStartScheduler+0x13c>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005548:	f000 f8fc 	bl	8005744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <xPortStartScheduler+0x140>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0f      	ldr	r2, [pc, #60]	; (8005590 <xPortStartScheduler+0x140>)
 8005552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005558:	f7ff ff66 	bl	8005428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800555c:	f7ff fd56 	bl	800500c <vTaskSwitchContext>
	prvTaskExitError();
 8005560:	f7ff ff20 	bl	80053a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	e000ed00 	.word	0xe000ed00
 8005574:	410fc271 	.word	0x410fc271
 8005578:	410fc270 	.word	0x410fc270
 800557c:	e000e400 	.word	0xe000e400
 8005580:	20000728 	.word	0x20000728
 8005584:	2000072c 	.word	0x2000072c
 8005588:	e000ed20 	.word	0xe000ed20
 800558c:	2000000c 	.word	0x2000000c
 8005590:	e000ef34 	.word	0xe000ef34

08005594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	607b      	str	r3, [r7, #4]
}
 80055ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055ae:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <vPortEnterCritical+0x58>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <vPortEnterCritical+0x58>)
 80055b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <vPortEnterCritical+0x58>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d10f      	bne.n	80055e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <vPortEnterCritical+0x5c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	603b      	str	r3, [r7, #0]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <vPortEnterCritical+0x4a>
	}
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	2000000c 	.word	0x2000000c
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055fa:	4b12      	ldr	r3, [pc, #72]	; (8005644 <vPortExitCritical+0x50>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <vPortExitCritical+0x24>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	607b      	str	r3, [r7, #4]
}
 8005614:	bf00      	nop
 8005616:	e7fe      	b.n	8005616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <vPortExitCritical+0x50>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3b01      	subs	r3, #1
 800561e:	4a09      	ldr	r2, [pc, #36]	; (8005644 <vPortExitCritical+0x50>)
 8005620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <vPortExitCritical+0x50>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d105      	bne.n	8005636 <vPortExitCritical+0x42>
 800562a:	2300      	movs	r3, #0
 800562c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	2000000c 	.word	0x2000000c
	...

08005650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005650:	f3ef 8009 	mrs	r0, PSP
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	4b15      	ldr	r3, [pc, #84]	; (80056b0 <pxCurrentTCBConst>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	f01e 0f10 	tst.w	lr, #16
 8005660:	bf08      	it	eq
 8005662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566a:	6010      	str	r0, [r2, #0]
 800566c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005674:	f380 8811 	msr	BASEPRI, r0
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f7ff fcc4 	bl	800500c <vTaskSwitchContext>
 8005684:	f04f 0000 	mov.w	r0, #0
 8005688:	f380 8811 	msr	BASEPRI, r0
 800568c:	bc09      	pop	{r0, r3}
 800568e:	6819      	ldr	r1, [r3, #0]
 8005690:	6808      	ldr	r0, [r1, #0]
 8005692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005696:	f01e 0f10 	tst.w	lr, #16
 800569a:	bf08      	it	eq
 800569c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056a0:	f380 8809 	msr	PSP, r0
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	f3af 8000 	nop.w

080056b0 <pxCurrentTCBConst>:
 80056b0:	200005fc 	.word	0x200005fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop

080056b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	607b      	str	r3, [r7, #4]
}
 80056d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056d2:	f7ff fbe3 	bl	8004e9c <xTaskIncrementTick>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <SysTick_Handler+0x40>)
 80056de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	2300      	movs	r3, #0
 80056e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f383 8811 	msr	BASEPRI, r3
}
 80056ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <vPortSetupTimerInterrupt+0x34>)
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <vPortSetupTimerInterrupt+0x38>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <vPortSetupTimerInterrupt+0x3c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a0a      	ldr	r2, [pc, #40]	; (800573c <vPortSetupTimerInterrupt+0x40>)
 8005712:	fba2 2303 	umull	r2, r3, r2, r3
 8005716:	099b      	lsrs	r3, r3, #6
 8005718:	4a09      	ldr	r2, [pc, #36]	; (8005740 <vPortSetupTimerInterrupt+0x44>)
 800571a:	3b01      	subs	r3, #1
 800571c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800571e:	4b04      	ldr	r3, [pc, #16]	; (8005730 <vPortSetupTimerInterrupt+0x34>)
 8005720:	2207      	movs	r2, #7
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	e000e010 	.word	0xe000e010
 8005734:	e000e018 	.word	0xe000e018
 8005738:	20000000 	.word	0x20000000
 800573c:	10624dd3 	.word	0x10624dd3
 8005740:	e000e014 	.word	0xe000e014

08005744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005754 <vPortEnableVFP+0x10>
 8005748:	6801      	ldr	r1, [r0, #0]
 800574a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800574e:	6001      	str	r1, [r0, #0]
 8005750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005752:	bf00      	nop
 8005754:	e000ed88 	.word	0xe000ed88

08005758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005764:	f7ff faf0 	bl	8004d48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005768:	4b5b      	ldr	r3, [pc, #364]	; (80058d8 <pvPortMalloc+0x180>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005770:	f000 f920 	bl	80059b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005774:	4b59      	ldr	r3, [pc, #356]	; (80058dc <pvPortMalloc+0x184>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	f040 8093 	bne.w	80058a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01d      	beq.n	80057c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005788:	2208      	movs	r2, #8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4413      	add	r3, r2
 800578e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	2b00      	cmp	r3, #0
 8005798:	d014      	beq.n	80057c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f023 0307 	bic.w	r3, r3, #7
 80057a0:	3308      	adds	r3, #8
 80057a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <pvPortMalloc+0x6c>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	617b      	str	r3, [r7, #20]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d06e      	beq.n	80058a8 <pvPortMalloc+0x150>
 80057ca:	4b45      	ldr	r3, [pc, #276]	; (80058e0 <pvPortMalloc+0x188>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d869      	bhi.n	80058a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057d4:	4b43      	ldr	r3, [pc, #268]	; (80058e4 <pvPortMalloc+0x18c>)
 80057d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057d8:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <pvPortMalloc+0x18c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057de:	e004      	b.n	80057ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d903      	bls.n	80057fc <pvPortMalloc+0xa4>
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f1      	bne.n	80057e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057fc:	4b36      	ldr	r3, [pc, #216]	; (80058d8 <pvPortMalloc+0x180>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005802:	429a      	cmp	r2, r3
 8005804:	d050      	beq.n	80058a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2208      	movs	r2, #8
 800580c:	4413      	add	r3, r2
 800580e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	1ad2      	subs	r2, r2, r3
 8005820:	2308      	movs	r3, #8
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	429a      	cmp	r2, r3
 8005826:	d91f      	bls.n	8005868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <pvPortMalloc+0xf8>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	613b      	str	r3, [r7, #16]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	1ad2      	subs	r2, r2, r3
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005862:	69b8      	ldr	r0, [r7, #24]
 8005864:	f000 f908 	bl	8005a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005868:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <pvPortMalloc+0x188>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	4a1b      	ldr	r2, [pc, #108]	; (80058e0 <pvPortMalloc+0x188>)
 8005874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005876:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <pvPortMalloc+0x188>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <pvPortMalloc+0x190>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d203      	bcs.n	800588a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005882:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <pvPortMalloc+0x188>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <pvPortMalloc+0x190>)
 8005888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	4b13      	ldr	r3, [pc, #76]	; (80058dc <pvPortMalloc+0x184>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	431a      	orrs	r2, r3
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800589e:	4b13      	ldr	r3, [pc, #76]	; (80058ec <pvPortMalloc+0x194>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3301      	adds	r3, #1
 80058a4:	4a11      	ldr	r2, [pc, #68]	; (80058ec <pvPortMalloc+0x194>)
 80058a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058a8:	f7ff fa5c 	bl	8004d64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <pvPortMalloc+0x174>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	60fb      	str	r3, [r7, #12]
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <pvPortMalloc+0x172>
	return pvReturn;
 80058cc:	69fb      	ldr	r3, [r7, #28]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3728      	adds	r7, #40	; 0x28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20004338 	.word	0x20004338
 80058dc:	2000434c 	.word	0x2000434c
 80058e0:	2000433c 	.word	0x2000433c
 80058e4:	20004330 	.word	0x20004330
 80058e8:	20004340 	.word	0x20004340
 80058ec:	20004344 	.word	0x20004344

080058f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d04d      	beq.n	800599e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005902:	2308      	movs	r3, #8
 8005904:	425b      	negs	r3, r3
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4413      	add	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <vPortFree+0xb8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4013      	ands	r3, r2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <vPortFree+0x44>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60fb      	str	r3, [r7, #12]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <vPortFree+0x62>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	60bb      	str	r3, [r7, #8]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <vPortFree+0xb8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01e      	beq.n	800599e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11a      	bne.n	800599e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	4b0e      	ldr	r3, [pc, #56]	; (80059a8 <vPortFree+0xb8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	43db      	mvns	r3, r3
 8005972:	401a      	ands	r2, r3
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005978:	f7ff f9e6 	bl	8004d48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <vPortFree+0xbc>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4413      	add	r3, r2
 8005986:	4a09      	ldr	r2, [pc, #36]	; (80059ac <vPortFree+0xbc>)
 8005988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800598a:	6938      	ldr	r0, [r7, #16]
 800598c:	f000 f874 	bl	8005a78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <vPortFree+0xc0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	4a06      	ldr	r2, [pc, #24]	; (80059b0 <vPortFree+0xc0>)
 8005998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800599a:	f7ff f9e3 	bl	8004d64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800599e:	bf00      	nop
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	2000434c 	.word	0x2000434c
 80059ac:	2000433c 	.word	0x2000433c
 80059b0:	20004348 	.word	0x20004348

080059b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80059be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059c0:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <prvHeapInit+0xac>)
 80059c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00c      	beq.n	80059e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3307      	adds	r3, #7
 80059d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0307 	bic.w	r3, r3, #7
 80059da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	4a1f      	ldr	r2, [pc, #124]	; (8005a60 <prvHeapInit+0xac>)
 80059e4:	4413      	add	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059ec:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <prvHeapInit+0xb0>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059f2:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <prvHeapInit+0xb0>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	4413      	add	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a00:	2208      	movs	r2, #8
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0307 	bic.w	r3, r3, #7
 8005a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <prvHeapInit+0xb4>)
 8005a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <prvHeapInit+0xb4>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <prvHeapInit+0xb4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <prvHeapInit+0xb4>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <prvHeapInit+0xb8>)
 8005a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <prvHeapInit+0xbc>)
 8005a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <prvHeapInit+0xc0>)
 8005a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a52:	601a      	str	r2, [r3, #0]
}
 8005a54:	bf00      	nop
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	20000730 	.word	0x20000730
 8005a64:	20004330 	.word	0x20004330
 8005a68:	20004338 	.word	0x20004338
 8005a6c:	20004340 	.word	0x20004340
 8005a70:	2000433c 	.word	0x2000433c
 8005a74:	2000434c 	.word	0x2000434c

08005a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a80:	4b28      	ldr	r3, [pc, #160]	; (8005b24 <prvInsertBlockIntoFreeList+0xac>)
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e002      	b.n	8005a8c <prvInsertBlockIntoFreeList+0x14>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d8f7      	bhi.n	8005a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d108      	bne.n	8005aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	441a      	add	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	441a      	add	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d118      	bne.n	8005b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <prvInsertBlockIntoFreeList+0xb0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d00d      	beq.n	8005af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	e008      	b.n	8005b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005af6:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <prvInsertBlockIntoFreeList+0xb0>)
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e003      	b.n	8005b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d002      	beq.n	8005b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20004330 	.word	0x20004330
 8005b28:	20004338 	.word	0x20004338

08005b2c <__cvt>:
 8005b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b30:	ec55 4b10 	vmov	r4, r5, d0
 8005b34:	2d00      	cmp	r5, #0
 8005b36:	460e      	mov	r6, r1
 8005b38:	4619      	mov	r1, r3
 8005b3a:	462b      	mov	r3, r5
 8005b3c:	bfbb      	ittet	lt
 8005b3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b42:	461d      	movlt	r5, r3
 8005b44:	2300      	movge	r3, #0
 8005b46:	232d      	movlt	r3, #45	; 0x2d
 8005b48:	700b      	strb	r3, [r1, #0]
 8005b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b50:	4691      	mov	r9, r2
 8005b52:	f023 0820 	bic.w	r8, r3, #32
 8005b56:	bfbc      	itt	lt
 8005b58:	4622      	movlt	r2, r4
 8005b5a:	4614      	movlt	r4, r2
 8005b5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b60:	d005      	beq.n	8005b6e <__cvt+0x42>
 8005b62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b66:	d100      	bne.n	8005b6a <__cvt+0x3e>
 8005b68:	3601      	adds	r6, #1
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	e000      	b.n	8005b70 <__cvt+0x44>
 8005b6e:	2103      	movs	r1, #3
 8005b70:	ab03      	add	r3, sp, #12
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	ab02      	add	r3, sp, #8
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	ec45 4b10 	vmov	d0, r4, r5
 8005b7c:	4653      	mov	r3, sl
 8005b7e:	4632      	mov	r2, r6
 8005b80:	f000 fe62 	bl	8006848 <_dtoa_r>
 8005b84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b88:	4607      	mov	r7, r0
 8005b8a:	d102      	bne.n	8005b92 <__cvt+0x66>
 8005b8c:	f019 0f01 	tst.w	r9, #1
 8005b90:	d022      	beq.n	8005bd8 <__cvt+0xac>
 8005b92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b96:	eb07 0906 	add.w	r9, r7, r6
 8005b9a:	d110      	bne.n	8005bbe <__cvt+0x92>
 8005b9c:	783b      	ldrb	r3, [r7, #0]
 8005b9e:	2b30      	cmp	r3, #48	; 0x30
 8005ba0:	d10a      	bne.n	8005bb8 <__cvt+0x8c>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	4629      	mov	r1, r5
 8005baa:	f7fa ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bae:	b918      	cbnz	r0, 8005bb8 <__cvt+0x8c>
 8005bb0:	f1c6 0601 	rsb	r6, r6, #1
 8005bb4:	f8ca 6000 	str.w	r6, [sl]
 8005bb8:	f8da 3000 	ldr.w	r3, [sl]
 8005bbc:	4499      	add	r9, r3
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	f7fa ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bca:	b108      	cbz	r0, 8005bd0 <__cvt+0xa4>
 8005bcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bd0:	2230      	movs	r2, #48	; 0x30
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	454b      	cmp	r3, r9
 8005bd6:	d307      	bcc.n	8005be8 <__cvt+0xbc>
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bdc:	1bdb      	subs	r3, r3, r7
 8005bde:	4638      	mov	r0, r7
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	b004      	add	sp, #16
 8005be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be8:	1c59      	adds	r1, r3, #1
 8005bea:	9103      	str	r1, [sp, #12]
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e7f0      	b.n	8005bd2 <__cvt+0xa6>

08005bf0 <__exponent>:
 8005bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	bfb8      	it	lt
 8005bf8:	4249      	neglt	r1, r1
 8005bfa:	f803 2b02 	strb.w	r2, [r3], #2
 8005bfe:	bfb4      	ite	lt
 8005c00:	222d      	movlt	r2, #45	; 0x2d
 8005c02:	222b      	movge	r2, #43	; 0x2b
 8005c04:	2909      	cmp	r1, #9
 8005c06:	7042      	strb	r2, [r0, #1]
 8005c08:	dd2a      	ble.n	8005c60 <__exponent+0x70>
 8005c0a:	f10d 0207 	add.w	r2, sp, #7
 8005c0e:	4617      	mov	r7, r2
 8005c10:	260a      	movs	r6, #10
 8005c12:	4694      	mov	ip, r2
 8005c14:	fb91 f5f6 	sdiv	r5, r1, r6
 8005c18:	fb06 1415 	mls	r4, r6, r5, r1
 8005c1c:	3430      	adds	r4, #48	; 0x30
 8005c1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005c22:	460c      	mov	r4, r1
 8005c24:	2c63      	cmp	r4, #99	; 0x63
 8005c26:	f102 32ff 	add.w	r2, r2, #4294967295
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	dcf1      	bgt.n	8005c12 <__exponent+0x22>
 8005c2e:	3130      	adds	r1, #48	; 0x30
 8005c30:	f1ac 0402 	sub.w	r4, ip, #2
 8005c34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005c38:	1c41      	adds	r1, r0, #1
 8005c3a:	4622      	mov	r2, r4
 8005c3c:	42ba      	cmp	r2, r7
 8005c3e:	d30a      	bcc.n	8005c56 <__exponent+0x66>
 8005c40:	f10d 0209 	add.w	r2, sp, #9
 8005c44:	eba2 020c 	sub.w	r2, r2, ip
 8005c48:	42bc      	cmp	r4, r7
 8005c4a:	bf88      	it	hi
 8005c4c:	2200      	movhi	r2, #0
 8005c4e:	4413      	add	r3, r2
 8005c50:	1a18      	subs	r0, r3, r0
 8005c52:	b003      	add	sp, #12
 8005c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c56:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005c5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005c5e:	e7ed      	b.n	8005c3c <__exponent+0x4c>
 8005c60:	2330      	movs	r3, #48	; 0x30
 8005c62:	3130      	adds	r1, #48	; 0x30
 8005c64:	7083      	strb	r3, [r0, #2]
 8005c66:	70c1      	strb	r1, [r0, #3]
 8005c68:	1d03      	adds	r3, r0, #4
 8005c6a:	e7f1      	b.n	8005c50 <__exponent+0x60>

08005c6c <_printf_float>:
 8005c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c70:	ed2d 8b02 	vpush	{d8}
 8005c74:	b08d      	sub	sp, #52	; 0x34
 8005c76:	460c      	mov	r4, r1
 8005c78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	461f      	mov	r7, r3
 8005c80:	4605      	mov	r5, r0
 8005c82:	f000 fcd5 	bl	8006630 <_localeconv_r>
 8005c86:	f8d0 a000 	ldr.w	sl, [r0]
 8005c8a:	4650      	mov	r0, sl
 8005c8c:	f7fa faf0 	bl	8000270 <strlen>
 8005c90:	2300      	movs	r3, #0
 8005c92:	930a      	str	r3, [sp, #40]	; 0x28
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	9305      	str	r3, [sp, #20]
 8005c98:	f8d8 3000 	ldr.w	r3, [r8]
 8005c9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ca0:	3307      	adds	r3, #7
 8005ca2:	f023 0307 	bic.w	r3, r3, #7
 8005ca6:	f103 0208 	add.w	r2, r3, #8
 8005caa:	f8c8 2000 	str.w	r2, [r8]
 8005cae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cb6:	9307      	str	r3, [sp, #28]
 8005cb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cbc:	ee08 0a10 	vmov	s16, r0
 8005cc0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005cc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cc8:	4b9e      	ldr	r3, [pc, #632]	; (8005f44 <_printf_float+0x2d8>)
 8005cca:	f04f 32ff 	mov.w	r2, #4294967295
 8005cce:	f7fa ff2d 	bl	8000b2c <__aeabi_dcmpun>
 8005cd2:	bb88      	cbnz	r0, 8005d38 <_printf_float+0xcc>
 8005cd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cd8:	4b9a      	ldr	r3, [pc, #616]	; (8005f44 <_printf_float+0x2d8>)
 8005cda:	f04f 32ff 	mov.w	r2, #4294967295
 8005cde:	f7fa ff07 	bl	8000af0 <__aeabi_dcmple>
 8005ce2:	bb48      	cbnz	r0, 8005d38 <_printf_float+0xcc>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	4640      	mov	r0, r8
 8005cea:	4649      	mov	r1, r9
 8005cec:	f7fa fef6 	bl	8000adc <__aeabi_dcmplt>
 8005cf0:	b110      	cbz	r0, 8005cf8 <_printf_float+0x8c>
 8005cf2:	232d      	movs	r3, #45	; 0x2d
 8005cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf8:	4a93      	ldr	r2, [pc, #588]	; (8005f48 <_printf_float+0x2dc>)
 8005cfa:	4b94      	ldr	r3, [pc, #592]	; (8005f4c <_printf_float+0x2e0>)
 8005cfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d00:	bf94      	ite	ls
 8005d02:	4690      	movls	r8, r2
 8005d04:	4698      	movhi	r8, r3
 8005d06:	2303      	movs	r3, #3
 8005d08:	6123      	str	r3, [r4, #16]
 8005d0a:	9b05      	ldr	r3, [sp, #20]
 8005d0c:	f023 0304 	bic.w	r3, r3, #4
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	9700      	str	r7, [sp, #0]
 8005d18:	4633      	mov	r3, r6
 8005d1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f9da 	bl	80060d8 <_printf_common>
 8005d24:	3001      	adds	r0, #1
 8005d26:	f040 8090 	bne.w	8005e4a <_printf_float+0x1de>
 8005d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2e:	b00d      	add	sp, #52	; 0x34
 8005d30:	ecbd 8b02 	vpop	{d8}
 8005d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	4649      	mov	r1, r9
 8005d40:	f7fa fef4 	bl	8000b2c <__aeabi_dcmpun>
 8005d44:	b140      	cbz	r0, 8005d58 <_printf_float+0xec>
 8005d46:	464b      	mov	r3, r9
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bfbc      	itt	lt
 8005d4c:	232d      	movlt	r3, #45	; 0x2d
 8005d4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d52:	4a7f      	ldr	r2, [pc, #508]	; (8005f50 <_printf_float+0x2e4>)
 8005d54:	4b7f      	ldr	r3, [pc, #508]	; (8005f54 <_printf_float+0x2e8>)
 8005d56:	e7d1      	b.n	8005cfc <_printf_float+0x90>
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d5e:	9206      	str	r2, [sp, #24]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	d13f      	bne.n	8005de4 <_printf_float+0x178>
 8005d64:	2306      	movs	r3, #6
 8005d66:	6063      	str	r3, [r4, #4]
 8005d68:	9b05      	ldr	r3, [sp, #20]
 8005d6a:	6861      	ldr	r1, [r4, #4]
 8005d6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d70:	2300      	movs	r3, #0
 8005d72:	9303      	str	r3, [sp, #12]
 8005d74:	ab0a      	add	r3, sp, #40	; 0x28
 8005d76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d7a:	ab09      	add	r3, sp, #36	; 0x24
 8005d7c:	ec49 8b10 	vmov	d0, r8, r9
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	6022      	str	r2, [r4, #0]
 8005d84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f7ff fecf 	bl	8005b2c <__cvt>
 8005d8e:	9b06      	ldr	r3, [sp, #24]
 8005d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d92:	2b47      	cmp	r3, #71	; 0x47
 8005d94:	4680      	mov	r8, r0
 8005d96:	d108      	bne.n	8005daa <_printf_float+0x13e>
 8005d98:	1cc8      	adds	r0, r1, #3
 8005d9a:	db02      	blt.n	8005da2 <_printf_float+0x136>
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	4299      	cmp	r1, r3
 8005da0:	dd41      	ble.n	8005e26 <_printf_float+0x1ba>
 8005da2:	f1ab 0302 	sub.w	r3, fp, #2
 8005da6:	fa5f fb83 	uxtb.w	fp, r3
 8005daa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dae:	d820      	bhi.n	8005df2 <_printf_float+0x186>
 8005db0:	3901      	subs	r1, #1
 8005db2:	465a      	mov	r2, fp
 8005db4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005db8:	9109      	str	r1, [sp, #36]	; 0x24
 8005dba:	f7ff ff19 	bl	8005bf0 <__exponent>
 8005dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dc0:	1813      	adds	r3, r2, r0
 8005dc2:	2a01      	cmp	r2, #1
 8005dc4:	4681      	mov	r9, r0
 8005dc6:	6123      	str	r3, [r4, #16]
 8005dc8:	dc02      	bgt.n	8005dd0 <_printf_float+0x164>
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	07d2      	lsls	r2, r2, #31
 8005dce:	d501      	bpl.n	8005dd4 <_printf_float+0x168>
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d09c      	beq.n	8005d16 <_printf_float+0xaa>
 8005ddc:	232d      	movs	r3, #45	; 0x2d
 8005dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de2:	e798      	b.n	8005d16 <_printf_float+0xaa>
 8005de4:	9a06      	ldr	r2, [sp, #24]
 8005de6:	2a47      	cmp	r2, #71	; 0x47
 8005de8:	d1be      	bne.n	8005d68 <_printf_float+0xfc>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1bc      	bne.n	8005d68 <_printf_float+0xfc>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e7b9      	b.n	8005d66 <_printf_float+0xfa>
 8005df2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005df6:	d118      	bne.n	8005e2a <_printf_float+0x1be>
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	6863      	ldr	r3, [r4, #4]
 8005dfc:	dd0b      	ble.n	8005e16 <_printf_float+0x1aa>
 8005dfe:	6121      	str	r1, [r4, #16]
 8005e00:	b913      	cbnz	r3, 8005e08 <_printf_float+0x19c>
 8005e02:	6822      	ldr	r2, [r4, #0]
 8005e04:	07d0      	lsls	r0, r2, #31
 8005e06:	d502      	bpl.n	8005e0e <_printf_float+0x1a2>
 8005e08:	3301      	adds	r3, #1
 8005e0a:	440b      	add	r3, r1
 8005e0c:	6123      	str	r3, [r4, #16]
 8005e0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e10:	f04f 0900 	mov.w	r9, #0
 8005e14:	e7de      	b.n	8005dd4 <_printf_float+0x168>
 8005e16:	b913      	cbnz	r3, 8005e1e <_printf_float+0x1b2>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	07d2      	lsls	r2, r2, #31
 8005e1c:	d501      	bpl.n	8005e22 <_printf_float+0x1b6>
 8005e1e:	3302      	adds	r3, #2
 8005e20:	e7f4      	b.n	8005e0c <_printf_float+0x1a0>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e7f2      	b.n	8005e0c <_printf_float+0x1a0>
 8005e26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2c:	4299      	cmp	r1, r3
 8005e2e:	db05      	blt.n	8005e3c <_printf_float+0x1d0>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	6121      	str	r1, [r4, #16]
 8005e34:	07d8      	lsls	r0, r3, #31
 8005e36:	d5ea      	bpl.n	8005e0e <_printf_float+0x1a2>
 8005e38:	1c4b      	adds	r3, r1, #1
 8005e3a:	e7e7      	b.n	8005e0c <_printf_float+0x1a0>
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	bfd4      	ite	le
 8005e40:	f1c1 0202 	rsble	r2, r1, #2
 8005e44:	2201      	movgt	r2, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	e7e0      	b.n	8005e0c <_printf_float+0x1a0>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	055a      	lsls	r2, r3, #21
 8005e4e:	d407      	bmi.n	8005e60 <_printf_float+0x1f4>
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	4642      	mov	r2, r8
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d12c      	bne.n	8005eb8 <_printf_float+0x24c>
 8005e5e:	e764      	b.n	8005d2a <_printf_float+0xbe>
 8005e60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e64:	f240 80e0 	bls.w	8006028 <_printf_float+0x3bc>
 8005e68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f7fa fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d034      	beq.n	8005ee2 <_printf_float+0x276>
 8005e78:	4a37      	ldr	r2, [pc, #220]	; (8005f58 <_printf_float+0x2ec>)
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	47b8      	blx	r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	f43f af51 	beq.w	8005d2a <_printf_float+0xbe>
 8005e88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	db02      	blt.n	8005e96 <_printf_float+0x22a>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	07d8      	lsls	r0, r3, #31
 8005e94:	d510      	bpl.n	8005eb8 <_printf_float+0x24c>
 8005e96:	ee18 3a10 	vmov	r3, s16
 8005e9a:	4652      	mov	r2, sl
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f af41 	beq.w	8005d2a <_printf_float+0xbe>
 8005ea8:	f04f 0800 	mov.w	r8, #0
 8005eac:	f104 091a 	add.w	r9, r4, #26
 8005eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	4543      	cmp	r3, r8
 8005eb6:	dc09      	bgt.n	8005ecc <_printf_float+0x260>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	079b      	lsls	r3, r3, #30
 8005ebc:	f100 8107 	bmi.w	80060ce <_printf_float+0x462>
 8005ec0:	68e0      	ldr	r0, [r4, #12]
 8005ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec4:	4298      	cmp	r0, r3
 8005ec6:	bfb8      	it	lt
 8005ec8:	4618      	movlt	r0, r3
 8005eca:	e730      	b.n	8005d2e <_printf_float+0xc2>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	464a      	mov	r2, r9
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b8      	blx	r7
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	f43f af27 	beq.w	8005d2a <_printf_float+0xbe>
 8005edc:	f108 0801 	add.w	r8, r8, #1
 8005ee0:	e7e6      	b.n	8005eb0 <_printf_float+0x244>
 8005ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dc39      	bgt.n	8005f5c <_printf_float+0x2f0>
 8005ee8:	4a1b      	ldr	r2, [pc, #108]	; (8005f58 <_printf_float+0x2ec>)
 8005eea:	2301      	movs	r3, #1
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f af19 	beq.w	8005d2a <_printf_float+0xbe>
 8005ef8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005efc:	4313      	orrs	r3, r2
 8005efe:	d102      	bne.n	8005f06 <_printf_float+0x29a>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	07d9      	lsls	r1, r3, #31
 8005f04:	d5d8      	bpl.n	8005eb8 <_printf_float+0x24c>
 8005f06:	ee18 3a10 	vmov	r3, s16
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af09 	beq.w	8005d2a <_printf_float+0xbe>
 8005f18:	f04f 0900 	mov.w	r9, #0
 8005f1c:	f104 0a1a 	add.w	sl, r4, #26
 8005f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f22:	425b      	negs	r3, r3
 8005f24:	454b      	cmp	r3, r9
 8005f26:	dc01      	bgt.n	8005f2c <_printf_float+0x2c0>
 8005f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f2a:	e792      	b.n	8005e52 <_printf_float+0x1e6>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	4652      	mov	r2, sl
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	f43f aef7 	beq.w	8005d2a <_printf_float+0xbe>
 8005f3c:	f109 0901 	add.w	r9, r9, #1
 8005f40:	e7ee      	b.n	8005f20 <_printf_float+0x2b4>
 8005f42:	bf00      	nop
 8005f44:	7fefffff 	.word	0x7fefffff
 8005f48:	080088c8 	.word	0x080088c8
 8005f4c:	080088cc 	.word	0x080088cc
 8005f50:	080088d0 	.word	0x080088d0
 8005f54:	080088d4 	.word	0x080088d4
 8005f58:	080088d8 	.word	0x080088d8
 8005f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f60:	429a      	cmp	r2, r3
 8005f62:	bfa8      	it	ge
 8005f64:	461a      	movge	r2, r3
 8005f66:	2a00      	cmp	r2, #0
 8005f68:	4691      	mov	r9, r2
 8005f6a:	dc37      	bgt.n	8005fdc <_printf_float+0x370>
 8005f6c:	f04f 0b00 	mov.w	fp, #0
 8005f70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f74:	f104 021a 	add.w	r2, r4, #26
 8005f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f7a:	9305      	str	r3, [sp, #20]
 8005f7c:	eba3 0309 	sub.w	r3, r3, r9
 8005f80:	455b      	cmp	r3, fp
 8005f82:	dc33      	bgt.n	8005fec <_printf_float+0x380>
 8005f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	db3b      	blt.n	8006004 <_printf_float+0x398>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	07da      	lsls	r2, r3, #31
 8005f90:	d438      	bmi.n	8006004 <_printf_float+0x398>
 8005f92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005f96:	eba2 0903 	sub.w	r9, r2, r3
 8005f9a:	9b05      	ldr	r3, [sp, #20]
 8005f9c:	1ad2      	subs	r2, r2, r3
 8005f9e:	4591      	cmp	r9, r2
 8005fa0:	bfa8      	it	ge
 8005fa2:	4691      	movge	r9, r2
 8005fa4:	f1b9 0f00 	cmp.w	r9, #0
 8005fa8:	dc35      	bgt.n	8006016 <_printf_float+0x3aa>
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb2:	f104 0a1a 	add.w	sl, r4, #26
 8005fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	eba3 0309 	sub.w	r3, r3, r9
 8005fc0:	4543      	cmp	r3, r8
 8005fc2:	f77f af79 	ble.w	8005eb8 <_printf_float+0x24c>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4652      	mov	r2, sl
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f aeaa 	beq.w	8005d2a <_printf_float+0xbe>
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	e7ec      	b.n	8005fb6 <_printf_float+0x34a>
 8005fdc:	4613      	mov	r3, r2
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b8      	blx	r7
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d1c0      	bne.n	8005f6c <_printf_float+0x300>
 8005fea:	e69e      	b.n	8005d2a <_printf_float+0xbe>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	9205      	str	r2, [sp, #20]
 8005ff4:	47b8      	blx	r7
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f ae97 	beq.w	8005d2a <_printf_float+0xbe>
 8005ffc:	9a05      	ldr	r2, [sp, #20]
 8005ffe:	f10b 0b01 	add.w	fp, fp, #1
 8006002:	e7b9      	b.n	8005f78 <_printf_float+0x30c>
 8006004:	ee18 3a10 	vmov	r3, s16
 8006008:	4652      	mov	r2, sl
 800600a:	4631      	mov	r1, r6
 800600c:	4628      	mov	r0, r5
 800600e:	47b8      	blx	r7
 8006010:	3001      	adds	r0, #1
 8006012:	d1be      	bne.n	8005f92 <_printf_float+0x326>
 8006014:	e689      	b.n	8005d2a <_printf_float+0xbe>
 8006016:	9a05      	ldr	r2, [sp, #20]
 8006018:	464b      	mov	r3, r9
 800601a:	4442      	add	r2, r8
 800601c:	4631      	mov	r1, r6
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	d1c1      	bne.n	8005faa <_printf_float+0x33e>
 8006026:	e680      	b.n	8005d2a <_printf_float+0xbe>
 8006028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800602a:	2a01      	cmp	r2, #1
 800602c:	dc01      	bgt.n	8006032 <_printf_float+0x3c6>
 800602e:	07db      	lsls	r3, r3, #31
 8006030:	d53a      	bpl.n	80060a8 <_printf_float+0x43c>
 8006032:	2301      	movs	r3, #1
 8006034:	4642      	mov	r2, r8
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f ae74 	beq.w	8005d2a <_printf_float+0xbe>
 8006042:	ee18 3a10 	vmov	r3, s16
 8006046:	4652      	mov	r2, sl
 8006048:	4631      	mov	r1, r6
 800604a:	4628      	mov	r0, r5
 800604c:	47b8      	blx	r7
 800604e:	3001      	adds	r0, #1
 8006050:	f43f ae6b 	beq.w	8005d2a <_printf_float+0xbe>
 8006054:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006058:	2200      	movs	r2, #0
 800605a:	2300      	movs	r3, #0
 800605c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006060:	f7fa fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006064:	b9d8      	cbnz	r0, 800609e <_printf_float+0x432>
 8006066:	f10a 33ff 	add.w	r3, sl, #4294967295
 800606a:	f108 0201 	add.w	r2, r8, #1
 800606e:	4631      	mov	r1, r6
 8006070:	4628      	mov	r0, r5
 8006072:	47b8      	blx	r7
 8006074:	3001      	adds	r0, #1
 8006076:	d10e      	bne.n	8006096 <_printf_float+0x42a>
 8006078:	e657      	b.n	8005d2a <_printf_float+0xbe>
 800607a:	2301      	movs	r3, #1
 800607c:	4652      	mov	r2, sl
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f ae50 	beq.w	8005d2a <_printf_float+0xbe>
 800608a:	f108 0801 	add.w	r8, r8, #1
 800608e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006090:	3b01      	subs	r3, #1
 8006092:	4543      	cmp	r3, r8
 8006094:	dcf1      	bgt.n	800607a <_printf_float+0x40e>
 8006096:	464b      	mov	r3, r9
 8006098:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800609c:	e6da      	b.n	8005e54 <_printf_float+0x1e8>
 800609e:	f04f 0800 	mov.w	r8, #0
 80060a2:	f104 0a1a 	add.w	sl, r4, #26
 80060a6:	e7f2      	b.n	800608e <_printf_float+0x422>
 80060a8:	2301      	movs	r3, #1
 80060aa:	4642      	mov	r2, r8
 80060ac:	e7df      	b.n	800606e <_printf_float+0x402>
 80060ae:	2301      	movs	r3, #1
 80060b0:	464a      	mov	r2, r9
 80060b2:	4631      	mov	r1, r6
 80060b4:	4628      	mov	r0, r5
 80060b6:	47b8      	blx	r7
 80060b8:	3001      	adds	r0, #1
 80060ba:	f43f ae36 	beq.w	8005d2a <_printf_float+0xbe>
 80060be:	f108 0801 	add.w	r8, r8, #1
 80060c2:	68e3      	ldr	r3, [r4, #12]
 80060c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060c6:	1a5b      	subs	r3, r3, r1
 80060c8:	4543      	cmp	r3, r8
 80060ca:	dcf0      	bgt.n	80060ae <_printf_float+0x442>
 80060cc:	e6f8      	b.n	8005ec0 <_printf_float+0x254>
 80060ce:	f04f 0800 	mov.w	r8, #0
 80060d2:	f104 0919 	add.w	r9, r4, #25
 80060d6:	e7f4      	b.n	80060c2 <_printf_float+0x456>

080060d8 <_printf_common>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	4616      	mov	r6, r2
 80060de:	4699      	mov	r9, r3
 80060e0:	688a      	ldr	r2, [r1, #8]
 80060e2:	690b      	ldr	r3, [r1, #16]
 80060e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bfb8      	it	lt
 80060ec:	4613      	movlt	r3, r2
 80060ee:	6033      	str	r3, [r6, #0]
 80060f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060f4:	4607      	mov	r7, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	b10a      	cbz	r2, 80060fe <_printf_common+0x26>
 80060fa:	3301      	adds	r3, #1
 80060fc:	6033      	str	r3, [r6, #0]
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	0699      	lsls	r1, r3, #26
 8006102:	bf42      	ittt	mi
 8006104:	6833      	ldrmi	r3, [r6, #0]
 8006106:	3302      	addmi	r3, #2
 8006108:	6033      	strmi	r3, [r6, #0]
 800610a:	6825      	ldr	r5, [r4, #0]
 800610c:	f015 0506 	ands.w	r5, r5, #6
 8006110:	d106      	bne.n	8006120 <_printf_common+0x48>
 8006112:	f104 0a19 	add.w	sl, r4, #25
 8006116:	68e3      	ldr	r3, [r4, #12]
 8006118:	6832      	ldr	r2, [r6, #0]
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	42ab      	cmp	r3, r5
 800611e:	dc26      	bgt.n	800616e <_printf_common+0x96>
 8006120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006124:	1e13      	subs	r3, r2, #0
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	bf18      	it	ne
 800612a:	2301      	movne	r3, #1
 800612c:	0692      	lsls	r2, r2, #26
 800612e:	d42b      	bmi.n	8006188 <_printf_common+0xb0>
 8006130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006134:	4649      	mov	r1, r9
 8006136:	4638      	mov	r0, r7
 8006138:	47c0      	blx	r8
 800613a:	3001      	adds	r0, #1
 800613c:	d01e      	beq.n	800617c <_printf_common+0xa4>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	6922      	ldr	r2, [r4, #16]
 8006142:	f003 0306 	and.w	r3, r3, #6
 8006146:	2b04      	cmp	r3, #4
 8006148:	bf02      	ittt	eq
 800614a:	68e5      	ldreq	r5, [r4, #12]
 800614c:	6833      	ldreq	r3, [r6, #0]
 800614e:	1aed      	subeq	r5, r5, r3
 8006150:	68a3      	ldr	r3, [r4, #8]
 8006152:	bf0c      	ite	eq
 8006154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006158:	2500      	movne	r5, #0
 800615a:	4293      	cmp	r3, r2
 800615c:	bfc4      	itt	gt
 800615e:	1a9b      	subgt	r3, r3, r2
 8006160:	18ed      	addgt	r5, r5, r3
 8006162:	2600      	movs	r6, #0
 8006164:	341a      	adds	r4, #26
 8006166:	42b5      	cmp	r5, r6
 8006168:	d11a      	bne.n	80061a0 <_printf_common+0xc8>
 800616a:	2000      	movs	r0, #0
 800616c:	e008      	b.n	8006180 <_printf_common+0xa8>
 800616e:	2301      	movs	r3, #1
 8006170:	4652      	mov	r2, sl
 8006172:	4649      	mov	r1, r9
 8006174:	4638      	mov	r0, r7
 8006176:	47c0      	blx	r8
 8006178:	3001      	adds	r0, #1
 800617a:	d103      	bne.n	8006184 <_printf_common+0xac>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006184:	3501      	adds	r5, #1
 8006186:	e7c6      	b.n	8006116 <_printf_common+0x3e>
 8006188:	18e1      	adds	r1, r4, r3
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	2030      	movs	r0, #48	; 0x30
 800618e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006192:	4422      	add	r2, r4
 8006194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800619c:	3302      	adds	r3, #2
 800619e:	e7c7      	b.n	8006130 <_printf_common+0x58>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4622      	mov	r2, r4
 80061a4:	4649      	mov	r1, r9
 80061a6:	4638      	mov	r0, r7
 80061a8:	47c0      	blx	r8
 80061aa:	3001      	adds	r0, #1
 80061ac:	d0e6      	beq.n	800617c <_printf_common+0xa4>
 80061ae:	3601      	adds	r6, #1
 80061b0:	e7d9      	b.n	8006166 <_printf_common+0x8e>
	...

080061b4 <_printf_i>:
 80061b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b8:	7e0f      	ldrb	r7, [r1, #24]
 80061ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061bc:	2f78      	cmp	r7, #120	; 0x78
 80061be:	4691      	mov	r9, r2
 80061c0:	4680      	mov	r8, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	469a      	mov	sl, r3
 80061c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061ca:	d807      	bhi.n	80061dc <_printf_i+0x28>
 80061cc:	2f62      	cmp	r7, #98	; 0x62
 80061ce:	d80a      	bhi.n	80061e6 <_printf_i+0x32>
 80061d0:	2f00      	cmp	r7, #0
 80061d2:	f000 80d4 	beq.w	800637e <_printf_i+0x1ca>
 80061d6:	2f58      	cmp	r7, #88	; 0x58
 80061d8:	f000 80c0 	beq.w	800635c <_printf_i+0x1a8>
 80061dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061e4:	e03a      	b.n	800625c <_printf_i+0xa8>
 80061e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ea:	2b15      	cmp	r3, #21
 80061ec:	d8f6      	bhi.n	80061dc <_printf_i+0x28>
 80061ee:	a101      	add	r1, pc, #4	; (adr r1, 80061f4 <_printf_i+0x40>)
 80061f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061f4:	0800624d 	.word	0x0800624d
 80061f8:	08006261 	.word	0x08006261
 80061fc:	080061dd 	.word	0x080061dd
 8006200:	080061dd 	.word	0x080061dd
 8006204:	080061dd 	.word	0x080061dd
 8006208:	080061dd 	.word	0x080061dd
 800620c:	08006261 	.word	0x08006261
 8006210:	080061dd 	.word	0x080061dd
 8006214:	080061dd 	.word	0x080061dd
 8006218:	080061dd 	.word	0x080061dd
 800621c:	080061dd 	.word	0x080061dd
 8006220:	08006365 	.word	0x08006365
 8006224:	0800628d 	.word	0x0800628d
 8006228:	0800631f 	.word	0x0800631f
 800622c:	080061dd 	.word	0x080061dd
 8006230:	080061dd 	.word	0x080061dd
 8006234:	08006387 	.word	0x08006387
 8006238:	080061dd 	.word	0x080061dd
 800623c:	0800628d 	.word	0x0800628d
 8006240:	080061dd 	.word	0x080061dd
 8006244:	080061dd 	.word	0x080061dd
 8006248:	08006327 	.word	0x08006327
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	1d1a      	adds	r2, r3, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	602a      	str	r2, [r5, #0]
 8006254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800625c:	2301      	movs	r3, #1
 800625e:	e09f      	b.n	80063a0 <_printf_i+0x1ec>
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	682b      	ldr	r3, [r5, #0]
 8006264:	0607      	lsls	r7, r0, #24
 8006266:	f103 0104 	add.w	r1, r3, #4
 800626a:	6029      	str	r1, [r5, #0]
 800626c:	d501      	bpl.n	8006272 <_printf_i+0xbe>
 800626e:	681e      	ldr	r6, [r3, #0]
 8006270:	e003      	b.n	800627a <_printf_i+0xc6>
 8006272:	0646      	lsls	r6, r0, #25
 8006274:	d5fb      	bpl.n	800626e <_printf_i+0xba>
 8006276:	f9b3 6000 	ldrsh.w	r6, [r3]
 800627a:	2e00      	cmp	r6, #0
 800627c:	da03      	bge.n	8006286 <_printf_i+0xd2>
 800627e:	232d      	movs	r3, #45	; 0x2d
 8006280:	4276      	negs	r6, r6
 8006282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006286:	485a      	ldr	r0, [pc, #360]	; (80063f0 <_printf_i+0x23c>)
 8006288:	230a      	movs	r3, #10
 800628a:	e012      	b.n	80062b2 <_printf_i+0xfe>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	6820      	ldr	r0, [r4, #0]
 8006290:	1d19      	adds	r1, r3, #4
 8006292:	6029      	str	r1, [r5, #0]
 8006294:	0605      	lsls	r5, r0, #24
 8006296:	d501      	bpl.n	800629c <_printf_i+0xe8>
 8006298:	681e      	ldr	r6, [r3, #0]
 800629a:	e002      	b.n	80062a2 <_printf_i+0xee>
 800629c:	0641      	lsls	r1, r0, #25
 800629e:	d5fb      	bpl.n	8006298 <_printf_i+0xe4>
 80062a0:	881e      	ldrh	r6, [r3, #0]
 80062a2:	4853      	ldr	r0, [pc, #332]	; (80063f0 <_printf_i+0x23c>)
 80062a4:	2f6f      	cmp	r7, #111	; 0x6f
 80062a6:	bf0c      	ite	eq
 80062a8:	2308      	moveq	r3, #8
 80062aa:	230a      	movne	r3, #10
 80062ac:	2100      	movs	r1, #0
 80062ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062b2:	6865      	ldr	r5, [r4, #4]
 80062b4:	60a5      	str	r5, [r4, #8]
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	bfa2      	ittt	ge
 80062ba:	6821      	ldrge	r1, [r4, #0]
 80062bc:	f021 0104 	bicge.w	r1, r1, #4
 80062c0:	6021      	strge	r1, [r4, #0]
 80062c2:	b90e      	cbnz	r6, 80062c8 <_printf_i+0x114>
 80062c4:	2d00      	cmp	r5, #0
 80062c6:	d04b      	beq.n	8006360 <_printf_i+0x1ac>
 80062c8:	4615      	mov	r5, r2
 80062ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80062ce:	fb03 6711 	mls	r7, r3, r1, r6
 80062d2:	5dc7      	ldrb	r7, [r0, r7]
 80062d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062d8:	4637      	mov	r7, r6
 80062da:	42bb      	cmp	r3, r7
 80062dc:	460e      	mov	r6, r1
 80062de:	d9f4      	bls.n	80062ca <_printf_i+0x116>
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d10b      	bne.n	80062fc <_printf_i+0x148>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	07de      	lsls	r6, r3, #31
 80062e8:	d508      	bpl.n	80062fc <_printf_i+0x148>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	6861      	ldr	r1, [r4, #4]
 80062ee:	4299      	cmp	r1, r3
 80062f0:	bfde      	ittt	le
 80062f2:	2330      	movle	r3, #48	; 0x30
 80062f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062fc:	1b52      	subs	r2, r2, r5
 80062fe:	6122      	str	r2, [r4, #16]
 8006300:	f8cd a000 	str.w	sl, [sp]
 8006304:	464b      	mov	r3, r9
 8006306:	aa03      	add	r2, sp, #12
 8006308:	4621      	mov	r1, r4
 800630a:	4640      	mov	r0, r8
 800630c:	f7ff fee4 	bl	80060d8 <_printf_common>
 8006310:	3001      	adds	r0, #1
 8006312:	d14a      	bne.n	80063aa <_printf_i+0x1f6>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	b004      	add	sp, #16
 800631a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	f043 0320 	orr.w	r3, r3, #32
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	4833      	ldr	r0, [pc, #204]	; (80063f4 <_printf_i+0x240>)
 8006328:	2778      	movs	r7, #120	; 0x78
 800632a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	6829      	ldr	r1, [r5, #0]
 8006332:	061f      	lsls	r7, r3, #24
 8006334:	f851 6b04 	ldr.w	r6, [r1], #4
 8006338:	d402      	bmi.n	8006340 <_printf_i+0x18c>
 800633a:	065f      	lsls	r7, r3, #25
 800633c:	bf48      	it	mi
 800633e:	b2b6      	uxthmi	r6, r6
 8006340:	07df      	lsls	r7, r3, #31
 8006342:	bf48      	it	mi
 8006344:	f043 0320 	orrmi.w	r3, r3, #32
 8006348:	6029      	str	r1, [r5, #0]
 800634a:	bf48      	it	mi
 800634c:	6023      	strmi	r3, [r4, #0]
 800634e:	b91e      	cbnz	r6, 8006358 <_printf_i+0x1a4>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	f023 0320 	bic.w	r3, r3, #32
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	2310      	movs	r3, #16
 800635a:	e7a7      	b.n	80062ac <_printf_i+0xf8>
 800635c:	4824      	ldr	r0, [pc, #144]	; (80063f0 <_printf_i+0x23c>)
 800635e:	e7e4      	b.n	800632a <_printf_i+0x176>
 8006360:	4615      	mov	r5, r2
 8006362:	e7bd      	b.n	80062e0 <_printf_i+0x12c>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	6826      	ldr	r6, [r4, #0]
 8006368:	6961      	ldr	r1, [r4, #20]
 800636a:	1d18      	adds	r0, r3, #4
 800636c:	6028      	str	r0, [r5, #0]
 800636e:	0635      	lsls	r5, r6, #24
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	d501      	bpl.n	8006378 <_printf_i+0x1c4>
 8006374:	6019      	str	r1, [r3, #0]
 8006376:	e002      	b.n	800637e <_printf_i+0x1ca>
 8006378:	0670      	lsls	r0, r6, #25
 800637a:	d5fb      	bpl.n	8006374 <_printf_i+0x1c0>
 800637c:	8019      	strh	r1, [r3, #0]
 800637e:	2300      	movs	r3, #0
 8006380:	6123      	str	r3, [r4, #16]
 8006382:	4615      	mov	r5, r2
 8006384:	e7bc      	b.n	8006300 <_printf_i+0x14c>
 8006386:	682b      	ldr	r3, [r5, #0]
 8006388:	1d1a      	adds	r2, r3, #4
 800638a:	602a      	str	r2, [r5, #0]
 800638c:	681d      	ldr	r5, [r3, #0]
 800638e:	6862      	ldr	r2, [r4, #4]
 8006390:	2100      	movs	r1, #0
 8006392:	4628      	mov	r0, r5
 8006394:	f7f9 ff1c 	bl	80001d0 <memchr>
 8006398:	b108      	cbz	r0, 800639e <_printf_i+0x1ea>
 800639a:	1b40      	subs	r0, r0, r5
 800639c:	6060      	str	r0, [r4, #4]
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	6123      	str	r3, [r4, #16]
 80063a2:	2300      	movs	r3, #0
 80063a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a8:	e7aa      	b.n	8006300 <_printf_i+0x14c>
 80063aa:	6923      	ldr	r3, [r4, #16]
 80063ac:	462a      	mov	r2, r5
 80063ae:	4649      	mov	r1, r9
 80063b0:	4640      	mov	r0, r8
 80063b2:	47d0      	blx	sl
 80063b4:	3001      	adds	r0, #1
 80063b6:	d0ad      	beq.n	8006314 <_printf_i+0x160>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	079b      	lsls	r3, r3, #30
 80063bc:	d413      	bmi.n	80063e6 <_printf_i+0x232>
 80063be:	68e0      	ldr	r0, [r4, #12]
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	4298      	cmp	r0, r3
 80063c4:	bfb8      	it	lt
 80063c6:	4618      	movlt	r0, r3
 80063c8:	e7a6      	b.n	8006318 <_printf_i+0x164>
 80063ca:	2301      	movs	r3, #1
 80063cc:	4632      	mov	r2, r6
 80063ce:	4649      	mov	r1, r9
 80063d0:	4640      	mov	r0, r8
 80063d2:	47d0      	blx	sl
 80063d4:	3001      	adds	r0, #1
 80063d6:	d09d      	beq.n	8006314 <_printf_i+0x160>
 80063d8:	3501      	adds	r5, #1
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	9903      	ldr	r1, [sp, #12]
 80063de:	1a5b      	subs	r3, r3, r1
 80063e0:	42ab      	cmp	r3, r5
 80063e2:	dcf2      	bgt.n	80063ca <_printf_i+0x216>
 80063e4:	e7eb      	b.n	80063be <_printf_i+0x20a>
 80063e6:	2500      	movs	r5, #0
 80063e8:	f104 0619 	add.w	r6, r4, #25
 80063ec:	e7f5      	b.n	80063da <_printf_i+0x226>
 80063ee:	bf00      	nop
 80063f0:	080088da 	.word	0x080088da
 80063f4:	080088eb 	.word	0x080088eb

080063f8 <std>:
 80063f8:	2300      	movs	r3, #0
 80063fa:	b510      	push	{r4, lr}
 80063fc:	4604      	mov	r4, r0
 80063fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006406:	6083      	str	r3, [r0, #8]
 8006408:	8181      	strh	r1, [r0, #12]
 800640a:	6643      	str	r3, [r0, #100]	; 0x64
 800640c:	81c2      	strh	r2, [r0, #14]
 800640e:	6183      	str	r3, [r0, #24]
 8006410:	4619      	mov	r1, r3
 8006412:	2208      	movs	r2, #8
 8006414:	305c      	adds	r0, #92	; 0x5c
 8006416:	f000 f902 	bl	800661e <memset>
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <std+0x38>)
 800641c:	6263      	str	r3, [r4, #36]	; 0x24
 800641e:	4b05      	ldr	r3, [pc, #20]	; (8006434 <std+0x3c>)
 8006420:	62a3      	str	r3, [r4, #40]	; 0x28
 8006422:	4b05      	ldr	r3, [pc, #20]	; (8006438 <std+0x40>)
 8006424:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <std+0x44>)
 8006428:	6224      	str	r4, [r4, #32]
 800642a:	6323      	str	r3, [r4, #48]	; 0x30
 800642c:	bd10      	pop	{r4, pc}
 800642e:	bf00      	nop
 8006430:	08006599 	.word	0x08006599
 8006434:	080065bb 	.word	0x080065bb
 8006438:	080065f3 	.word	0x080065f3
 800643c:	08006617 	.word	0x08006617

08006440 <stdio_exit_handler>:
 8006440:	4a02      	ldr	r2, [pc, #8]	; (800644c <stdio_exit_handler+0xc>)
 8006442:	4903      	ldr	r1, [pc, #12]	; (8006450 <stdio_exit_handler+0x10>)
 8006444:	4803      	ldr	r0, [pc, #12]	; (8006454 <stdio_exit_handler+0x14>)
 8006446:	f000 b869 	b.w	800651c <_fwalk_sglue>
 800644a:	bf00      	nop
 800644c:	20000010 	.word	0x20000010
 8006450:	080080e1 	.word	0x080080e1
 8006454:	2000001c 	.word	0x2000001c

08006458 <cleanup_stdio>:
 8006458:	6841      	ldr	r1, [r0, #4]
 800645a:	4b0c      	ldr	r3, [pc, #48]	; (800648c <cleanup_stdio+0x34>)
 800645c:	4299      	cmp	r1, r3
 800645e:	b510      	push	{r4, lr}
 8006460:	4604      	mov	r4, r0
 8006462:	d001      	beq.n	8006468 <cleanup_stdio+0x10>
 8006464:	f001 fe3c 	bl	80080e0 <_fflush_r>
 8006468:	68a1      	ldr	r1, [r4, #8]
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <cleanup_stdio+0x38>)
 800646c:	4299      	cmp	r1, r3
 800646e:	d002      	beq.n	8006476 <cleanup_stdio+0x1e>
 8006470:	4620      	mov	r0, r4
 8006472:	f001 fe35 	bl	80080e0 <_fflush_r>
 8006476:	68e1      	ldr	r1, [r4, #12]
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <cleanup_stdio+0x3c>)
 800647a:	4299      	cmp	r1, r3
 800647c:	d004      	beq.n	8006488 <cleanup_stdio+0x30>
 800647e:	4620      	mov	r0, r4
 8006480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006484:	f001 be2c 	b.w	80080e0 <_fflush_r>
 8006488:	bd10      	pop	{r4, pc}
 800648a:	bf00      	nop
 800648c:	20004350 	.word	0x20004350
 8006490:	200043b8 	.word	0x200043b8
 8006494:	20004420 	.word	0x20004420

08006498 <global_stdio_init.part.0>:
 8006498:	b510      	push	{r4, lr}
 800649a:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <global_stdio_init.part.0+0x30>)
 800649c:	4c0b      	ldr	r4, [pc, #44]	; (80064cc <global_stdio_init.part.0+0x34>)
 800649e:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <global_stdio_init.part.0+0x38>)
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	4620      	mov	r0, r4
 80064a4:	2200      	movs	r2, #0
 80064a6:	2104      	movs	r1, #4
 80064a8:	f7ff ffa6 	bl	80063f8 <std>
 80064ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80064b0:	2201      	movs	r2, #1
 80064b2:	2109      	movs	r1, #9
 80064b4:	f7ff ffa0 	bl	80063f8 <std>
 80064b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80064bc:	2202      	movs	r2, #2
 80064be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c2:	2112      	movs	r1, #18
 80064c4:	f7ff bf98 	b.w	80063f8 <std>
 80064c8:	20004488 	.word	0x20004488
 80064cc:	20004350 	.word	0x20004350
 80064d0:	08006441 	.word	0x08006441

080064d4 <__sfp_lock_acquire>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__sfp_lock_acquire+0x8>)
 80064d6:	f000 b91f 	b.w	8006718 <__retarget_lock_acquire_recursive>
 80064da:	bf00      	nop
 80064dc:	20004491 	.word	0x20004491

080064e0 <__sfp_lock_release>:
 80064e0:	4801      	ldr	r0, [pc, #4]	; (80064e8 <__sfp_lock_release+0x8>)
 80064e2:	f000 b91a 	b.w	800671a <__retarget_lock_release_recursive>
 80064e6:	bf00      	nop
 80064e8:	20004491 	.word	0x20004491

080064ec <__sinit>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	4604      	mov	r4, r0
 80064f0:	f7ff fff0 	bl	80064d4 <__sfp_lock_acquire>
 80064f4:	6a23      	ldr	r3, [r4, #32]
 80064f6:	b11b      	cbz	r3, 8006500 <__sinit+0x14>
 80064f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fc:	f7ff bff0 	b.w	80064e0 <__sfp_lock_release>
 8006500:	4b04      	ldr	r3, [pc, #16]	; (8006514 <__sinit+0x28>)
 8006502:	6223      	str	r3, [r4, #32]
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <__sinit+0x2c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f5      	bne.n	80064f8 <__sinit+0xc>
 800650c:	f7ff ffc4 	bl	8006498 <global_stdio_init.part.0>
 8006510:	e7f2      	b.n	80064f8 <__sinit+0xc>
 8006512:	bf00      	nop
 8006514:	08006459 	.word	0x08006459
 8006518:	20004488 	.word	0x20004488

0800651c <_fwalk_sglue>:
 800651c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006520:	4607      	mov	r7, r0
 8006522:	4688      	mov	r8, r1
 8006524:	4614      	mov	r4, r2
 8006526:	2600      	movs	r6, #0
 8006528:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800652c:	f1b9 0901 	subs.w	r9, r9, #1
 8006530:	d505      	bpl.n	800653e <_fwalk_sglue+0x22>
 8006532:	6824      	ldr	r4, [r4, #0]
 8006534:	2c00      	cmp	r4, #0
 8006536:	d1f7      	bne.n	8006528 <_fwalk_sglue+0xc>
 8006538:	4630      	mov	r0, r6
 800653a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800653e:	89ab      	ldrh	r3, [r5, #12]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d907      	bls.n	8006554 <_fwalk_sglue+0x38>
 8006544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006548:	3301      	adds	r3, #1
 800654a:	d003      	beq.n	8006554 <_fwalk_sglue+0x38>
 800654c:	4629      	mov	r1, r5
 800654e:	4638      	mov	r0, r7
 8006550:	47c0      	blx	r8
 8006552:	4306      	orrs	r6, r0
 8006554:	3568      	adds	r5, #104	; 0x68
 8006556:	e7e9      	b.n	800652c <_fwalk_sglue+0x10>

08006558 <siprintf>:
 8006558:	b40e      	push	{r1, r2, r3}
 800655a:	b500      	push	{lr}
 800655c:	b09c      	sub	sp, #112	; 0x70
 800655e:	ab1d      	add	r3, sp, #116	; 0x74
 8006560:	9002      	str	r0, [sp, #8]
 8006562:	9006      	str	r0, [sp, #24]
 8006564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006568:	4809      	ldr	r0, [pc, #36]	; (8006590 <siprintf+0x38>)
 800656a:	9107      	str	r1, [sp, #28]
 800656c:	9104      	str	r1, [sp, #16]
 800656e:	4909      	ldr	r1, [pc, #36]	; (8006594 <siprintf+0x3c>)
 8006570:	f853 2b04 	ldr.w	r2, [r3], #4
 8006574:	9105      	str	r1, [sp, #20]
 8006576:	6800      	ldr	r0, [r0, #0]
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	a902      	add	r1, sp, #8
 800657c:	f001 fc2c 	bl	8007dd8 <_svfiprintf_r>
 8006580:	9b02      	ldr	r3, [sp, #8]
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	b01c      	add	sp, #112	; 0x70
 8006588:	f85d eb04 	ldr.w	lr, [sp], #4
 800658c:	b003      	add	sp, #12
 800658e:	4770      	bx	lr
 8006590:	20000068 	.word	0x20000068
 8006594:	ffff0208 	.word	0xffff0208

08006598 <__sread>:
 8006598:	b510      	push	{r4, lr}
 800659a:	460c      	mov	r4, r1
 800659c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a0:	f000 f86c 	bl	800667c <_read_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	bfab      	itete	ge
 80065a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065aa:	89a3      	ldrhlt	r3, [r4, #12]
 80065ac:	181b      	addge	r3, r3, r0
 80065ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065b2:	bfac      	ite	ge
 80065b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065b6:	81a3      	strhlt	r3, [r4, #12]
 80065b8:	bd10      	pop	{r4, pc}

080065ba <__swrite>:
 80065ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065be:	461f      	mov	r7, r3
 80065c0:	898b      	ldrh	r3, [r1, #12]
 80065c2:	05db      	lsls	r3, r3, #23
 80065c4:	4605      	mov	r5, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	4616      	mov	r6, r2
 80065ca:	d505      	bpl.n	80065d8 <__swrite+0x1e>
 80065cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d0:	2302      	movs	r3, #2
 80065d2:	2200      	movs	r2, #0
 80065d4:	f000 f840 	bl	8006658 <_lseek_r>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	4628      	mov	r0, r5
 80065ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ee:	f000 b857 	b.w	80066a0 <_write_r>

080065f2 <__sseek>:
 80065f2:	b510      	push	{r4, lr}
 80065f4:	460c      	mov	r4, r1
 80065f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fa:	f000 f82d 	bl	8006658 <_lseek_r>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	bf15      	itete	ne
 8006604:	6560      	strne	r0, [r4, #84]	; 0x54
 8006606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800660a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800660e:	81a3      	strheq	r3, [r4, #12]
 8006610:	bf18      	it	ne
 8006612:	81a3      	strhne	r3, [r4, #12]
 8006614:	bd10      	pop	{r4, pc}

08006616 <__sclose>:
 8006616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661a:	f000 b80d 	b.w	8006638 <_close_r>

0800661e <memset>:
 800661e:	4402      	add	r2, r0
 8006620:	4603      	mov	r3, r0
 8006622:	4293      	cmp	r3, r2
 8006624:	d100      	bne.n	8006628 <memset+0xa>
 8006626:	4770      	bx	lr
 8006628:	f803 1b01 	strb.w	r1, [r3], #1
 800662c:	e7f9      	b.n	8006622 <memset+0x4>
	...

08006630 <_localeconv_r>:
 8006630:	4800      	ldr	r0, [pc, #0]	; (8006634 <_localeconv_r+0x4>)
 8006632:	4770      	bx	lr
 8006634:	2000015c 	.word	0x2000015c

08006638 <_close_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d06      	ldr	r5, [pc, #24]	; (8006654 <_close_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	f7fb f903 	bl	800184e <_close>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_close_r+0x1a>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_close_r+0x1a>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	2000448c 	.word	0x2000448c

08006658 <_lseek_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4d07      	ldr	r5, [pc, #28]	; (8006678 <_lseek_r+0x20>)
 800665c:	4604      	mov	r4, r0
 800665e:	4608      	mov	r0, r1
 8006660:	4611      	mov	r1, r2
 8006662:	2200      	movs	r2, #0
 8006664:	602a      	str	r2, [r5, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	f7fb f918 	bl	800189c <_lseek>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_lseek_r+0x1e>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b103      	cbz	r3, 8006676 <_lseek_r+0x1e>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	2000448c 	.word	0x2000448c

0800667c <_read_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4d07      	ldr	r5, [pc, #28]	; (800669c <_read_r+0x20>)
 8006680:	4604      	mov	r4, r0
 8006682:	4608      	mov	r0, r1
 8006684:	4611      	mov	r1, r2
 8006686:	2200      	movs	r2, #0
 8006688:	602a      	str	r2, [r5, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	f7fb f8a6 	bl	80017dc <_read>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d102      	bne.n	800669a <_read_r+0x1e>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	b103      	cbz	r3, 800669a <_read_r+0x1e>
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	bd38      	pop	{r3, r4, r5, pc}
 800669c:	2000448c 	.word	0x2000448c

080066a0 <_write_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4d07      	ldr	r5, [pc, #28]	; (80066c0 <_write_r+0x20>)
 80066a4:	4604      	mov	r4, r0
 80066a6:	4608      	mov	r0, r1
 80066a8:	4611      	mov	r1, r2
 80066aa:	2200      	movs	r2, #0
 80066ac:	602a      	str	r2, [r5, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f7fb f8b1 	bl	8001816 <_write>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d102      	bne.n	80066be <_write_r+0x1e>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	b103      	cbz	r3, 80066be <_write_r+0x1e>
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	2000448c 	.word	0x2000448c

080066c4 <__errno>:
 80066c4:	4b01      	ldr	r3, [pc, #4]	; (80066cc <__errno+0x8>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000068 	.word	0x20000068

080066d0 <__libc_init_array>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	4d0d      	ldr	r5, [pc, #52]	; (8006708 <__libc_init_array+0x38>)
 80066d4:	4c0d      	ldr	r4, [pc, #52]	; (800670c <__libc_init_array+0x3c>)
 80066d6:	1b64      	subs	r4, r4, r5
 80066d8:	10a4      	asrs	r4, r4, #2
 80066da:	2600      	movs	r6, #0
 80066dc:	42a6      	cmp	r6, r4
 80066de:	d109      	bne.n	80066f4 <__libc_init_array+0x24>
 80066e0:	4d0b      	ldr	r5, [pc, #44]	; (8006710 <__libc_init_array+0x40>)
 80066e2:	4c0c      	ldr	r4, [pc, #48]	; (8006714 <__libc_init_array+0x44>)
 80066e4:	f002 f892 	bl	800880c <_init>
 80066e8:	1b64      	subs	r4, r4, r5
 80066ea:	10a4      	asrs	r4, r4, #2
 80066ec:	2600      	movs	r6, #0
 80066ee:	42a6      	cmp	r6, r4
 80066f0:	d105      	bne.n	80066fe <__libc_init_array+0x2e>
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f8:	4798      	blx	r3
 80066fa:	3601      	adds	r6, #1
 80066fc:	e7ee      	b.n	80066dc <__libc_init_array+0xc>
 80066fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006702:	4798      	blx	r3
 8006704:	3601      	adds	r6, #1
 8006706:	e7f2      	b.n	80066ee <__libc_init_array+0x1e>
 8006708:	08008c44 	.word	0x08008c44
 800670c:	08008c44 	.word	0x08008c44
 8006710:	08008c44 	.word	0x08008c44
 8006714:	08008c48 	.word	0x08008c48

08006718 <__retarget_lock_acquire_recursive>:
 8006718:	4770      	bx	lr

0800671a <__retarget_lock_release_recursive>:
 800671a:	4770      	bx	lr

0800671c <memcpy>:
 800671c:	440a      	add	r2, r1
 800671e:	4291      	cmp	r1, r2
 8006720:	f100 33ff 	add.w	r3, r0, #4294967295
 8006724:	d100      	bne.n	8006728 <memcpy+0xc>
 8006726:	4770      	bx	lr
 8006728:	b510      	push	{r4, lr}
 800672a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006732:	4291      	cmp	r1, r2
 8006734:	d1f9      	bne.n	800672a <memcpy+0xe>
 8006736:	bd10      	pop	{r4, pc}

08006738 <quorem>:
 8006738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	6903      	ldr	r3, [r0, #16]
 800673e:	690c      	ldr	r4, [r1, #16]
 8006740:	42a3      	cmp	r3, r4
 8006742:	4607      	mov	r7, r0
 8006744:	db7e      	blt.n	8006844 <quorem+0x10c>
 8006746:	3c01      	subs	r4, #1
 8006748:	f101 0814 	add.w	r8, r1, #20
 800674c:	f100 0514 	add.w	r5, r0, #20
 8006750:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800675a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800675e:	3301      	adds	r3, #1
 8006760:	429a      	cmp	r2, r3
 8006762:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006766:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800676a:	fbb2 f6f3 	udiv	r6, r2, r3
 800676e:	d331      	bcc.n	80067d4 <quorem+0x9c>
 8006770:	f04f 0e00 	mov.w	lr, #0
 8006774:	4640      	mov	r0, r8
 8006776:	46ac      	mov	ip, r5
 8006778:	46f2      	mov	sl, lr
 800677a:	f850 2b04 	ldr.w	r2, [r0], #4
 800677e:	b293      	uxth	r3, r2
 8006780:	fb06 e303 	mla	r3, r6, r3, lr
 8006784:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006788:	0c1a      	lsrs	r2, r3, #16
 800678a:	b29b      	uxth	r3, r3
 800678c:	ebaa 0303 	sub.w	r3, sl, r3
 8006790:	f8dc a000 	ldr.w	sl, [ip]
 8006794:	fa13 f38a 	uxtah	r3, r3, sl
 8006798:	fb06 220e 	mla	r2, r6, lr, r2
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	9b00      	ldr	r3, [sp, #0]
 80067a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067a4:	b292      	uxth	r2, r2
 80067a6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80067b2:	4581      	cmp	r9, r0
 80067b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067b8:	f84c 3b04 	str.w	r3, [ip], #4
 80067bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067c0:	d2db      	bcs.n	800677a <quorem+0x42>
 80067c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80067c6:	b92b      	cbnz	r3, 80067d4 <quorem+0x9c>
 80067c8:	9b01      	ldr	r3, [sp, #4]
 80067ca:	3b04      	subs	r3, #4
 80067cc:	429d      	cmp	r5, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	d32c      	bcc.n	800682c <quorem+0xf4>
 80067d2:	613c      	str	r4, [r7, #16]
 80067d4:	4638      	mov	r0, r7
 80067d6:	f001 f9a5 	bl	8007b24 <__mcmp>
 80067da:	2800      	cmp	r0, #0
 80067dc:	db22      	blt.n	8006824 <quorem+0xec>
 80067de:	3601      	adds	r6, #1
 80067e0:	4629      	mov	r1, r5
 80067e2:	2000      	movs	r0, #0
 80067e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80067e8:	f8d1 c000 	ldr.w	ip, [r1]
 80067ec:	b293      	uxth	r3, r2
 80067ee:	1ac3      	subs	r3, r0, r3
 80067f0:	0c12      	lsrs	r2, r2, #16
 80067f2:	fa13 f38c 	uxtah	r3, r3, ip
 80067f6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80067fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067fe:	b29b      	uxth	r3, r3
 8006800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006804:	45c1      	cmp	r9, r8
 8006806:	f841 3b04 	str.w	r3, [r1], #4
 800680a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800680e:	d2e9      	bcs.n	80067e4 <quorem+0xac>
 8006810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006818:	b922      	cbnz	r2, 8006824 <quorem+0xec>
 800681a:	3b04      	subs	r3, #4
 800681c:	429d      	cmp	r5, r3
 800681e:	461a      	mov	r2, r3
 8006820:	d30a      	bcc.n	8006838 <quorem+0x100>
 8006822:	613c      	str	r4, [r7, #16]
 8006824:	4630      	mov	r0, r6
 8006826:	b003      	add	sp, #12
 8006828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	3b04      	subs	r3, #4
 8006830:	2a00      	cmp	r2, #0
 8006832:	d1ce      	bne.n	80067d2 <quorem+0x9a>
 8006834:	3c01      	subs	r4, #1
 8006836:	e7c9      	b.n	80067cc <quorem+0x94>
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	3b04      	subs	r3, #4
 800683c:	2a00      	cmp	r2, #0
 800683e:	d1f0      	bne.n	8006822 <quorem+0xea>
 8006840:	3c01      	subs	r4, #1
 8006842:	e7eb      	b.n	800681c <quorem+0xe4>
 8006844:	2000      	movs	r0, #0
 8006846:	e7ee      	b.n	8006826 <quorem+0xee>

08006848 <_dtoa_r>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	ed2d 8b04 	vpush	{d8-d9}
 8006850:	69c5      	ldr	r5, [r0, #28]
 8006852:	b093      	sub	sp, #76	; 0x4c
 8006854:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006858:	ec57 6b10 	vmov	r6, r7, d0
 800685c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006860:	9107      	str	r1, [sp, #28]
 8006862:	4604      	mov	r4, r0
 8006864:	920a      	str	r2, [sp, #40]	; 0x28
 8006866:	930d      	str	r3, [sp, #52]	; 0x34
 8006868:	b975      	cbnz	r5, 8006888 <_dtoa_r+0x40>
 800686a:	2010      	movs	r0, #16
 800686c:	f000 fe2a 	bl	80074c4 <malloc>
 8006870:	4602      	mov	r2, r0
 8006872:	61e0      	str	r0, [r4, #28]
 8006874:	b920      	cbnz	r0, 8006880 <_dtoa_r+0x38>
 8006876:	4bae      	ldr	r3, [pc, #696]	; (8006b30 <_dtoa_r+0x2e8>)
 8006878:	21ef      	movs	r1, #239	; 0xef
 800687a:	48ae      	ldr	r0, [pc, #696]	; (8006b34 <_dtoa_r+0x2ec>)
 800687c:	f001 fc82 	bl	8008184 <__assert_func>
 8006880:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006884:	6005      	str	r5, [r0, #0]
 8006886:	60c5      	str	r5, [r0, #12]
 8006888:	69e3      	ldr	r3, [r4, #28]
 800688a:	6819      	ldr	r1, [r3, #0]
 800688c:	b151      	cbz	r1, 80068a4 <_dtoa_r+0x5c>
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	604a      	str	r2, [r1, #4]
 8006892:	2301      	movs	r3, #1
 8006894:	4093      	lsls	r3, r2
 8006896:	608b      	str	r3, [r1, #8]
 8006898:	4620      	mov	r0, r4
 800689a:	f000 ff07 	bl	80076ac <_Bfree>
 800689e:	69e3      	ldr	r3, [r4, #28]
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	1e3b      	subs	r3, r7, #0
 80068a6:	bfbb      	ittet	lt
 80068a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	9303      	strlt	r3, [sp, #12]
 80068ae:	2300      	movge	r3, #0
 80068b0:	2201      	movlt	r2, #1
 80068b2:	bfac      	ite	ge
 80068b4:	f8c8 3000 	strge.w	r3, [r8]
 80068b8:	f8c8 2000 	strlt.w	r2, [r8]
 80068bc:	4b9e      	ldr	r3, [pc, #632]	; (8006b38 <_dtoa_r+0x2f0>)
 80068be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80068c2:	ea33 0308 	bics.w	r3, r3, r8
 80068c6:	d11b      	bne.n	8006900 <_dtoa_r+0xb8>
 80068c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80068d4:	4333      	orrs	r3, r6
 80068d6:	f000 8593 	beq.w	8007400 <_dtoa_r+0xbb8>
 80068da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068dc:	b963      	cbnz	r3, 80068f8 <_dtoa_r+0xb0>
 80068de:	4b97      	ldr	r3, [pc, #604]	; (8006b3c <_dtoa_r+0x2f4>)
 80068e0:	e027      	b.n	8006932 <_dtoa_r+0xea>
 80068e2:	4b97      	ldr	r3, [pc, #604]	; (8006b40 <_dtoa_r+0x2f8>)
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	3308      	adds	r3, #8
 80068e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	9800      	ldr	r0, [sp, #0]
 80068ee:	b013      	add	sp, #76	; 0x4c
 80068f0:	ecbd 8b04 	vpop	{d8-d9}
 80068f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f8:	4b90      	ldr	r3, [pc, #576]	; (8006b3c <_dtoa_r+0x2f4>)
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	3303      	adds	r3, #3
 80068fe:	e7f3      	b.n	80068e8 <_dtoa_r+0xa0>
 8006900:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	ec51 0b17 	vmov	r0, r1, d7
 800690a:	eeb0 8a47 	vmov.f32	s16, s14
 800690e:	eef0 8a67 	vmov.f32	s17, s15
 8006912:	2300      	movs	r3, #0
 8006914:	f7fa f8d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006918:	4681      	mov	r9, r0
 800691a:	b160      	cbz	r0, 8006936 <_dtoa_r+0xee>
 800691c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800691e:	2301      	movs	r3, #1
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8568 	beq.w	80073fa <_dtoa_r+0xbb2>
 800692a:	4b86      	ldr	r3, [pc, #536]	; (8006b44 <_dtoa_r+0x2fc>)
 800692c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	3b01      	subs	r3, #1
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	e7da      	b.n	80068ec <_dtoa_r+0xa4>
 8006936:	aa10      	add	r2, sp, #64	; 0x40
 8006938:	a911      	add	r1, sp, #68	; 0x44
 800693a:	4620      	mov	r0, r4
 800693c:	eeb0 0a48 	vmov.f32	s0, s16
 8006940:	eef0 0a68 	vmov.f32	s1, s17
 8006944:	f001 f994 	bl	8007c70 <__d2b>
 8006948:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800694c:	4682      	mov	sl, r0
 800694e:	2d00      	cmp	r5, #0
 8006950:	d07f      	beq.n	8006a52 <_dtoa_r+0x20a>
 8006952:	ee18 3a90 	vmov	r3, s17
 8006956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800695a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800695e:	ec51 0b18 	vmov	r0, r1, d8
 8006962:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800696a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800696e:	4619      	mov	r1, r3
 8006970:	2200      	movs	r2, #0
 8006972:	4b75      	ldr	r3, [pc, #468]	; (8006b48 <_dtoa_r+0x300>)
 8006974:	f7f9 fc88 	bl	8000288 <__aeabi_dsub>
 8006978:	a367      	add	r3, pc, #412	; (adr r3, 8006b18 <_dtoa_r+0x2d0>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fe3b 	bl	80005f8 <__aeabi_dmul>
 8006982:	a367      	add	r3, pc, #412	; (adr r3, 8006b20 <_dtoa_r+0x2d8>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fc80 	bl	800028c <__adddf3>
 800698c:	4606      	mov	r6, r0
 800698e:	4628      	mov	r0, r5
 8006990:	460f      	mov	r7, r1
 8006992:	f7f9 fdc7 	bl	8000524 <__aeabi_i2d>
 8006996:	a364      	add	r3, pc, #400	; (adr r3, 8006b28 <_dtoa_r+0x2e0>)
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f7f9 fe2c 	bl	80005f8 <__aeabi_dmul>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4630      	mov	r0, r6
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7f9 fc70 	bl	800028c <__adddf3>
 80069ac:	4606      	mov	r6, r0
 80069ae:	460f      	mov	r7, r1
 80069b0:	f7fa f8d2 	bl	8000b58 <__aeabi_d2iz>
 80069b4:	2200      	movs	r2, #0
 80069b6:	4683      	mov	fp, r0
 80069b8:	2300      	movs	r3, #0
 80069ba:	4630      	mov	r0, r6
 80069bc:	4639      	mov	r1, r7
 80069be:	f7fa f88d 	bl	8000adc <__aeabi_dcmplt>
 80069c2:	b148      	cbz	r0, 80069d8 <_dtoa_r+0x190>
 80069c4:	4658      	mov	r0, fp
 80069c6:	f7f9 fdad 	bl	8000524 <__aeabi_i2d>
 80069ca:	4632      	mov	r2, r6
 80069cc:	463b      	mov	r3, r7
 80069ce:	f7fa f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 80069d2:	b908      	cbnz	r0, 80069d8 <_dtoa_r+0x190>
 80069d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069d8:	f1bb 0f16 	cmp.w	fp, #22
 80069dc:	d857      	bhi.n	8006a8e <_dtoa_r+0x246>
 80069de:	4b5b      	ldr	r3, [pc, #364]	; (8006b4c <_dtoa_r+0x304>)
 80069e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	ec51 0b18 	vmov	r0, r1, d8
 80069ec:	f7fa f876 	bl	8000adc <__aeabi_dcmplt>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d04e      	beq.n	8006a92 <_dtoa_r+0x24a>
 80069f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069f8:	2300      	movs	r3, #0
 80069fa:	930c      	str	r3, [sp, #48]	; 0x30
 80069fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069fe:	1b5b      	subs	r3, r3, r5
 8006a00:	1e5a      	subs	r2, r3, #1
 8006a02:	bf45      	ittet	mi
 8006a04:	f1c3 0301 	rsbmi	r3, r3, #1
 8006a08:	9305      	strmi	r3, [sp, #20]
 8006a0a:	2300      	movpl	r3, #0
 8006a0c:	2300      	movmi	r3, #0
 8006a0e:	9206      	str	r2, [sp, #24]
 8006a10:	bf54      	ite	pl
 8006a12:	9305      	strpl	r3, [sp, #20]
 8006a14:	9306      	strmi	r3, [sp, #24]
 8006a16:	f1bb 0f00 	cmp.w	fp, #0
 8006a1a:	db3c      	blt.n	8006a96 <_dtoa_r+0x24e>
 8006a1c:	9b06      	ldr	r3, [sp, #24]
 8006a1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006a22:	445b      	add	r3, fp
 8006a24:	9306      	str	r3, [sp, #24]
 8006a26:	2300      	movs	r3, #0
 8006a28:	9308      	str	r3, [sp, #32]
 8006a2a:	9b07      	ldr	r3, [sp, #28]
 8006a2c:	2b09      	cmp	r3, #9
 8006a2e:	d868      	bhi.n	8006b02 <_dtoa_r+0x2ba>
 8006a30:	2b05      	cmp	r3, #5
 8006a32:	bfc4      	itt	gt
 8006a34:	3b04      	subgt	r3, #4
 8006a36:	9307      	strgt	r3, [sp, #28]
 8006a38:	9b07      	ldr	r3, [sp, #28]
 8006a3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a3e:	bfcc      	ite	gt
 8006a40:	2500      	movgt	r5, #0
 8006a42:	2501      	movle	r5, #1
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	f200 8085 	bhi.w	8006b54 <_dtoa_r+0x30c>
 8006a4a:	e8df f003 	tbb	[pc, r3]
 8006a4e:	3b2e      	.short	0x3b2e
 8006a50:	5839      	.short	0x5839
 8006a52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006a56:	441d      	add	r5, r3
 8006a58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	bfc1      	itttt	gt
 8006a60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a64:	fa08 f803 	lslgt.w	r8, r8, r3
 8006a68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006a6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006a70:	bfd6      	itet	le
 8006a72:	f1c3 0320 	rsble	r3, r3, #32
 8006a76:	ea48 0003 	orrgt.w	r0, r8, r3
 8006a7a:	fa06 f003 	lslle.w	r0, r6, r3
 8006a7e:	f7f9 fd41 	bl	8000504 <__aeabi_ui2d>
 8006a82:	2201      	movs	r2, #1
 8006a84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006a88:	3d01      	subs	r5, #1
 8006a8a:	920e      	str	r2, [sp, #56]	; 0x38
 8006a8c:	e76f      	b.n	800696e <_dtoa_r+0x126>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e7b3      	b.n	80069fa <_dtoa_r+0x1b2>
 8006a92:	900c      	str	r0, [sp, #48]	; 0x30
 8006a94:	e7b2      	b.n	80069fc <_dtoa_r+0x1b4>
 8006a96:	9b05      	ldr	r3, [sp, #20]
 8006a98:	eba3 030b 	sub.w	r3, r3, fp
 8006a9c:	9305      	str	r3, [sp, #20]
 8006a9e:	f1cb 0300 	rsb	r3, fp, #0
 8006aa2:	9308      	str	r3, [sp, #32]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aa8:	e7bf      	b.n	8006a2a <_dtoa_r+0x1e2>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9309      	str	r3, [sp, #36]	; 0x24
 8006aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dc52      	bgt.n	8006b5a <_dtoa_r+0x312>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	9304      	str	r3, [sp, #16]
 8006aba:	461a      	mov	r2, r3
 8006abc:	920a      	str	r2, [sp, #40]	; 0x28
 8006abe:	e00b      	b.n	8006ad8 <_dtoa_r+0x290>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e7f3      	b.n	8006aac <_dtoa_r+0x264>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aca:	445b      	add	r3, fp
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	bfb8      	it	lt
 8006ad6:	2301      	movlt	r3, #1
 8006ad8:	69e0      	ldr	r0, [r4, #28]
 8006ada:	2100      	movs	r1, #0
 8006adc:	2204      	movs	r2, #4
 8006ade:	f102 0614 	add.w	r6, r2, #20
 8006ae2:	429e      	cmp	r6, r3
 8006ae4:	d93d      	bls.n	8006b62 <_dtoa_r+0x31a>
 8006ae6:	6041      	str	r1, [r0, #4]
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fd9f 	bl	800762c <_Balloc>
 8006aee:	9000      	str	r0, [sp, #0]
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d139      	bne.n	8006b68 <_dtoa_r+0x320>
 8006af4:	4b16      	ldr	r3, [pc, #88]	; (8006b50 <_dtoa_r+0x308>)
 8006af6:	4602      	mov	r2, r0
 8006af8:	f240 11af 	movw	r1, #431	; 0x1af
 8006afc:	e6bd      	b.n	800687a <_dtoa_r+0x32>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e7e1      	b.n	8006ac6 <_dtoa_r+0x27e>
 8006b02:	2501      	movs	r5, #1
 8006b04:	2300      	movs	r3, #0
 8006b06:	9307      	str	r3, [sp, #28]
 8006b08:	9509      	str	r5, [sp, #36]	; 0x24
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	9304      	str	r3, [sp, #16]
 8006b12:	2200      	movs	r2, #0
 8006b14:	2312      	movs	r3, #18
 8006b16:	e7d1      	b.n	8006abc <_dtoa_r+0x274>
 8006b18:	636f4361 	.word	0x636f4361
 8006b1c:	3fd287a7 	.word	0x3fd287a7
 8006b20:	8b60c8b3 	.word	0x8b60c8b3
 8006b24:	3fc68a28 	.word	0x3fc68a28
 8006b28:	509f79fb 	.word	0x509f79fb
 8006b2c:	3fd34413 	.word	0x3fd34413
 8006b30:	08008909 	.word	0x08008909
 8006b34:	08008920 	.word	0x08008920
 8006b38:	7ff00000 	.word	0x7ff00000
 8006b3c:	08008905 	.word	0x08008905
 8006b40:	080088fc 	.word	0x080088fc
 8006b44:	080088d9 	.word	0x080088d9
 8006b48:	3ff80000 	.word	0x3ff80000
 8006b4c:	08008a10 	.word	0x08008a10
 8006b50:	08008978 	.word	0x08008978
 8006b54:	2301      	movs	r3, #1
 8006b56:	9309      	str	r3, [sp, #36]	; 0x24
 8006b58:	e7d7      	b.n	8006b0a <_dtoa_r+0x2c2>
 8006b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	9304      	str	r3, [sp, #16]
 8006b60:	e7ba      	b.n	8006ad8 <_dtoa_r+0x290>
 8006b62:	3101      	adds	r1, #1
 8006b64:	0052      	lsls	r2, r2, #1
 8006b66:	e7ba      	b.n	8006ade <_dtoa_r+0x296>
 8006b68:	69e3      	ldr	r3, [r4, #28]
 8006b6a:	9a00      	ldr	r2, [sp, #0]
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	2b0e      	cmp	r3, #14
 8006b72:	f200 80a8 	bhi.w	8006cc6 <_dtoa_r+0x47e>
 8006b76:	2d00      	cmp	r5, #0
 8006b78:	f000 80a5 	beq.w	8006cc6 <_dtoa_r+0x47e>
 8006b7c:	f1bb 0f00 	cmp.w	fp, #0
 8006b80:	dd38      	ble.n	8006bf4 <_dtoa_r+0x3ac>
 8006b82:	4bc0      	ldr	r3, [pc, #768]	; (8006e84 <_dtoa_r+0x63c>)
 8006b84:	f00b 020f 	and.w	r2, fp, #15
 8006b88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006b94:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006b98:	d019      	beq.n	8006bce <_dtoa_r+0x386>
 8006b9a:	4bbb      	ldr	r3, [pc, #748]	; (8006e88 <_dtoa_r+0x640>)
 8006b9c:	ec51 0b18 	vmov	r0, r1, d8
 8006ba0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ba4:	f7f9 fe52 	bl	800084c <__aeabi_ddiv>
 8006ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bac:	f008 080f 	and.w	r8, r8, #15
 8006bb0:	2503      	movs	r5, #3
 8006bb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006e88 <_dtoa_r+0x640>
 8006bb6:	f1b8 0f00 	cmp.w	r8, #0
 8006bba:	d10a      	bne.n	8006bd2 <_dtoa_r+0x38a>
 8006bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc0:	4632      	mov	r2, r6
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	f7f9 fe42 	bl	800084c <__aeabi_ddiv>
 8006bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bcc:	e02b      	b.n	8006c26 <_dtoa_r+0x3de>
 8006bce:	2502      	movs	r5, #2
 8006bd0:	e7ef      	b.n	8006bb2 <_dtoa_r+0x36a>
 8006bd2:	f018 0f01 	tst.w	r8, #1
 8006bd6:	d008      	beq.n	8006bea <_dtoa_r+0x3a2>
 8006bd8:	4630      	mov	r0, r6
 8006bda:	4639      	mov	r1, r7
 8006bdc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006be0:	f7f9 fd0a 	bl	80005f8 <__aeabi_dmul>
 8006be4:	3501      	adds	r5, #1
 8006be6:	4606      	mov	r6, r0
 8006be8:	460f      	mov	r7, r1
 8006bea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006bee:	f109 0908 	add.w	r9, r9, #8
 8006bf2:	e7e0      	b.n	8006bb6 <_dtoa_r+0x36e>
 8006bf4:	f000 809f 	beq.w	8006d36 <_dtoa_r+0x4ee>
 8006bf8:	f1cb 0600 	rsb	r6, fp, #0
 8006bfc:	4ba1      	ldr	r3, [pc, #644]	; (8006e84 <_dtoa_r+0x63c>)
 8006bfe:	4fa2      	ldr	r7, [pc, #648]	; (8006e88 <_dtoa_r+0x640>)
 8006c00:	f006 020f 	and.w	r2, r6, #15
 8006c04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	ec51 0b18 	vmov	r0, r1, d8
 8006c10:	f7f9 fcf2 	bl	80005f8 <__aeabi_dmul>
 8006c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c18:	1136      	asrs	r6, r6, #4
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2502      	movs	r5, #2
 8006c1e:	2e00      	cmp	r6, #0
 8006c20:	d17e      	bne.n	8006d20 <_dtoa_r+0x4d8>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1d0      	bne.n	8006bc8 <_dtoa_r+0x380>
 8006c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8084 	beq.w	8006d3a <_dtoa_r+0x4f2>
 8006c32:	4b96      	ldr	r3, [pc, #600]	; (8006e8c <_dtoa_r+0x644>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	4640      	mov	r0, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f7f9 ff4f 	bl	8000adc <__aeabi_dcmplt>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d07b      	beq.n	8006d3a <_dtoa_r+0x4f2>
 8006c42:	9b04      	ldr	r3, [sp, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d078      	beq.n	8006d3a <_dtoa_r+0x4f2>
 8006c48:	9b01      	ldr	r3, [sp, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	dd39      	ble.n	8006cc2 <_dtoa_r+0x47a>
 8006c4e:	4b90      	ldr	r3, [pc, #576]	; (8006e90 <_dtoa_r+0x648>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f7f9 fccf 	bl	80005f8 <__aeabi_dmul>
 8006c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c5e:	9e01      	ldr	r6, [sp, #4]
 8006c60:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006c64:	3501      	adds	r5, #1
 8006c66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f7f9 fc5a 	bl	8000524 <__aeabi_i2d>
 8006c70:	4642      	mov	r2, r8
 8006c72:	464b      	mov	r3, r9
 8006c74:	f7f9 fcc0 	bl	80005f8 <__aeabi_dmul>
 8006c78:	4b86      	ldr	r3, [pc, #536]	; (8006e94 <_dtoa_r+0x64c>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f7f9 fb06 	bl	800028c <__adddf3>
 8006c80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c88:	9303      	str	r3, [sp, #12]
 8006c8a:	2e00      	cmp	r6, #0
 8006c8c:	d158      	bne.n	8006d40 <_dtoa_r+0x4f8>
 8006c8e:	4b82      	ldr	r3, [pc, #520]	; (8006e98 <_dtoa_r+0x650>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	4640      	mov	r0, r8
 8006c94:	4649      	mov	r1, r9
 8006c96:	f7f9 faf7 	bl	8000288 <__aeabi_dsub>
 8006c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c9e:	4680      	mov	r8, r0
 8006ca0:	4689      	mov	r9, r1
 8006ca2:	f7f9 ff39 	bl	8000b18 <__aeabi_dcmpgt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	f040 8296 	bne.w	80071d8 <_dtoa_r+0x990>
 8006cac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	f7f9 ff10 	bl	8000adc <__aeabi_dcmplt>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	f040 8289 	bne.w	80071d4 <_dtoa_r+0x98c>
 8006cc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f2c0 814e 	blt.w	8006f6a <_dtoa_r+0x722>
 8006cce:	f1bb 0f0e 	cmp.w	fp, #14
 8006cd2:	f300 814a 	bgt.w	8006f6a <_dtoa_r+0x722>
 8006cd6:	4b6b      	ldr	r3, [pc, #428]	; (8006e84 <_dtoa_r+0x63c>)
 8006cd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f280 80dc 	bge.w	8006ea0 <_dtoa_r+0x658>
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f300 80d8 	bgt.w	8006ea0 <_dtoa_r+0x658>
 8006cf0:	f040 826f 	bne.w	80071d2 <_dtoa_r+0x98a>
 8006cf4:	4b68      	ldr	r3, [pc, #416]	; (8006e98 <_dtoa_r+0x650>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	f7f9 fc7c 	bl	80005f8 <__aeabi_dmul>
 8006d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d04:	f7f9 fefe 	bl	8000b04 <__aeabi_dcmpge>
 8006d08:	9e04      	ldr	r6, [sp, #16]
 8006d0a:	4637      	mov	r7, r6
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	f040 8245 	bne.w	800719c <_dtoa_r+0x954>
 8006d12:	9d00      	ldr	r5, [sp, #0]
 8006d14:	2331      	movs	r3, #49	; 0x31
 8006d16:	f805 3b01 	strb.w	r3, [r5], #1
 8006d1a:	f10b 0b01 	add.w	fp, fp, #1
 8006d1e:	e241      	b.n	80071a4 <_dtoa_r+0x95c>
 8006d20:	07f2      	lsls	r2, r6, #31
 8006d22:	d505      	bpl.n	8006d30 <_dtoa_r+0x4e8>
 8006d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d28:	f7f9 fc66 	bl	80005f8 <__aeabi_dmul>
 8006d2c:	3501      	adds	r5, #1
 8006d2e:	2301      	movs	r3, #1
 8006d30:	1076      	asrs	r6, r6, #1
 8006d32:	3708      	adds	r7, #8
 8006d34:	e773      	b.n	8006c1e <_dtoa_r+0x3d6>
 8006d36:	2502      	movs	r5, #2
 8006d38:	e775      	b.n	8006c26 <_dtoa_r+0x3de>
 8006d3a:	9e04      	ldr	r6, [sp, #16]
 8006d3c:	465f      	mov	r7, fp
 8006d3e:	e792      	b.n	8006c66 <_dtoa_r+0x41e>
 8006d40:	9900      	ldr	r1, [sp, #0]
 8006d42:	4b50      	ldr	r3, [pc, #320]	; (8006e84 <_dtoa_r+0x63c>)
 8006d44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d48:	4431      	add	r1, r6
 8006d4a:	9102      	str	r1, [sp, #8]
 8006d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d4e:	eeb0 9a47 	vmov.f32	s18, s14
 8006d52:	eef0 9a67 	vmov.f32	s19, s15
 8006d56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d5e:	2900      	cmp	r1, #0
 8006d60:	d044      	beq.n	8006dec <_dtoa_r+0x5a4>
 8006d62:	494e      	ldr	r1, [pc, #312]	; (8006e9c <_dtoa_r+0x654>)
 8006d64:	2000      	movs	r0, #0
 8006d66:	f7f9 fd71 	bl	800084c <__aeabi_ddiv>
 8006d6a:	ec53 2b19 	vmov	r2, r3, d9
 8006d6e:	f7f9 fa8b 	bl	8000288 <__aeabi_dsub>
 8006d72:	9d00      	ldr	r5, [sp, #0]
 8006d74:	ec41 0b19 	vmov	d9, r0, r1
 8006d78:	4649      	mov	r1, r9
 8006d7a:	4640      	mov	r0, r8
 8006d7c:	f7f9 feec 	bl	8000b58 <__aeabi_d2iz>
 8006d80:	4606      	mov	r6, r0
 8006d82:	f7f9 fbcf 	bl	8000524 <__aeabi_i2d>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	f7f9 fa7b 	bl	8000288 <__aeabi_dsub>
 8006d92:	3630      	adds	r6, #48	; 0x30
 8006d94:	f805 6b01 	strb.w	r6, [r5], #1
 8006d98:	ec53 2b19 	vmov	r2, r3, d9
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	4689      	mov	r9, r1
 8006da0:	f7f9 fe9c 	bl	8000adc <__aeabi_dcmplt>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d164      	bne.n	8006e72 <_dtoa_r+0x62a>
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	4937      	ldr	r1, [pc, #220]	; (8006e8c <_dtoa_r+0x644>)
 8006dae:	2000      	movs	r0, #0
 8006db0:	f7f9 fa6a 	bl	8000288 <__aeabi_dsub>
 8006db4:	ec53 2b19 	vmov	r2, r3, d9
 8006db8:	f7f9 fe90 	bl	8000adc <__aeabi_dcmplt>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	f040 80b6 	bne.w	8006f2e <_dtoa_r+0x6e6>
 8006dc2:	9b02      	ldr	r3, [sp, #8]
 8006dc4:	429d      	cmp	r5, r3
 8006dc6:	f43f af7c 	beq.w	8006cc2 <_dtoa_r+0x47a>
 8006dca:	4b31      	ldr	r3, [pc, #196]	; (8006e90 <_dtoa_r+0x648>)
 8006dcc:	ec51 0b19 	vmov	r0, r1, d9
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f7f9 fc11 	bl	80005f8 <__aeabi_dmul>
 8006dd6:	4b2e      	ldr	r3, [pc, #184]	; (8006e90 <_dtoa_r+0x648>)
 8006dd8:	ec41 0b19 	vmov	d9, r0, r1
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4640      	mov	r0, r8
 8006de0:	4649      	mov	r1, r9
 8006de2:	f7f9 fc09 	bl	80005f8 <__aeabi_dmul>
 8006de6:	4680      	mov	r8, r0
 8006de8:	4689      	mov	r9, r1
 8006dea:	e7c5      	b.n	8006d78 <_dtoa_r+0x530>
 8006dec:	ec51 0b17 	vmov	r0, r1, d7
 8006df0:	f7f9 fc02 	bl	80005f8 <__aeabi_dmul>
 8006df4:	9b02      	ldr	r3, [sp, #8]
 8006df6:	9d00      	ldr	r5, [sp, #0]
 8006df8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dfa:	ec41 0b19 	vmov	d9, r0, r1
 8006dfe:	4649      	mov	r1, r9
 8006e00:	4640      	mov	r0, r8
 8006e02:	f7f9 fea9 	bl	8000b58 <__aeabi_d2iz>
 8006e06:	4606      	mov	r6, r0
 8006e08:	f7f9 fb8c 	bl	8000524 <__aeabi_i2d>
 8006e0c:	3630      	adds	r6, #48	; 0x30
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fa37 	bl	8000288 <__aeabi_dsub>
 8006e1a:	f805 6b01 	strb.w	r6, [r5], #1
 8006e1e:	9b02      	ldr	r3, [sp, #8]
 8006e20:	429d      	cmp	r5, r3
 8006e22:	4680      	mov	r8, r0
 8006e24:	4689      	mov	r9, r1
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	d124      	bne.n	8006e76 <_dtoa_r+0x62e>
 8006e2c:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <_dtoa_r+0x654>)
 8006e2e:	ec51 0b19 	vmov	r0, r1, d9
 8006e32:	f7f9 fa2b 	bl	800028c <__adddf3>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d173      	bne.n	8006f2e <_dtoa_r+0x6e6>
 8006e46:	ec53 2b19 	vmov	r2, r3, d9
 8006e4a:	4914      	ldr	r1, [pc, #80]	; (8006e9c <_dtoa_r+0x654>)
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f7f9 fa1b 	bl	8000288 <__aeabi_dsub>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	4640      	mov	r0, r8
 8006e58:	4649      	mov	r1, r9
 8006e5a:	f7f9 fe3f 	bl	8000adc <__aeabi_dcmplt>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f43f af2f 	beq.w	8006cc2 <_dtoa_r+0x47a>
 8006e64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e66:	1e6b      	subs	r3, r5, #1
 8006e68:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e6e:	2b30      	cmp	r3, #48	; 0x30
 8006e70:	d0f8      	beq.n	8006e64 <_dtoa_r+0x61c>
 8006e72:	46bb      	mov	fp, r7
 8006e74:	e04a      	b.n	8006f0c <_dtoa_r+0x6c4>
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <_dtoa_r+0x648>)
 8006e78:	f7f9 fbbe 	bl	80005f8 <__aeabi_dmul>
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	4689      	mov	r9, r1
 8006e80:	e7bd      	b.n	8006dfe <_dtoa_r+0x5b6>
 8006e82:	bf00      	nop
 8006e84:	08008a10 	.word	0x08008a10
 8006e88:	080089e8 	.word	0x080089e8
 8006e8c:	3ff00000 	.word	0x3ff00000
 8006e90:	40240000 	.word	0x40240000
 8006e94:	401c0000 	.word	0x401c0000
 8006e98:	40140000 	.word	0x40140000
 8006e9c:	3fe00000 	.word	0x3fe00000
 8006ea0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ea4:	9d00      	ldr	r5, [sp, #0]
 8006ea6:	4642      	mov	r2, r8
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	4630      	mov	r0, r6
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7f9 fccd 	bl	800084c <__aeabi_ddiv>
 8006eb2:	f7f9 fe51 	bl	8000b58 <__aeabi_d2iz>
 8006eb6:	9001      	str	r0, [sp, #4]
 8006eb8:	f7f9 fb34 	bl	8000524 <__aeabi_i2d>
 8006ebc:	4642      	mov	r2, r8
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	f7f9 fb9a 	bl	80005f8 <__aeabi_dmul>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4630      	mov	r0, r6
 8006eca:	4639      	mov	r1, r7
 8006ecc:	f7f9 f9dc 	bl	8000288 <__aeabi_dsub>
 8006ed0:	9e01      	ldr	r6, [sp, #4]
 8006ed2:	9f04      	ldr	r7, [sp, #16]
 8006ed4:	3630      	adds	r6, #48	; 0x30
 8006ed6:	f805 6b01 	strb.w	r6, [r5], #1
 8006eda:	9e00      	ldr	r6, [sp, #0]
 8006edc:	1bae      	subs	r6, r5, r6
 8006ede:	42b7      	cmp	r7, r6
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	d134      	bne.n	8006f50 <_dtoa_r+0x708>
 8006ee6:	f7f9 f9d1 	bl	800028c <__adddf3>
 8006eea:	4642      	mov	r2, r8
 8006eec:	464b      	mov	r3, r9
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	f7f9 fe11 	bl	8000b18 <__aeabi_dcmpgt>
 8006ef6:	b9c8      	cbnz	r0, 8006f2c <_dtoa_r+0x6e4>
 8006ef8:	4642      	mov	r2, r8
 8006efa:	464b      	mov	r3, r9
 8006efc:	4630      	mov	r0, r6
 8006efe:	4639      	mov	r1, r7
 8006f00:	f7f9 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f04:	b110      	cbz	r0, 8006f0c <_dtoa_r+0x6c4>
 8006f06:	9b01      	ldr	r3, [sp, #4]
 8006f08:	07db      	lsls	r3, r3, #31
 8006f0a:	d40f      	bmi.n	8006f2c <_dtoa_r+0x6e4>
 8006f0c:	4651      	mov	r1, sl
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fbcc 	bl	80076ac <_Bfree>
 8006f14:	2300      	movs	r3, #0
 8006f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f18:	702b      	strb	r3, [r5, #0]
 8006f1a:	f10b 0301 	add.w	r3, fp, #1
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f43f ace2 	beq.w	80068ec <_dtoa_r+0xa4>
 8006f28:	601d      	str	r5, [r3, #0]
 8006f2a:	e4df      	b.n	80068ec <_dtoa_r+0xa4>
 8006f2c:	465f      	mov	r7, fp
 8006f2e:	462b      	mov	r3, r5
 8006f30:	461d      	mov	r5, r3
 8006f32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f36:	2a39      	cmp	r2, #57	; 0x39
 8006f38:	d106      	bne.n	8006f48 <_dtoa_r+0x700>
 8006f3a:	9a00      	ldr	r2, [sp, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d1f7      	bne.n	8006f30 <_dtoa_r+0x6e8>
 8006f40:	9900      	ldr	r1, [sp, #0]
 8006f42:	2230      	movs	r2, #48	; 0x30
 8006f44:	3701      	adds	r7, #1
 8006f46:	700a      	strb	r2, [r1, #0]
 8006f48:	781a      	ldrb	r2, [r3, #0]
 8006f4a:	3201      	adds	r2, #1
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	e790      	b.n	8006e72 <_dtoa_r+0x62a>
 8006f50:	4ba3      	ldr	r3, [pc, #652]	; (80071e0 <_dtoa_r+0x998>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	f7f9 fb50 	bl	80005f8 <__aeabi_dmul>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	460f      	mov	r7, r1
 8006f60:	f7f9 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d09e      	beq.n	8006ea6 <_dtoa_r+0x65e>
 8006f68:	e7d0      	b.n	8006f0c <_dtoa_r+0x6c4>
 8006f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	f000 80ca 	beq.w	8007106 <_dtoa_r+0x8be>
 8006f72:	9a07      	ldr	r2, [sp, #28]
 8006f74:	2a01      	cmp	r2, #1
 8006f76:	f300 80ad 	bgt.w	80070d4 <_dtoa_r+0x88c>
 8006f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	f000 80a5 	beq.w	80070cc <_dtoa_r+0x884>
 8006f82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f86:	9e08      	ldr	r6, [sp, #32]
 8006f88:	9d05      	ldr	r5, [sp, #20]
 8006f8a:	9a05      	ldr	r2, [sp, #20]
 8006f8c:	441a      	add	r2, r3
 8006f8e:	9205      	str	r2, [sp, #20]
 8006f90:	9a06      	ldr	r2, [sp, #24]
 8006f92:	2101      	movs	r1, #1
 8006f94:	441a      	add	r2, r3
 8006f96:	4620      	mov	r0, r4
 8006f98:	9206      	str	r2, [sp, #24]
 8006f9a:	f000 fc3d 	bl	8007818 <__i2b>
 8006f9e:	4607      	mov	r7, r0
 8006fa0:	b165      	cbz	r5, 8006fbc <_dtoa_r+0x774>
 8006fa2:	9b06      	ldr	r3, [sp, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dd09      	ble.n	8006fbc <_dtoa_r+0x774>
 8006fa8:	42ab      	cmp	r3, r5
 8006faa:	9a05      	ldr	r2, [sp, #20]
 8006fac:	bfa8      	it	ge
 8006fae:	462b      	movge	r3, r5
 8006fb0:	1ad2      	subs	r2, r2, r3
 8006fb2:	9205      	str	r2, [sp, #20]
 8006fb4:	9a06      	ldr	r2, [sp, #24]
 8006fb6:	1aed      	subs	r5, r5, r3
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	9306      	str	r3, [sp, #24]
 8006fbc:	9b08      	ldr	r3, [sp, #32]
 8006fbe:	b1f3      	cbz	r3, 8006ffe <_dtoa_r+0x7b6>
 8006fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 80a3 	beq.w	800710e <_dtoa_r+0x8c6>
 8006fc8:	2e00      	cmp	r6, #0
 8006fca:	dd10      	ble.n	8006fee <_dtoa_r+0x7a6>
 8006fcc:	4639      	mov	r1, r7
 8006fce:	4632      	mov	r2, r6
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fce1 	bl	8007998 <__pow5mult>
 8006fd6:	4652      	mov	r2, sl
 8006fd8:	4601      	mov	r1, r0
 8006fda:	4607      	mov	r7, r0
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fc31 	bl	8007844 <__multiply>
 8006fe2:	4651      	mov	r1, sl
 8006fe4:	4680      	mov	r8, r0
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f000 fb60 	bl	80076ac <_Bfree>
 8006fec:	46c2      	mov	sl, r8
 8006fee:	9b08      	ldr	r3, [sp, #32]
 8006ff0:	1b9a      	subs	r2, r3, r6
 8006ff2:	d004      	beq.n	8006ffe <_dtoa_r+0x7b6>
 8006ff4:	4651      	mov	r1, sl
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 fcce 	bl	8007998 <__pow5mult>
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	2101      	movs	r1, #1
 8007000:	4620      	mov	r0, r4
 8007002:	f000 fc09 	bl	8007818 <__i2b>
 8007006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007008:	2b00      	cmp	r3, #0
 800700a:	4606      	mov	r6, r0
 800700c:	f340 8081 	ble.w	8007112 <_dtoa_r+0x8ca>
 8007010:	461a      	mov	r2, r3
 8007012:	4601      	mov	r1, r0
 8007014:	4620      	mov	r0, r4
 8007016:	f000 fcbf 	bl	8007998 <__pow5mult>
 800701a:	9b07      	ldr	r3, [sp, #28]
 800701c:	2b01      	cmp	r3, #1
 800701e:	4606      	mov	r6, r0
 8007020:	dd7a      	ble.n	8007118 <_dtoa_r+0x8d0>
 8007022:	f04f 0800 	mov.w	r8, #0
 8007026:	6933      	ldr	r3, [r6, #16]
 8007028:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800702c:	6918      	ldr	r0, [r3, #16]
 800702e:	f000 fba5 	bl	800777c <__hi0bits>
 8007032:	f1c0 0020 	rsb	r0, r0, #32
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	4418      	add	r0, r3
 800703a:	f010 001f 	ands.w	r0, r0, #31
 800703e:	f000 8094 	beq.w	800716a <_dtoa_r+0x922>
 8007042:	f1c0 0320 	rsb	r3, r0, #32
 8007046:	2b04      	cmp	r3, #4
 8007048:	f340 8085 	ble.w	8007156 <_dtoa_r+0x90e>
 800704c:	9b05      	ldr	r3, [sp, #20]
 800704e:	f1c0 001c 	rsb	r0, r0, #28
 8007052:	4403      	add	r3, r0
 8007054:	9305      	str	r3, [sp, #20]
 8007056:	9b06      	ldr	r3, [sp, #24]
 8007058:	4403      	add	r3, r0
 800705a:	4405      	add	r5, r0
 800705c:	9306      	str	r3, [sp, #24]
 800705e:	9b05      	ldr	r3, [sp, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	dd05      	ble.n	8007070 <_dtoa_r+0x828>
 8007064:	4651      	mov	r1, sl
 8007066:	461a      	mov	r2, r3
 8007068:	4620      	mov	r0, r4
 800706a:	f000 fcef 	bl	8007a4c <__lshift>
 800706e:	4682      	mov	sl, r0
 8007070:	9b06      	ldr	r3, [sp, #24]
 8007072:	2b00      	cmp	r3, #0
 8007074:	dd05      	ble.n	8007082 <_dtoa_r+0x83a>
 8007076:	4631      	mov	r1, r6
 8007078:	461a      	mov	r2, r3
 800707a:	4620      	mov	r0, r4
 800707c:	f000 fce6 	bl	8007a4c <__lshift>
 8007080:	4606      	mov	r6, r0
 8007082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007084:	2b00      	cmp	r3, #0
 8007086:	d072      	beq.n	800716e <_dtoa_r+0x926>
 8007088:	4631      	mov	r1, r6
 800708a:	4650      	mov	r0, sl
 800708c:	f000 fd4a 	bl	8007b24 <__mcmp>
 8007090:	2800      	cmp	r0, #0
 8007092:	da6c      	bge.n	800716e <_dtoa_r+0x926>
 8007094:	2300      	movs	r3, #0
 8007096:	4651      	mov	r1, sl
 8007098:	220a      	movs	r2, #10
 800709a:	4620      	mov	r0, r4
 800709c:	f000 fb28 	bl	80076f0 <__multadd>
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070a6:	4682      	mov	sl, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 81b0 	beq.w	800740e <_dtoa_r+0xbc6>
 80070ae:	2300      	movs	r3, #0
 80070b0:	4639      	mov	r1, r7
 80070b2:	220a      	movs	r2, #10
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fb1b 	bl	80076f0 <__multadd>
 80070ba:	9b01      	ldr	r3, [sp, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	4607      	mov	r7, r0
 80070c0:	f300 8096 	bgt.w	80071f0 <_dtoa_r+0x9a8>
 80070c4:	9b07      	ldr	r3, [sp, #28]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	dc59      	bgt.n	800717e <_dtoa_r+0x936>
 80070ca:	e091      	b.n	80071f0 <_dtoa_r+0x9a8>
 80070cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070d2:	e758      	b.n	8006f86 <_dtoa_r+0x73e>
 80070d4:	9b04      	ldr	r3, [sp, #16]
 80070d6:	1e5e      	subs	r6, r3, #1
 80070d8:	9b08      	ldr	r3, [sp, #32]
 80070da:	42b3      	cmp	r3, r6
 80070dc:	bfbf      	itttt	lt
 80070de:	9b08      	ldrlt	r3, [sp, #32]
 80070e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80070e2:	9608      	strlt	r6, [sp, #32]
 80070e4:	1af3      	sublt	r3, r6, r3
 80070e6:	bfb4      	ite	lt
 80070e8:	18d2      	addlt	r2, r2, r3
 80070ea:	1b9e      	subge	r6, r3, r6
 80070ec:	9b04      	ldr	r3, [sp, #16]
 80070ee:	bfbc      	itt	lt
 80070f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80070f2:	2600      	movlt	r6, #0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	bfb7      	itett	lt
 80070f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80070fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007100:	1a9d      	sublt	r5, r3, r2
 8007102:	2300      	movlt	r3, #0
 8007104:	e741      	b.n	8006f8a <_dtoa_r+0x742>
 8007106:	9e08      	ldr	r6, [sp, #32]
 8007108:	9d05      	ldr	r5, [sp, #20]
 800710a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800710c:	e748      	b.n	8006fa0 <_dtoa_r+0x758>
 800710e:	9a08      	ldr	r2, [sp, #32]
 8007110:	e770      	b.n	8006ff4 <_dtoa_r+0x7ac>
 8007112:	9b07      	ldr	r3, [sp, #28]
 8007114:	2b01      	cmp	r3, #1
 8007116:	dc19      	bgt.n	800714c <_dtoa_r+0x904>
 8007118:	9b02      	ldr	r3, [sp, #8]
 800711a:	b9bb      	cbnz	r3, 800714c <_dtoa_r+0x904>
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007122:	b99b      	cbnz	r3, 800714c <_dtoa_r+0x904>
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800712a:	0d1b      	lsrs	r3, r3, #20
 800712c:	051b      	lsls	r3, r3, #20
 800712e:	b183      	cbz	r3, 8007152 <_dtoa_r+0x90a>
 8007130:	9b05      	ldr	r3, [sp, #20]
 8007132:	3301      	adds	r3, #1
 8007134:	9305      	str	r3, [sp, #20]
 8007136:	9b06      	ldr	r3, [sp, #24]
 8007138:	3301      	adds	r3, #1
 800713a:	9306      	str	r3, [sp, #24]
 800713c:	f04f 0801 	mov.w	r8, #1
 8007140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007142:	2b00      	cmp	r3, #0
 8007144:	f47f af6f 	bne.w	8007026 <_dtoa_r+0x7de>
 8007148:	2001      	movs	r0, #1
 800714a:	e774      	b.n	8007036 <_dtoa_r+0x7ee>
 800714c:	f04f 0800 	mov.w	r8, #0
 8007150:	e7f6      	b.n	8007140 <_dtoa_r+0x8f8>
 8007152:	4698      	mov	r8, r3
 8007154:	e7f4      	b.n	8007140 <_dtoa_r+0x8f8>
 8007156:	d082      	beq.n	800705e <_dtoa_r+0x816>
 8007158:	9a05      	ldr	r2, [sp, #20]
 800715a:	331c      	adds	r3, #28
 800715c:	441a      	add	r2, r3
 800715e:	9205      	str	r2, [sp, #20]
 8007160:	9a06      	ldr	r2, [sp, #24]
 8007162:	441a      	add	r2, r3
 8007164:	441d      	add	r5, r3
 8007166:	9206      	str	r2, [sp, #24]
 8007168:	e779      	b.n	800705e <_dtoa_r+0x816>
 800716a:	4603      	mov	r3, r0
 800716c:	e7f4      	b.n	8007158 <_dtoa_r+0x910>
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	dc37      	bgt.n	80071e4 <_dtoa_r+0x99c>
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	2b02      	cmp	r3, #2
 8007178:	dd34      	ble.n	80071e4 <_dtoa_r+0x99c>
 800717a:	9b04      	ldr	r3, [sp, #16]
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	b963      	cbnz	r3, 800719c <_dtoa_r+0x954>
 8007182:	4631      	mov	r1, r6
 8007184:	2205      	movs	r2, #5
 8007186:	4620      	mov	r0, r4
 8007188:	f000 fab2 	bl	80076f0 <__multadd>
 800718c:	4601      	mov	r1, r0
 800718e:	4606      	mov	r6, r0
 8007190:	4650      	mov	r0, sl
 8007192:	f000 fcc7 	bl	8007b24 <__mcmp>
 8007196:	2800      	cmp	r0, #0
 8007198:	f73f adbb 	bgt.w	8006d12 <_dtoa_r+0x4ca>
 800719c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719e:	9d00      	ldr	r5, [sp, #0]
 80071a0:	ea6f 0b03 	mvn.w	fp, r3
 80071a4:	f04f 0800 	mov.w	r8, #0
 80071a8:	4631      	mov	r1, r6
 80071aa:	4620      	mov	r0, r4
 80071ac:	f000 fa7e 	bl	80076ac <_Bfree>
 80071b0:	2f00      	cmp	r7, #0
 80071b2:	f43f aeab 	beq.w	8006f0c <_dtoa_r+0x6c4>
 80071b6:	f1b8 0f00 	cmp.w	r8, #0
 80071ba:	d005      	beq.n	80071c8 <_dtoa_r+0x980>
 80071bc:	45b8      	cmp	r8, r7
 80071be:	d003      	beq.n	80071c8 <_dtoa_r+0x980>
 80071c0:	4641      	mov	r1, r8
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 fa72 	bl	80076ac <_Bfree>
 80071c8:	4639      	mov	r1, r7
 80071ca:	4620      	mov	r0, r4
 80071cc:	f000 fa6e 	bl	80076ac <_Bfree>
 80071d0:	e69c      	b.n	8006f0c <_dtoa_r+0x6c4>
 80071d2:	2600      	movs	r6, #0
 80071d4:	4637      	mov	r7, r6
 80071d6:	e7e1      	b.n	800719c <_dtoa_r+0x954>
 80071d8:	46bb      	mov	fp, r7
 80071da:	4637      	mov	r7, r6
 80071dc:	e599      	b.n	8006d12 <_dtoa_r+0x4ca>
 80071de:	bf00      	nop
 80071e0:	40240000 	.word	0x40240000
 80071e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 80c8 	beq.w	800737c <_dtoa_r+0xb34>
 80071ec:	9b04      	ldr	r3, [sp, #16]
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	dd05      	ble.n	8007200 <_dtoa_r+0x9b8>
 80071f4:	4639      	mov	r1, r7
 80071f6:	462a      	mov	r2, r5
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 fc27 	bl	8007a4c <__lshift>
 80071fe:	4607      	mov	r7, r0
 8007200:	f1b8 0f00 	cmp.w	r8, #0
 8007204:	d05b      	beq.n	80072be <_dtoa_r+0xa76>
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fa0f 	bl	800762c <_Balloc>
 800720e:	4605      	mov	r5, r0
 8007210:	b928      	cbnz	r0, 800721e <_dtoa_r+0x9d6>
 8007212:	4b83      	ldr	r3, [pc, #524]	; (8007420 <_dtoa_r+0xbd8>)
 8007214:	4602      	mov	r2, r0
 8007216:	f240 21ef 	movw	r1, #751	; 0x2ef
 800721a:	f7ff bb2e 	b.w	800687a <_dtoa_r+0x32>
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	3202      	adds	r2, #2
 8007222:	0092      	lsls	r2, r2, #2
 8007224:	f107 010c 	add.w	r1, r7, #12
 8007228:	300c      	adds	r0, #12
 800722a:	f7ff fa77 	bl	800671c <memcpy>
 800722e:	2201      	movs	r2, #1
 8007230:	4629      	mov	r1, r5
 8007232:	4620      	mov	r0, r4
 8007234:	f000 fc0a 	bl	8007a4c <__lshift>
 8007238:	9b00      	ldr	r3, [sp, #0]
 800723a:	3301      	adds	r3, #1
 800723c:	9304      	str	r3, [sp, #16]
 800723e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007242:	4413      	add	r3, r2
 8007244:	9308      	str	r3, [sp, #32]
 8007246:	9b02      	ldr	r3, [sp, #8]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	46b8      	mov	r8, r7
 800724e:	9306      	str	r3, [sp, #24]
 8007250:	4607      	mov	r7, r0
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	4631      	mov	r1, r6
 8007256:	3b01      	subs	r3, #1
 8007258:	4650      	mov	r0, sl
 800725a:	9301      	str	r3, [sp, #4]
 800725c:	f7ff fa6c 	bl	8006738 <quorem>
 8007260:	4641      	mov	r1, r8
 8007262:	9002      	str	r0, [sp, #8]
 8007264:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007268:	4650      	mov	r0, sl
 800726a:	f000 fc5b 	bl	8007b24 <__mcmp>
 800726e:	463a      	mov	r2, r7
 8007270:	9005      	str	r0, [sp, #20]
 8007272:	4631      	mov	r1, r6
 8007274:	4620      	mov	r0, r4
 8007276:	f000 fc71 	bl	8007b5c <__mdiff>
 800727a:	68c2      	ldr	r2, [r0, #12]
 800727c:	4605      	mov	r5, r0
 800727e:	bb02      	cbnz	r2, 80072c2 <_dtoa_r+0xa7a>
 8007280:	4601      	mov	r1, r0
 8007282:	4650      	mov	r0, sl
 8007284:	f000 fc4e 	bl	8007b24 <__mcmp>
 8007288:	4602      	mov	r2, r0
 800728a:	4629      	mov	r1, r5
 800728c:	4620      	mov	r0, r4
 800728e:	9209      	str	r2, [sp, #36]	; 0x24
 8007290:	f000 fa0c 	bl	80076ac <_Bfree>
 8007294:	9b07      	ldr	r3, [sp, #28]
 8007296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007298:	9d04      	ldr	r5, [sp, #16]
 800729a:	ea43 0102 	orr.w	r1, r3, r2
 800729e:	9b06      	ldr	r3, [sp, #24]
 80072a0:	4319      	orrs	r1, r3
 80072a2:	d110      	bne.n	80072c6 <_dtoa_r+0xa7e>
 80072a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072a8:	d029      	beq.n	80072fe <_dtoa_r+0xab6>
 80072aa:	9b05      	ldr	r3, [sp, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dd02      	ble.n	80072b6 <_dtoa_r+0xa6e>
 80072b0:	9b02      	ldr	r3, [sp, #8]
 80072b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	f883 9000 	strb.w	r9, [r3]
 80072bc:	e774      	b.n	80071a8 <_dtoa_r+0x960>
 80072be:	4638      	mov	r0, r7
 80072c0:	e7ba      	b.n	8007238 <_dtoa_r+0x9f0>
 80072c2:	2201      	movs	r2, #1
 80072c4:	e7e1      	b.n	800728a <_dtoa_r+0xa42>
 80072c6:	9b05      	ldr	r3, [sp, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	db04      	blt.n	80072d6 <_dtoa_r+0xa8e>
 80072cc:	9907      	ldr	r1, [sp, #28]
 80072ce:	430b      	orrs	r3, r1
 80072d0:	9906      	ldr	r1, [sp, #24]
 80072d2:	430b      	orrs	r3, r1
 80072d4:	d120      	bne.n	8007318 <_dtoa_r+0xad0>
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	dded      	ble.n	80072b6 <_dtoa_r+0xa6e>
 80072da:	4651      	mov	r1, sl
 80072dc:	2201      	movs	r2, #1
 80072de:	4620      	mov	r0, r4
 80072e0:	f000 fbb4 	bl	8007a4c <__lshift>
 80072e4:	4631      	mov	r1, r6
 80072e6:	4682      	mov	sl, r0
 80072e8:	f000 fc1c 	bl	8007b24 <__mcmp>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	dc03      	bgt.n	80072f8 <_dtoa_r+0xab0>
 80072f0:	d1e1      	bne.n	80072b6 <_dtoa_r+0xa6e>
 80072f2:	f019 0f01 	tst.w	r9, #1
 80072f6:	d0de      	beq.n	80072b6 <_dtoa_r+0xa6e>
 80072f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072fc:	d1d8      	bne.n	80072b0 <_dtoa_r+0xa68>
 80072fe:	9a01      	ldr	r2, [sp, #4]
 8007300:	2339      	movs	r3, #57	; 0x39
 8007302:	7013      	strb	r3, [r2, #0]
 8007304:	462b      	mov	r3, r5
 8007306:	461d      	mov	r5, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800730e:	2a39      	cmp	r2, #57	; 0x39
 8007310:	d06c      	beq.n	80073ec <_dtoa_r+0xba4>
 8007312:	3201      	adds	r2, #1
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e747      	b.n	80071a8 <_dtoa_r+0x960>
 8007318:	2a00      	cmp	r2, #0
 800731a:	dd07      	ble.n	800732c <_dtoa_r+0xae4>
 800731c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007320:	d0ed      	beq.n	80072fe <_dtoa_r+0xab6>
 8007322:	9a01      	ldr	r2, [sp, #4]
 8007324:	f109 0301 	add.w	r3, r9, #1
 8007328:	7013      	strb	r3, [r2, #0]
 800732a:	e73d      	b.n	80071a8 <_dtoa_r+0x960>
 800732c:	9b04      	ldr	r3, [sp, #16]
 800732e:	9a08      	ldr	r2, [sp, #32]
 8007330:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007334:	4293      	cmp	r3, r2
 8007336:	d043      	beq.n	80073c0 <_dtoa_r+0xb78>
 8007338:	4651      	mov	r1, sl
 800733a:	2300      	movs	r3, #0
 800733c:	220a      	movs	r2, #10
 800733e:	4620      	mov	r0, r4
 8007340:	f000 f9d6 	bl	80076f0 <__multadd>
 8007344:	45b8      	cmp	r8, r7
 8007346:	4682      	mov	sl, r0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	f04f 020a 	mov.w	r2, #10
 8007350:	4641      	mov	r1, r8
 8007352:	4620      	mov	r0, r4
 8007354:	d107      	bne.n	8007366 <_dtoa_r+0xb1e>
 8007356:	f000 f9cb 	bl	80076f0 <__multadd>
 800735a:	4680      	mov	r8, r0
 800735c:	4607      	mov	r7, r0
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	3301      	adds	r3, #1
 8007362:	9304      	str	r3, [sp, #16]
 8007364:	e775      	b.n	8007252 <_dtoa_r+0xa0a>
 8007366:	f000 f9c3 	bl	80076f0 <__multadd>
 800736a:	4639      	mov	r1, r7
 800736c:	4680      	mov	r8, r0
 800736e:	2300      	movs	r3, #0
 8007370:	220a      	movs	r2, #10
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f9bc 	bl	80076f0 <__multadd>
 8007378:	4607      	mov	r7, r0
 800737a:	e7f0      	b.n	800735e <_dtoa_r+0xb16>
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	9d00      	ldr	r5, [sp, #0]
 8007382:	4631      	mov	r1, r6
 8007384:	4650      	mov	r0, sl
 8007386:	f7ff f9d7 	bl	8006738 <quorem>
 800738a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800738e:	9b00      	ldr	r3, [sp, #0]
 8007390:	f805 9b01 	strb.w	r9, [r5], #1
 8007394:	1aea      	subs	r2, r5, r3
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	4293      	cmp	r3, r2
 800739a:	dd07      	ble.n	80073ac <_dtoa_r+0xb64>
 800739c:	4651      	mov	r1, sl
 800739e:	2300      	movs	r3, #0
 80073a0:	220a      	movs	r2, #10
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 f9a4 	bl	80076f0 <__multadd>
 80073a8:	4682      	mov	sl, r0
 80073aa:	e7ea      	b.n	8007382 <_dtoa_r+0xb3a>
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bfc8      	it	gt
 80073b2:	461d      	movgt	r5, r3
 80073b4:	9b00      	ldr	r3, [sp, #0]
 80073b6:	bfd8      	it	le
 80073b8:	2501      	movle	r5, #1
 80073ba:	441d      	add	r5, r3
 80073bc:	f04f 0800 	mov.w	r8, #0
 80073c0:	4651      	mov	r1, sl
 80073c2:	2201      	movs	r2, #1
 80073c4:	4620      	mov	r0, r4
 80073c6:	f000 fb41 	bl	8007a4c <__lshift>
 80073ca:	4631      	mov	r1, r6
 80073cc:	4682      	mov	sl, r0
 80073ce:	f000 fba9 	bl	8007b24 <__mcmp>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	dc96      	bgt.n	8007304 <_dtoa_r+0xabc>
 80073d6:	d102      	bne.n	80073de <_dtoa_r+0xb96>
 80073d8:	f019 0f01 	tst.w	r9, #1
 80073dc:	d192      	bne.n	8007304 <_dtoa_r+0xabc>
 80073de:	462b      	mov	r3, r5
 80073e0:	461d      	mov	r5, r3
 80073e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073e6:	2a30      	cmp	r2, #48	; 0x30
 80073e8:	d0fa      	beq.n	80073e0 <_dtoa_r+0xb98>
 80073ea:	e6dd      	b.n	80071a8 <_dtoa_r+0x960>
 80073ec:	9a00      	ldr	r2, [sp, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d189      	bne.n	8007306 <_dtoa_r+0xabe>
 80073f2:	f10b 0b01 	add.w	fp, fp, #1
 80073f6:	2331      	movs	r3, #49	; 0x31
 80073f8:	e796      	b.n	8007328 <_dtoa_r+0xae0>
 80073fa:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <_dtoa_r+0xbdc>)
 80073fc:	f7ff ba99 	b.w	8006932 <_dtoa_r+0xea>
 8007400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007402:	2b00      	cmp	r3, #0
 8007404:	f47f aa6d 	bne.w	80068e2 <_dtoa_r+0x9a>
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <_dtoa_r+0xbe0>)
 800740a:	f7ff ba92 	b.w	8006932 <_dtoa_r+0xea>
 800740e:	9b01      	ldr	r3, [sp, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	dcb5      	bgt.n	8007380 <_dtoa_r+0xb38>
 8007414:	9b07      	ldr	r3, [sp, #28]
 8007416:	2b02      	cmp	r3, #2
 8007418:	f73f aeb1 	bgt.w	800717e <_dtoa_r+0x936>
 800741c:	e7b0      	b.n	8007380 <_dtoa_r+0xb38>
 800741e:	bf00      	nop
 8007420:	08008978 	.word	0x08008978
 8007424:	080088d8 	.word	0x080088d8
 8007428:	080088fc 	.word	0x080088fc

0800742c <_free_r>:
 800742c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800742e:	2900      	cmp	r1, #0
 8007430:	d044      	beq.n	80074bc <_free_r+0x90>
 8007432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007436:	9001      	str	r0, [sp, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	f1a1 0404 	sub.w	r4, r1, #4
 800743e:	bfb8      	it	lt
 8007440:	18e4      	addlt	r4, r4, r3
 8007442:	f000 f8e7 	bl	8007614 <__malloc_lock>
 8007446:	4a1e      	ldr	r2, [pc, #120]	; (80074c0 <_free_r+0x94>)
 8007448:	9801      	ldr	r0, [sp, #4]
 800744a:	6813      	ldr	r3, [r2, #0]
 800744c:	b933      	cbnz	r3, 800745c <_free_r+0x30>
 800744e:	6063      	str	r3, [r4, #4]
 8007450:	6014      	str	r4, [r2, #0]
 8007452:	b003      	add	sp, #12
 8007454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007458:	f000 b8e2 	b.w	8007620 <__malloc_unlock>
 800745c:	42a3      	cmp	r3, r4
 800745e:	d908      	bls.n	8007472 <_free_r+0x46>
 8007460:	6825      	ldr	r5, [r4, #0]
 8007462:	1961      	adds	r1, r4, r5
 8007464:	428b      	cmp	r3, r1
 8007466:	bf01      	itttt	eq
 8007468:	6819      	ldreq	r1, [r3, #0]
 800746a:	685b      	ldreq	r3, [r3, #4]
 800746c:	1949      	addeq	r1, r1, r5
 800746e:	6021      	streq	r1, [r4, #0]
 8007470:	e7ed      	b.n	800744e <_free_r+0x22>
 8007472:	461a      	mov	r2, r3
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	b10b      	cbz	r3, 800747c <_free_r+0x50>
 8007478:	42a3      	cmp	r3, r4
 800747a:	d9fa      	bls.n	8007472 <_free_r+0x46>
 800747c:	6811      	ldr	r1, [r2, #0]
 800747e:	1855      	adds	r5, r2, r1
 8007480:	42a5      	cmp	r5, r4
 8007482:	d10b      	bne.n	800749c <_free_r+0x70>
 8007484:	6824      	ldr	r4, [r4, #0]
 8007486:	4421      	add	r1, r4
 8007488:	1854      	adds	r4, r2, r1
 800748a:	42a3      	cmp	r3, r4
 800748c:	6011      	str	r1, [r2, #0]
 800748e:	d1e0      	bne.n	8007452 <_free_r+0x26>
 8007490:	681c      	ldr	r4, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	6053      	str	r3, [r2, #4]
 8007496:	440c      	add	r4, r1
 8007498:	6014      	str	r4, [r2, #0]
 800749a:	e7da      	b.n	8007452 <_free_r+0x26>
 800749c:	d902      	bls.n	80074a4 <_free_r+0x78>
 800749e:	230c      	movs	r3, #12
 80074a0:	6003      	str	r3, [r0, #0]
 80074a2:	e7d6      	b.n	8007452 <_free_r+0x26>
 80074a4:	6825      	ldr	r5, [r4, #0]
 80074a6:	1961      	adds	r1, r4, r5
 80074a8:	428b      	cmp	r3, r1
 80074aa:	bf04      	itt	eq
 80074ac:	6819      	ldreq	r1, [r3, #0]
 80074ae:	685b      	ldreq	r3, [r3, #4]
 80074b0:	6063      	str	r3, [r4, #4]
 80074b2:	bf04      	itt	eq
 80074b4:	1949      	addeq	r1, r1, r5
 80074b6:	6021      	streq	r1, [r4, #0]
 80074b8:	6054      	str	r4, [r2, #4]
 80074ba:	e7ca      	b.n	8007452 <_free_r+0x26>
 80074bc:	b003      	add	sp, #12
 80074be:	bd30      	pop	{r4, r5, pc}
 80074c0:	20004494 	.word	0x20004494

080074c4 <malloc>:
 80074c4:	4b02      	ldr	r3, [pc, #8]	; (80074d0 <malloc+0xc>)
 80074c6:	4601      	mov	r1, r0
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f000 b823 	b.w	8007514 <_malloc_r>
 80074ce:	bf00      	nop
 80074d0:	20000068 	.word	0x20000068

080074d4 <sbrk_aligned>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	4e0e      	ldr	r6, [pc, #56]	; (8007510 <sbrk_aligned+0x3c>)
 80074d8:	460c      	mov	r4, r1
 80074da:	6831      	ldr	r1, [r6, #0]
 80074dc:	4605      	mov	r5, r0
 80074de:	b911      	cbnz	r1, 80074e6 <sbrk_aligned+0x12>
 80074e0:	f000 fe40 	bl	8008164 <_sbrk_r>
 80074e4:	6030      	str	r0, [r6, #0]
 80074e6:	4621      	mov	r1, r4
 80074e8:	4628      	mov	r0, r5
 80074ea:	f000 fe3b 	bl	8008164 <_sbrk_r>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	d00a      	beq.n	8007508 <sbrk_aligned+0x34>
 80074f2:	1cc4      	adds	r4, r0, #3
 80074f4:	f024 0403 	bic.w	r4, r4, #3
 80074f8:	42a0      	cmp	r0, r4
 80074fa:	d007      	beq.n	800750c <sbrk_aligned+0x38>
 80074fc:	1a21      	subs	r1, r4, r0
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 fe30 	bl	8008164 <_sbrk_r>
 8007504:	3001      	adds	r0, #1
 8007506:	d101      	bne.n	800750c <sbrk_aligned+0x38>
 8007508:	f04f 34ff 	mov.w	r4, #4294967295
 800750c:	4620      	mov	r0, r4
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	20004498 	.word	0x20004498

08007514 <_malloc_r>:
 8007514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007518:	1ccd      	adds	r5, r1, #3
 800751a:	f025 0503 	bic.w	r5, r5, #3
 800751e:	3508      	adds	r5, #8
 8007520:	2d0c      	cmp	r5, #12
 8007522:	bf38      	it	cc
 8007524:	250c      	movcc	r5, #12
 8007526:	2d00      	cmp	r5, #0
 8007528:	4607      	mov	r7, r0
 800752a:	db01      	blt.n	8007530 <_malloc_r+0x1c>
 800752c:	42a9      	cmp	r1, r5
 800752e:	d905      	bls.n	800753c <_malloc_r+0x28>
 8007530:	230c      	movs	r3, #12
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	2600      	movs	r6, #0
 8007536:	4630      	mov	r0, r6
 8007538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007610 <_malloc_r+0xfc>
 8007540:	f000 f868 	bl	8007614 <__malloc_lock>
 8007544:	f8d8 3000 	ldr.w	r3, [r8]
 8007548:	461c      	mov	r4, r3
 800754a:	bb5c      	cbnz	r4, 80075a4 <_malloc_r+0x90>
 800754c:	4629      	mov	r1, r5
 800754e:	4638      	mov	r0, r7
 8007550:	f7ff ffc0 	bl	80074d4 <sbrk_aligned>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	4604      	mov	r4, r0
 8007558:	d155      	bne.n	8007606 <_malloc_r+0xf2>
 800755a:	f8d8 4000 	ldr.w	r4, [r8]
 800755e:	4626      	mov	r6, r4
 8007560:	2e00      	cmp	r6, #0
 8007562:	d145      	bne.n	80075f0 <_malloc_r+0xdc>
 8007564:	2c00      	cmp	r4, #0
 8007566:	d048      	beq.n	80075fa <_malloc_r+0xe6>
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	4631      	mov	r1, r6
 800756c:	4638      	mov	r0, r7
 800756e:	eb04 0903 	add.w	r9, r4, r3
 8007572:	f000 fdf7 	bl	8008164 <_sbrk_r>
 8007576:	4581      	cmp	r9, r0
 8007578:	d13f      	bne.n	80075fa <_malloc_r+0xe6>
 800757a:	6821      	ldr	r1, [r4, #0]
 800757c:	1a6d      	subs	r5, r5, r1
 800757e:	4629      	mov	r1, r5
 8007580:	4638      	mov	r0, r7
 8007582:	f7ff ffa7 	bl	80074d4 <sbrk_aligned>
 8007586:	3001      	adds	r0, #1
 8007588:	d037      	beq.n	80075fa <_malloc_r+0xe6>
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	442b      	add	r3, r5
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	f8d8 3000 	ldr.w	r3, [r8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d038      	beq.n	800760a <_malloc_r+0xf6>
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	42a2      	cmp	r2, r4
 800759c:	d12b      	bne.n	80075f6 <_malloc_r+0xe2>
 800759e:	2200      	movs	r2, #0
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	e00f      	b.n	80075c4 <_malloc_r+0xb0>
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	1b52      	subs	r2, r2, r5
 80075a8:	d41f      	bmi.n	80075ea <_malloc_r+0xd6>
 80075aa:	2a0b      	cmp	r2, #11
 80075ac:	d917      	bls.n	80075de <_malloc_r+0xca>
 80075ae:	1961      	adds	r1, r4, r5
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	6025      	str	r5, [r4, #0]
 80075b4:	bf18      	it	ne
 80075b6:	6059      	strne	r1, [r3, #4]
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	bf08      	it	eq
 80075bc:	f8c8 1000 	streq.w	r1, [r8]
 80075c0:	5162      	str	r2, [r4, r5]
 80075c2:	604b      	str	r3, [r1, #4]
 80075c4:	4638      	mov	r0, r7
 80075c6:	f104 060b 	add.w	r6, r4, #11
 80075ca:	f000 f829 	bl	8007620 <__malloc_unlock>
 80075ce:	f026 0607 	bic.w	r6, r6, #7
 80075d2:	1d23      	adds	r3, r4, #4
 80075d4:	1af2      	subs	r2, r6, r3
 80075d6:	d0ae      	beq.n	8007536 <_malloc_r+0x22>
 80075d8:	1b9b      	subs	r3, r3, r6
 80075da:	50a3      	str	r3, [r4, r2]
 80075dc:	e7ab      	b.n	8007536 <_malloc_r+0x22>
 80075de:	42a3      	cmp	r3, r4
 80075e0:	6862      	ldr	r2, [r4, #4]
 80075e2:	d1dd      	bne.n	80075a0 <_malloc_r+0x8c>
 80075e4:	f8c8 2000 	str.w	r2, [r8]
 80075e8:	e7ec      	b.n	80075c4 <_malloc_r+0xb0>
 80075ea:	4623      	mov	r3, r4
 80075ec:	6864      	ldr	r4, [r4, #4]
 80075ee:	e7ac      	b.n	800754a <_malloc_r+0x36>
 80075f0:	4634      	mov	r4, r6
 80075f2:	6876      	ldr	r6, [r6, #4]
 80075f4:	e7b4      	b.n	8007560 <_malloc_r+0x4c>
 80075f6:	4613      	mov	r3, r2
 80075f8:	e7cc      	b.n	8007594 <_malloc_r+0x80>
 80075fa:	230c      	movs	r3, #12
 80075fc:	603b      	str	r3, [r7, #0]
 80075fe:	4638      	mov	r0, r7
 8007600:	f000 f80e 	bl	8007620 <__malloc_unlock>
 8007604:	e797      	b.n	8007536 <_malloc_r+0x22>
 8007606:	6025      	str	r5, [r4, #0]
 8007608:	e7dc      	b.n	80075c4 <_malloc_r+0xb0>
 800760a:	605b      	str	r3, [r3, #4]
 800760c:	deff      	udf	#255	; 0xff
 800760e:	bf00      	nop
 8007610:	20004494 	.word	0x20004494

08007614 <__malloc_lock>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__malloc_lock+0x8>)
 8007616:	f7ff b87f 	b.w	8006718 <__retarget_lock_acquire_recursive>
 800761a:	bf00      	nop
 800761c:	20004490 	.word	0x20004490

08007620 <__malloc_unlock>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__malloc_unlock+0x8>)
 8007622:	f7ff b87a 	b.w	800671a <__retarget_lock_release_recursive>
 8007626:	bf00      	nop
 8007628:	20004490 	.word	0x20004490

0800762c <_Balloc>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	69c6      	ldr	r6, [r0, #28]
 8007630:	4604      	mov	r4, r0
 8007632:	460d      	mov	r5, r1
 8007634:	b976      	cbnz	r6, 8007654 <_Balloc+0x28>
 8007636:	2010      	movs	r0, #16
 8007638:	f7ff ff44 	bl	80074c4 <malloc>
 800763c:	4602      	mov	r2, r0
 800763e:	61e0      	str	r0, [r4, #28]
 8007640:	b920      	cbnz	r0, 800764c <_Balloc+0x20>
 8007642:	4b18      	ldr	r3, [pc, #96]	; (80076a4 <_Balloc+0x78>)
 8007644:	4818      	ldr	r0, [pc, #96]	; (80076a8 <_Balloc+0x7c>)
 8007646:	216b      	movs	r1, #107	; 0x6b
 8007648:	f000 fd9c 	bl	8008184 <__assert_func>
 800764c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007650:	6006      	str	r6, [r0, #0]
 8007652:	60c6      	str	r6, [r0, #12]
 8007654:	69e6      	ldr	r6, [r4, #28]
 8007656:	68f3      	ldr	r3, [r6, #12]
 8007658:	b183      	cbz	r3, 800767c <_Balloc+0x50>
 800765a:	69e3      	ldr	r3, [r4, #28]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007662:	b9b8      	cbnz	r0, 8007694 <_Balloc+0x68>
 8007664:	2101      	movs	r1, #1
 8007666:	fa01 f605 	lsl.w	r6, r1, r5
 800766a:	1d72      	adds	r2, r6, #5
 800766c:	0092      	lsls	r2, r2, #2
 800766e:	4620      	mov	r0, r4
 8007670:	f000 fda6 	bl	80081c0 <_calloc_r>
 8007674:	b160      	cbz	r0, 8007690 <_Balloc+0x64>
 8007676:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800767a:	e00e      	b.n	800769a <_Balloc+0x6e>
 800767c:	2221      	movs	r2, #33	; 0x21
 800767e:	2104      	movs	r1, #4
 8007680:	4620      	mov	r0, r4
 8007682:	f000 fd9d 	bl	80081c0 <_calloc_r>
 8007686:	69e3      	ldr	r3, [r4, #28]
 8007688:	60f0      	str	r0, [r6, #12]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e4      	bne.n	800765a <_Balloc+0x2e>
 8007690:	2000      	movs	r0, #0
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	6802      	ldr	r2, [r0, #0]
 8007696:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800769a:	2300      	movs	r3, #0
 800769c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076a0:	e7f7      	b.n	8007692 <_Balloc+0x66>
 80076a2:	bf00      	nop
 80076a4:	08008909 	.word	0x08008909
 80076a8:	08008989 	.word	0x08008989

080076ac <_Bfree>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	69c6      	ldr	r6, [r0, #28]
 80076b0:	4605      	mov	r5, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	b976      	cbnz	r6, 80076d4 <_Bfree+0x28>
 80076b6:	2010      	movs	r0, #16
 80076b8:	f7ff ff04 	bl	80074c4 <malloc>
 80076bc:	4602      	mov	r2, r0
 80076be:	61e8      	str	r0, [r5, #28]
 80076c0:	b920      	cbnz	r0, 80076cc <_Bfree+0x20>
 80076c2:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <_Bfree+0x3c>)
 80076c4:	4809      	ldr	r0, [pc, #36]	; (80076ec <_Bfree+0x40>)
 80076c6:	218f      	movs	r1, #143	; 0x8f
 80076c8:	f000 fd5c 	bl	8008184 <__assert_func>
 80076cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076d0:	6006      	str	r6, [r0, #0]
 80076d2:	60c6      	str	r6, [r0, #12]
 80076d4:	b13c      	cbz	r4, 80076e6 <_Bfree+0x3a>
 80076d6:	69eb      	ldr	r3, [r5, #28]
 80076d8:	6862      	ldr	r2, [r4, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076e0:	6021      	str	r1, [r4, #0]
 80076e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	08008909 	.word	0x08008909
 80076ec:	08008989 	.word	0x08008989

080076f0 <__multadd>:
 80076f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f4:	690d      	ldr	r5, [r1, #16]
 80076f6:	4607      	mov	r7, r0
 80076f8:	460c      	mov	r4, r1
 80076fa:	461e      	mov	r6, r3
 80076fc:	f101 0c14 	add.w	ip, r1, #20
 8007700:	2000      	movs	r0, #0
 8007702:	f8dc 3000 	ldr.w	r3, [ip]
 8007706:	b299      	uxth	r1, r3
 8007708:	fb02 6101 	mla	r1, r2, r1, r6
 800770c:	0c1e      	lsrs	r6, r3, #16
 800770e:	0c0b      	lsrs	r3, r1, #16
 8007710:	fb02 3306 	mla	r3, r2, r6, r3
 8007714:	b289      	uxth	r1, r1
 8007716:	3001      	adds	r0, #1
 8007718:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800771c:	4285      	cmp	r5, r0
 800771e:	f84c 1b04 	str.w	r1, [ip], #4
 8007722:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007726:	dcec      	bgt.n	8007702 <__multadd+0x12>
 8007728:	b30e      	cbz	r6, 800776e <__multadd+0x7e>
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	42ab      	cmp	r3, r5
 800772e:	dc19      	bgt.n	8007764 <__multadd+0x74>
 8007730:	6861      	ldr	r1, [r4, #4]
 8007732:	4638      	mov	r0, r7
 8007734:	3101      	adds	r1, #1
 8007736:	f7ff ff79 	bl	800762c <_Balloc>
 800773a:	4680      	mov	r8, r0
 800773c:	b928      	cbnz	r0, 800774a <__multadd+0x5a>
 800773e:	4602      	mov	r2, r0
 8007740:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <__multadd+0x84>)
 8007742:	480d      	ldr	r0, [pc, #52]	; (8007778 <__multadd+0x88>)
 8007744:	21ba      	movs	r1, #186	; 0xba
 8007746:	f000 fd1d 	bl	8008184 <__assert_func>
 800774a:	6922      	ldr	r2, [r4, #16]
 800774c:	3202      	adds	r2, #2
 800774e:	f104 010c 	add.w	r1, r4, #12
 8007752:	0092      	lsls	r2, r2, #2
 8007754:	300c      	adds	r0, #12
 8007756:	f7fe ffe1 	bl	800671c <memcpy>
 800775a:	4621      	mov	r1, r4
 800775c:	4638      	mov	r0, r7
 800775e:	f7ff ffa5 	bl	80076ac <_Bfree>
 8007762:	4644      	mov	r4, r8
 8007764:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007768:	3501      	adds	r5, #1
 800776a:	615e      	str	r6, [r3, #20]
 800776c:	6125      	str	r5, [r4, #16]
 800776e:	4620      	mov	r0, r4
 8007770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007774:	08008978 	.word	0x08008978
 8007778:	08008989 	.word	0x08008989

0800777c <__hi0bits>:
 800777c:	0c03      	lsrs	r3, r0, #16
 800777e:	041b      	lsls	r3, r3, #16
 8007780:	b9d3      	cbnz	r3, 80077b8 <__hi0bits+0x3c>
 8007782:	0400      	lsls	r0, r0, #16
 8007784:	2310      	movs	r3, #16
 8007786:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800778a:	bf04      	itt	eq
 800778c:	0200      	lsleq	r0, r0, #8
 800778e:	3308      	addeq	r3, #8
 8007790:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007794:	bf04      	itt	eq
 8007796:	0100      	lsleq	r0, r0, #4
 8007798:	3304      	addeq	r3, #4
 800779a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800779e:	bf04      	itt	eq
 80077a0:	0080      	lsleq	r0, r0, #2
 80077a2:	3302      	addeq	r3, #2
 80077a4:	2800      	cmp	r0, #0
 80077a6:	db05      	blt.n	80077b4 <__hi0bits+0x38>
 80077a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80077ac:	f103 0301 	add.w	r3, r3, #1
 80077b0:	bf08      	it	eq
 80077b2:	2320      	moveq	r3, #32
 80077b4:	4618      	mov	r0, r3
 80077b6:	4770      	bx	lr
 80077b8:	2300      	movs	r3, #0
 80077ba:	e7e4      	b.n	8007786 <__hi0bits+0xa>

080077bc <__lo0bits>:
 80077bc:	6803      	ldr	r3, [r0, #0]
 80077be:	f013 0207 	ands.w	r2, r3, #7
 80077c2:	d00c      	beq.n	80077de <__lo0bits+0x22>
 80077c4:	07d9      	lsls	r1, r3, #31
 80077c6:	d422      	bmi.n	800780e <__lo0bits+0x52>
 80077c8:	079a      	lsls	r2, r3, #30
 80077ca:	bf49      	itett	mi
 80077cc:	085b      	lsrmi	r3, r3, #1
 80077ce:	089b      	lsrpl	r3, r3, #2
 80077d0:	6003      	strmi	r3, [r0, #0]
 80077d2:	2201      	movmi	r2, #1
 80077d4:	bf5c      	itt	pl
 80077d6:	6003      	strpl	r3, [r0, #0]
 80077d8:	2202      	movpl	r2, #2
 80077da:	4610      	mov	r0, r2
 80077dc:	4770      	bx	lr
 80077de:	b299      	uxth	r1, r3
 80077e0:	b909      	cbnz	r1, 80077e6 <__lo0bits+0x2a>
 80077e2:	0c1b      	lsrs	r3, r3, #16
 80077e4:	2210      	movs	r2, #16
 80077e6:	b2d9      	uxtb	r1, r3
 80077e8:	b909      	cbnz	r1, 80077ee <__lo0bits+0x32>
 80077ea:	3208      	adds	r2, #8
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	0719      	lsls	r1, r3, #28
 80077f0:	bf04      	itt	eq
 80077f2:	091b      	lsreq	r3, r3, #4
 80077f4:	3204      	addeq	r2, #4
 80077f6:	0799      	lsls	r1, r3, #30
 80077f8:	bf04      	itt	eq
 80077fa:	089b      	lsreq	r3, r3, #2
 80077fc:	3202      	addeq	r2, #2
 80077fe:	07d9      	lsls	r1, r3, #31
 8007800:	d403      	bmi.n	800780a <__lo0bits+0x4e>
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	f102 0201 	add.w	r2, r2, #1
 8007808:	d003      	beq.n	8007812 <__lo0bits+0x56>
 800780a:	6003      	str	r3, [r0, #0]
 800780c:	e7e5      	b.n	80077da <__lo0bits+0x1e>
 800780e:	2200      	movs	r2, #0
 8007810:	e7e3      	b.n	80077da <__lo0bits+0x1e>
 8007812:	2220      	movs	r2, #32
 8007814:	e7e1      	b.n	80077da <__lo0bits+0x1e>
	...

08007818 <__i2b>:
 8007818:	b510      	push	{r4, lr}
 800781a:	460c      	mov	r4, r1
 800781c:	2101      	movs	r1, #1
 800781e:	f7ff ff05 	bl	800762c <_Balloc>
 8007822:	4602      	mov	r2, r0
 8007824:	b928      	cbnz	r0, 8007832 <__i2b+0x1a>
 8007826:	4b05      	ldr	r3, [pc, #20]	; (800783c <__i2b+0x24>)
 8007828:	4805      	ldr	r0, [pc, #20]	; (8007840 <__i2b+0x28>)
 800782a:	f240 1145 	movw	r1, #325	; 0x145
 800782e:	f000 fca9 	bl	8008184 <__assert_func>
 8007832:	2301      	movs	r3, #1
 8007834:	6144      	str	r4, [r0, #20]
 8007836:	6103      	str	r3, [r0, #16]
 8007838:	bd10      	pop	{r4, pc}
 800783a:	bf00      	nop
 800783c:	08008978 	.word	0x08008978
 8007840:	08008989 	.word	0x08008989

08007844 <__multiply>:
 8007844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007848:	4691      	mov	r9, r2
 800784a:	690a      	ldr	r2, [r1, #16]
 800784c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007850:	429a      	cmp	r2, r3
 8007852:	bfb8      	it	lt
 8007854:	460b      	movlt	r3, r1
 8007856:	460c      	mov	r4, r1
 8007858:	bfbc      	itt	lt
 800785a:	464c      	movlt	r4, r9
 800785c:	4699      	movlt	r9, r3
 800785e:	6927      	ldr	r7, [r4, #16]
 8007860:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007864:	68a3      	ldr	r3, [r4, #8]
 8007866:	6861      	ldr	r1, [r4, #4]
 8007868:	eb07 060a 	add.w	r6, r7, sl
 800786c:	42b3      	cmp	r3, r6
 800786e:	b085      	sub	sp, #20
 8007870:	bfb8      	it	lt
 8007872:	3101      	addlt	r1, #1
 8007874:	f7ff feda 	bl	800762c <_Balloc>
 8007878:	b930      	cbnz	r0, 8007888 <__multiply+0x44>
 800787a:	4602      	mov	r2, r0
 800787c:	4b44      	ldr	r3, [pc, #272]	; (8007990 <__multiply+0x14c>)
 800787e:	4845      	ldr	r0, [pc, #276]	; (8007994 <__multiply+0x150>)
 8007880:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007884:	f000 fc7e 	bl	8008184 <__assert_func>
 8007888:	f100 0514 	add.w	r5, r0, #20
 800788c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007890:	462b      	mov	r3, r5
 8007892:	2200      	movs	r2, #0
 8007894:	4543      	cmp	r3, r8
 8007896:	d321      	bcc.n	80078dc <__multiply+0x98>
 8007898:	f104 0314 	add.w	r3, r4, #20
 800789c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80078a0:	f109 0314 	add.w	r3, r9, #20
 80078a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80078a8:	9202      	str	r2, [sp, #8]
 80078aa:	1b3a      	subs	r2, r7, r4
 80078ac:	3a15      	subs	r2, #21
 80078ae:	f022 0203 	bic.w	r2, r2, #3
 80078b2:	3204      	adds	r2, #4
 80078b4:	f104 0115 	add.w	r1, r4, #21
 80078b8:	428f      	cmp	r7, r1
 80078ba:	bf38      	it	cc
 80078bc:	2204      	movcc	r2, #4
 80078be:	9201      	str	r2, [sp, #4]
 80078c0:	9a02      	ldr	r2, [sp, #8]
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d80c      	bhi.n	80078e2 <__multiply+0x9e>
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	dd03      	ble.n	80078d4 <__multiply+0x90>
 80078cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d05b      	beq.n	800798c <__multiply+0x148>
 80078d4:	6106      	str	r6, [r0, #16]
 80078d6:	b005      	add	sp, #20
 80078d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078dc:	f843 2b04 	str.w	r2, [r3], #4
 80078e0:	e7d8      	b.n	8007894 <__multiply+0x50>
 80078e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80078e6:	f1ba 0f00 	cmp.w	sl, #0
 80078ea:	d024      	beq.n	8007936 <__multiply+0xf2>
 80078ec:	f104 0e14 	add.w	lr, r4, #20
 80078f0:	46a9      	mov	r9, r5
 80078f2:	f04f 0c00 	mov.w	ip, #0
 80078f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80078fa:	f8d9 1000 	ldr.w	r1, [r9]
 80078fe:	fa1f fb82 	uxth.w	fp, r2
 8007902:	b289      	uxth	r1, r1
 8007904:	fb0a 110b 	mla	r1, sl, fp, r1
 8007908:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800790c:	f8d9 2000 	ldr.w	r2, [r9]
 8007910:	4461      	add	r1, ip
 8007912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007916:	fb0a c20b 	mla	r2, sl, fp, ip
 800791a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800791e:	b289      	uxth	r1, r1
 8007920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007924:	4577      	cmp	r7, lr
 8007926:	f849 1b04 	str.w	r1, [r9], #4
 800792a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800792e:	d8e2      	bhi.n	80078f6 <__multiply+0xb2>
 8007930:	9a01      	ldr	r2, [sp, #4]
 8007932:	f845 c002 	str.w	ip, [r5, r2]
 8007936:	9a03      	ldr	r2, [sp, #12]
 8007938:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800793c:	3304      	adds	r3, #4
 800793e:	f1b9 0f00 	cmp.w	r9, #0
 8007942:	d021      	beq.n	8007988 <__multiply+0x144>
 8007944:	6829      	ldr	r1, [r5, #0]
 8007946:	f104 0c14 	add.w	ip, r4, #20
 800794a:	46ae      	mov	lr, r5
 800794c:	f04f 0a00 	mov.w	sl, #0
 8007950:	f8bc b000 	ldrh.w	fp, [ip]
 8007954:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007958:	fb09 220b 	mla	r2, r9, fp, r2
 800795c:	4452      	add	r2, sl
 800795e:	b289      	uxth	r1, r1
 8007960:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007964:	f84e 1b04 	str.w	r1, [lr], #4
 8007968:	f85c 1b04 	ldr.w	r1, [ip], #4
 800796c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007970:	f8be 1000 	ldrh.w	r1, [lr]
 8007974:	fb09 110a 	mla	r1, r9, sl, r1
 8007978:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800797c:	4567      	cmp	r7, ip
 800797e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007982:	d8e5      	bhi.n	8007950 <__multiply+0x10c>
 8007984:	9a01      	ldr	r2, [sp, #4]
 8007986:	50a9      	str	r1, [r5, r2]
 8007988:	3504      	adds	r5, #4
 800798a:	e799      	b.n	80078c0 <__multiply+0x7c>
 800798c:	3e01      	subs	r6, #1
 800798e:	e79b      	b.n	80078c8 <__multiply+0x84>
 8007990:	08008978 	.word	0x08008978
 8007994:	08008989 	.word	0x08008989

08007998 <__pow5mult>:
 8007998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800799c:	4615      	mov	r5, r2
 800799e:	f012 0203 	ands.w	r2, r2, #3
 80079a2:	4606      	mov	r6, r0
 80079a4:	460f      	mov	r7, r1
 80079a6:	d007      	beq.n	80079b8 <__pow5mult+0x20>
 80079a8:	4c25      	ldr	r4, [pc, #148]	; (8007a40 <__pow5mult+0xa8>)
 80079aa:	3a01      	subs	r2, #1
 80079ac:	2300      	movs	r3, #0
 80079ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079b2:	f7ff fe9d 	bl	80076f0 <__multadd>
 80079b6:	4607      	mov	r7, r0
 80079b8:	10ad      	asrs	r5, r5, #2
 80079ba:	d03d      	beq.n	8007a38 <__pow5mult+0xa0>
 80079bc:	69f4      	ldr	r4, [r6, #28]
 80079be:	b97c      	cbnz	r4, 80079e0 <__pow5mult+0x48>
 80079c0:	2010      	movs	r0, #16
 80079c2:	f7ff fd7f 	bl	80074c4 <malloc>
 80079c6:	4602      	mov	r2, r0
 80079c8:	61f0      	str	r0, [r6, #28]
 80079ca:	b928      	cbnz	r0, 80079d8 <__pow5mult+0x40>
 80079cc:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <__pow5mult+0xac>)
 80079ce:	481e      	ldr	r0, [pc, #120]	; (8007a48 <__pow5mult+0xb0>)
 80079d0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80079d4:	f000 fbd6 	bl	8008184 <__assert_func>
 80079d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079dc:	6004      	str	r4, [r0, #0]
 80079de:	60c4      	str	r4, [r0, #12]
 80079e0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80079e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079e8:	b94c      	cbnz	r4, 80079fe <__pow5mult+0x66>
 80079ea:	f240 2171 	movw	r1, #625	; 0x271
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7ff ff12 	bl	8007818 <__i2b>
 80079f4:	2300      	movs	r3, #0
 80079f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80079fa:	4604      	mov	r4, r0
 80079fc:	6003      	str	r3, [r0, #0]
 80079fe:	f04f 0900 	mov.w	r9, #0
 8007a02:	07eb      	lsls	r3, r5, #31
 8007a04:	d50a      	bpl.n	8007a1c <__pow5mult+0x84>
 8007a06:	4639      	mov	r1, r7
 8007a08:	4622      	mov	r2, r4
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff ff1a 	bl	8007844 <__multiply>
 8007a10:	4639      	mov	r1, r7
 8007a12:	4680      	mov	r8, r0
 8007a14:	4630      	mov	r0, r6
 8007a16:	f7ff fe49 	bl	80076ac <_Bfree>
 8007a1a:	4647      	mov	r7, r8
 8007a1c:	106d      	asrs	r5, r5, #1
 8007a1e:	d00b      	beq.n	8007a38 <__pow5mult+0xa0>
 8007a20:	6820      	ldr	r0, [r4, #0]
 8007a22:	b938      	cbnz	r0, 8007a34 <__pow5mult+0x9c>
 8007a24:	4622      	mov	r2, r4
 8007a26:	4621      	mov	r1, r4
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f7ff ff0b 	bl	8007844 <__multiply>
 8007a2e:	6020      	str	r0, [r4, #0]
 8007a30:	f8c0 9000 	str.w	r9, [r0]
 8007a34:	4604      	mov	r4, r0
 8007a36:	e7e4      	b.n	8007a02 <__pow5mult+0x6a>
 8007a38:	4638      	mov	r0, r7
 8007a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3e:	bf00      	nop
 8007a40:	08008ad8 	.word	0x08008ad8
 8007a44:	08008909 	.word	0x08008909
 8007a48:	08008989 	.word	0x08008989

08007a4c <__lshift>:
 8007a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	460c      	mov	r4, r1
 8007a52:	6849      	ldr	r1, [r1, #4]
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a5a:	68a3      	ldr	r3, [r4, #8]
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	4691      	mov	r9, r2
 8007a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a64:	f108 0601 	add.w	r6, r8, #1
 8007a68:	42b3      	cmp	r3, r6
 8007a6a:	db0b      	blt.n	8007a84 <__lshift+0x38>
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7ff fddd 	bl	800762c <_Balloc>
 8007a72:	4605      	mov	r5, r0
 8007a74:	b948      	cbnz	r0, 8007a8a <__lshift+0x3e>
 8007a76:	4602      	mov	r2, r0
 8007a78:	4b28      	ldr	r3, [pc, #160]	; (8007b1c <__lshift+0xd0>)
 8007a7a:	4829      	ldr	r0, [pc, #164]	; (8007b20 <__lshift+0xd4>)
 8007a7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007a80:	f000 fb80 	bl	8008184 <__assert_func>
 8007a84:	3101      	adds	r1, #1
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	e7ee      	b.n	8007a68 <__lshift+0x1c>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f100 0114 	add.w	r1, r0, #20
 8007a90:	f100 0210 	add.w	r2, r0, #16
 8007a94:	4618      	mov	r0, r3
 8007a96:	4553      	cmp	r3, sl
 8007a98:	db33      	blt.n	8007b02 <__lshift+0xb6>
 8007a9a:	6920      	ldr	r0, [r4, #16]
 8007a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007aa0:	f104 0314 	add.w	r3, r4, #20
 8007aa4:	f019 091f 	ands.w	r9, r9, #31
 8007aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007aac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ab0:	d02b      	beq.n	8007b0a <__lshift+0xbe>
 8007ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ab6:	468a      	mov	sl, r1
 8007ab8:	2200      	movs	r2, #0
 8007aba:	6818      	ldr	r0, [r3, #0]
 8007abc:	fa00 f009 	lsl.w	r0, r0, r9
 8007ac0:	4310      	orrs	r0, r2
 8007ac2:	f84a 0b04 	str.w	r0, [sl], #4
 8007ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aca:	459c      	cmp	ip, r3
 8007acc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ad0:	d8f3      	bhi.n	8007aba <__lshift+0x6e>
 8007ad2:	ebac 0304 	sub.w	r3, ip, r4
 8007ad6:	3b15      	subs	r3, #21
 8007ad8:	f023 0303 	bic.w	r3, r3, #3
 8007adc:	3304      	adds	r3, #4
 8007ade:	f104 0015 	add.w	r0, r4, #21
 8007ae2:	4584      	cmp	ip, r0
 8007ae4:	bf38      	it	cc
 8007ae6:	2304      	movcc	r3, #4
 8007ae8:	50ca      	str	r2, [r1, r3]
 8007aea:	b10a      	cbz	r2, 8007af0 <__lshift+0xa4>
 8007aec:	f108 0602 	add.w	r6, r8, #2
 8007af0:	3e01      	subs	r6, #1
 8007af2:	4638      	mov	r0, r7
 8007af4:	612e      	str	r6, [r5, #16]
 8007af6:	4621      	mov	r1, r4
 8007af8:	f7ff fdd8 	bl	80076ac <_Bfree>
 8007afc:	4628      	mov	r0, r5
 8007afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b02:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b06:	3301      	adds	r3, #1
 8007b08:	e7c5      	b.n	8007a96 <__lshift+0x4a>
 8007b0a:	3904      	subs	r1, #4
 8007b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b10:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b14:	459c      	cmp	ip, r3
 8007b16:	d8f9      	bhi.n	8007b0c <__lshift+0xc0>
 8007b18:	e7ea      	b.n	8007af0 <__lshift+0xa4>
 8007b1a:	bf00      	nop
 8007b1c:	08008978 	.word	0x08008978
 8007b20:	08008989 	.word	0x08008989

08007b24 <__mcmp>:
 8007b24:	b530      	push	{r4, r5, lr}
 8007b26:	6902      	ldr	r2, [r0, #16]
 8007b28:	690c      	ldr	r4, [r1, #16]
 8007b2a:	1b12      	subs	r2, r2, r4
 8007b2c:	d10e      	bne.n	8007b4c <__mcmp+0x28>
 8007b2e:	f100 0314 	add.w	r3, r0, #20
 8007b32:	3114      	adds	r1, #20
 8007b34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b44:	42a5      	cmp	r5, r4
 8007b46:	d003      	beq.n	8007b50 <__mcmp+0x2c>
 8007b48:	d305      	bcc.n	8007b56 <__mcmp+0x32>
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	bd30      	pop	{r4, r5, pc}
 8007b50:	4283      	cmp	r3, r0
 8007b52:	d3f3      	bcc.n	8007b3c <__mcmp+0x18>
 8007b54:	e7fa      	b.n	8007b4c <__mcmp+0x28>
 8007b56:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5a:	e7f7      	b.n	8007b4c <__mcmp+0x28>

08007b5c <__mdiff>:
 8007b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	460c      	mov	r4, r1
 8007b62:	4606      	mov	r6, r0
 8007b64:	4611      	mov	r1, r2
 8007b66:	4620      	mov	r0, r4
 8007b68:	4690      	mov	r8, r2
 8007b6a:	f7ff ffdb 	bl	8007b24 <__mcmp>
 8007b6e:	1e05      	subs	r5, r0, #0
 8007b70:	d110      	bne.n	8007b94 <__mdiff+0x38>
 8007b72:	4629      	mov	r1, r5
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7ff fd59 	bl	800762c <_Balloc>
 8007b7a:	b930      	cbnz	r0, 8007b8a <__mdiff+0x2e>
 8007b7c:	4b3a      	ldr	r3, [pc, #232]	; (8007c68 <__mdiff+0x10c>)
 8007b7e:	4602      	mov	r2, r0
 8007b80:	f240 2137 	movw	r1, #567	; 0x237
 8007b84:	4839      	ldr	r0, [pc, #228]	; (8007c6c <__mdiff+0x110>)
 8007b86:	f000 fafd 	bl	8008184 <__assert_func>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	bfa4      	itt	ge
 8007b96:	4643      	movge	r3, r8
 8007b98:	46a0      	movge	r8, r4
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ba0:	bfa6      	itte	ge
 8007ba2:	461c      	movge	r4, r3
 8007ba4:	2500      	movge	r5, #0
 8007ba6:	2501      	movlt	r5, #1
 8007ba8:	f7ff fd40 	bl	800762c <_Balloc>
 8007bac:	b920      	cbnz	r0, 8007bb8 <__mdiff+0x5c>
 8007bae:	4b2e      	ldr	r3, [pc, #184]	; (8007c68 <__mdiff+0x10c>)
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	f240 2145 	movw	r1, #581	; 0x245
 8007bb6:	e7e5      	b.n	8007b84 <__mdiff+0x28>
 8007bb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007bbc:	6926      	ldr	r6, [r4, #16]
 8007bbe:	60c5      	str	r5, [r0, #12]
 8007bc0:	f104 0914 	add.w	r9, r4, #20
 8007bc4:	f108 0514 	add.w	r5, r8, #20
 8007bc8:	f100 0e14 	add.w	lr, r0, #20
 8007bcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007bd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007bd4:	f108 0210 	add.w	r2, r8, #16
 8007bd8:	46f2      	mov	sl, lr
 8007bda:	2100      	movs	r1, #0
 8007bdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007be0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007be4:	fa11 f88b 	uxtah	r8, r1, fp
 8007be8:	b299      	uxth	r1, r3
 8007bea:	0c1b      	lsrs	r3, r3, #16
 8007bec:	eba8 0801 	sub.w	r8, r8, r1
 8007bf0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007bf4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007bf8:	fa1f f888 	uxth.w	r8, r8
 8007bfc:	1419      	asrs	r1, r3, #16
 8007bfe:	454e      	cmp	r6, r9
 8007c00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007c04:	f84a 3b04 	str.w	r3, [sl], #4
 8007c08:	d8e8      	bhi.n	8007bdc <__mdiff+0x80>
 8007c0a:	1b33      	subs	r3, r6, r4
 8007c0c:	3b15      	subs	r3, #21
 8007c0e:	f023 0303 	bic.w	r3, r3, #3
 8007c12:	3304      	adds	r3, #4
 8007c14:	3415      	adds	r4, #21
 8007c16:	42a6      	cmp	r6, r4
 8007c18:	bf38      	it	cc
 8007c1a:	2304      	movcc	r3, #4
 8007c1c:	441d      	add	r5, r3
 8007c1e:	4473      	add	r3, lr
 8007c20:	469e      	mov	lr, r3
 8007c22:	462e      	mov	r6, r5
 8007c24:	4566      	cmp	r6, ip
 8007c26:	d30e      	bcc.n	8007c46 <__mdiff+0xea>
 8007c28:	f10c 0203 	add.w	r2, ip, #3
 8007c2c:	1b52      	subs	r2, r2, r5
 8007c2e:	f022 0203 	bic.w	r2, r2, #3
 8007c32:	3d03      	subs	r5, #3
 8007c34:	45ac      	cmp	ip, r5
 8007c36:	bf38      	it	cc
 8007c38:	2200      	movcc	r2, #0
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c40:	b17a      	cbz	r2, 8007c62 <__mdiff+0x106>
 8007c42:	6107      	str	r7, [r0, #16]
 8007c44:	e7a4      	b.n	8007b90 <__mdiff+0x34>
 8007c46:	f856 8b04 	ldr.w	r8, [r6], #4
 8007c4a:	fa11 f288 	uxtah	r2, r1, r8
 8007c4e:	1414      	asrs	r4, r2, #16
 8007c50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c54:	b292      	uxth	r2, r2
 8007c56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c5a:	f84e 2b04 	str.w	r2, [lr], #4
 8007c5e:	1421      	asrs	r1, r4, #16
 8007c60:	e7e0      	b.n	8007c24 <__mdiff+0xc8>
 8007c62:	3f01      	subs	r7, #1
 8007c64:	e7ea      	b.n	8007c3c <__mdiff+0xe0>
 8007c66:	bf00      	nop
 8007c68:	08008978 	.word	0x08008978
 8007c6c:	08008989 	.word	0x08008989

08007c70 <__d2b>:
 8007c70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c74:	460f      	mov	r7, r1
 8007c76:	2101      	movs	r1, #1
 8007c78:	ec59 8b10 	vmov	r8, r9, d0
 8007c7c:	4616      	mov	r6, r2
 8007c7e:	f7ff fcd5 	bl	800762c <_Balloc>
 8007c82:	4604      	mov	r4, r0
 8007c84:	b930      	cbnz	r0, 8007c94 <__d2b+0x24>
 8007c86:	4602      	mov	r2, r0
 8007c88:	4b24      	ldr	r3, [pc, #144]	; (8007d1c <__d2b+0xac>)
 8007c8a:	4825      	ldr	r0, [pc, #148]	; (8007d20 <__d2b+0xb0>)
 8007c8c:	f240 310f 	movw	r1, #783	; 0x30f
 8007c90:	f000 fa78 	bl	8008184 <__assert_func>
 8007c94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c9c:	bb2d      	cbnz	r5, 8007cea <__d2b+0x7a>
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ca4:	d026      	beq.n	8007cf4 <__d2b+0x84>
 8007ca6:	4668      	mov	r0, sp
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	f7ff fd87 	bl	80077bc <__lo0bits>
 8007cae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007cb2:	b1e8      	cbz	r0, 8007cf0 <__d2b+0x80>
 8007cb4:	f1c0 0320 	rsb	r3, r0, #32
 8007cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	40c2      	lsrs	r2, r0
 8007cc0:	6163      	str	r3, [r4, #20]
 8007cc2:	9201      	str	r2, [sp, #4]
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	61a3      	str	r3, [r4, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bf14      	ite	ne
 8007ccc:	2202      	movne	r2, #2
 8007cce:	2201      	moveq	r2, #1
 8007cd0:	6122      	str	r2, [r4, #16]
 8007cd2:	b1bd      	cbz	r5, 8007d04 <__d2b+0x94>
 8007cd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cd8:	4405      	add	r5, r0
 8007cda:	603d      	str	r5, [r7, #0]
 8007cdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ce0:	6030      	str	r0, [r6, #0]
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	b003      	add	sp, #12
 8007ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cee:	e7d6      	b.n	8007c9e <__d2b+0x2e>
 8007cf0:	6161      	str	r1, [r4, #20]
 8007cf2:	e7e7      	b.n	8007cc4 <__d2b+0x54>
 8007cf4:	a801      	add	r0, sp, #4
 8007cf6:	f7ff fd61 	bl	80077bc <__lo0bits>
 8007cfa:	9b01      	ldr	r3, [sp, #4]
 8007cfc:	6163      	str	r3, [r4, #20]
 8007cfe:	3020      	adds	r0, #32
 8007d00:	2201      	movs	r2, #1
 8007d02:	e7e5      	b.n	8007cd0 <__d2b+0x60>
 8007d04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d0c:	6038      	str	r0, [r7, #0]
 8007d0e:	6918      	ldr	r0, [r3, #16]
 8007d10:	f7ff fd34 	bl	800777c <__hi0bits>
 8007d14:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d18:	e7e2      	b.n	8007ce0 <__d2b+0x70>
 8007d1a:	bf00      	nop
 8007d1c:	08008978 	.word	0x08008978
 8007d20:	08008989 	.word	0x08008989

08007d24 <__ssputs_r>:
 8007d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	688e      	ldr	r6, [r1, #8]
 8007d2a:	461f      	mov	r7, r3
 8007d2c:	42be      	cmp	r6, r7
 8007d2e:	680b      	ldr	r3, [r1, #0]
 8007d30:	4682      	mov	sl, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	4690      	mov	r8, r2
 8007d36:	d82c      	bhi.n	8007d92 <__ssputs_r+0x6e>
 8007d38:	898a      	ldrh	r2, [r1, #12]
 8007d3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d3e:	d026      	beq.n	8007d8e <__ssputs_r+0x6a>
 8007d40:	6965      	ldr	r5, [r4, #20]
 8007d42:	6909      	ldr	r1, [r1, #16]
 8007d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d48:	eba3 0901 	sub.w	r9, r3, r1
 8007d4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d50:	1c7b      	adds	r3, r7, #1
 8007d52:	444b      	add	r3, r9
 8007d54:	106d      	asrs	r5, r5, #1
 8007d56:	429d      	cmp	r5, r3
 8007d58:	bf38      	it	cc
 8007d5a:	461d      	movcc	r5, r3
 8007d5c:	0553      	lsls	r3, r2, #21
 8007d5e:	d527      	bpl.n	8007db0 <__ssputs_r+0x8c>
 8007d60:	4629      	mov	r1, r5
 8007d62:	f7ff fbd7 	bl	8007514 <_malloc_r>
 8007d66:	4606      	mov	r6, r0
 8007d68:	b360      	cbz	r0, 8007dc4 <__ssputs_r+0xa0>
 8007d6a:	6921      	ldr	r1, [r4, #16]
 8007d6c:	464a      	mov	r2, r9
 8007d6e:	f7fe fcd5 	bl	800671c <memcpy>
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	6126      	str	r6, [r4, #16]
 8007d80:	6165      	str	r5, [r4, #20]
 8007d82:	444e      	add	r6, r9
 8007d84:	eba5 0509 	sub.w	r5, r5, r9
 8007d88:	6026      	str	r6, [r4, #0]
 8007d8a:	60a5      	str	r5, [r4, #8]
 8007d8c:	463e      	mov	r6, r7
 8007d8e:	42be      	cmp	r6, r7
 8007d90:	d900      	bls.n	8007d94 <__ssputs_r+0x70>
 8007d92:	463e      	mov	r6, r7
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	4632      	mov	r2, r6
 8007d98:	4641      	mov	r1, r8
 8007d9a:	f000 f9c9 	bl	8008130 <memmove>
 8007d9e:	68a3      	ldr	r3, [r4, #8]
 8007da0:	1b9b      	subs	r3, r3, r6
 8007da2:	60a3      	str	r3, [r4, #8]
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	4433      	add	r3, r6
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	2000      	movs	r0, #0
 8007dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db0:	462a      	mov	r2, r5
 8007db2:	f000 fa2d 	bl	8008210 <_realloc_r>
 8007db6:	4606      	mov	r6, r0
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d1e0      	bne.n	8007d7e <__ssputs_r+0x5a>
 8007dbc:	6921      	ldr	r1, [r4, #16]
 8007dbe:	4650      	mov	r0, sl
 8007dc0:	f7ff fb34 	bl	800742c <_free_r>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	f8ca 3000 	str.w	r3, [sl]
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd6:	e7e9      	b.n	8007dac <__ssputs_r+0x88>

08007dd8 <_svfiprintf_r>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	4698      	mov	r8, r3
 8007dde:	898b      	ldrh	r3, [r1, #12]
 8007de0:	061b      	lsls	r3, r3, #24
 8007de2:	b09d      	sub	sp, #116	; 0x74
 8007de4:	4607      	mov	r7, r0
 8007de6:	460d      	mov	r5, r1
 8007de8:	4614      	mov	r4, r2
 8007dea:	d50e      	bpl.n	8007e0a <_svfiprintf_r+0x32>
 8007dec:	690b      	ldr	r3, [r1, #16]
 8007dee:	b963      	cbnz	r3, 8007e0a <_svfiprintf_r+0x32>
 8007df0:	2140      	movs	r1, #64	; 0x40
 8007df2:	f7ff fb8f 	bl	8007514 <_malloc_r>
 8007df6:	6028      	str	r0, [r5, #0]
 8007df8:	6128      	str	r0, [r5, #16]
 8007dfa:	b920      	cbnz	r0, 8007e06 <_svfiprintf_r+0x2e>
 8007dfc:	230c      	movs	r3, #12
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	e0d0      	b.n	8007fa8 <_svfiprintf_r+0x1d0>
 8007e06:	2340      	movs	r3, #64	; 0x40
 8007e08:	616b      	str	r3, [r5, #20]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e0e:	2320      	movs	r3, #32
 8007e10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e18:	2330      	movs	r3, #48	; 0x30
 8007e1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007fc0 <_svfiprintf_r+0x1e8>
 8007e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e22:	f04f 0901 	mov.w	r9, #1
 8007e26:	4623      	mov	r3, r4
 8007e28:	469a      	mov	sl, r3
 8007e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e2e:	b10a      	cbz	r2, 8007e34 <_svfiprintf_r+0x5c>
 8007e30:	2a25      	cmp	r2, #37	; 0x25
 8007e32:	d1f9      	bne.n	8007e28 <_svfiprintf_r+0x50>
 8007e34:	ebba 0b04 	subs.w	fp, sl, r4
 8007e38:	d00b      	beq.n	8007e52 <_svfiprintf_r+0x7a>
 8007e3a:	465b      	mov	r3, fp
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4638      	mov	r0, r7
 8007e42:	f7ff ff6f 	bl	8007d24 <__ssputs_r>
 8007e46:	3001      	adds	r0, #1
 8007e48:	f000 80a9 	beq.w	8007f9e <_svfiprintf_r+0x1c6>
 8007e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e4e:	445a      	add	r2, fp
 8007e50:	9209      	str	r2, [sp, #36]	; 0x24
 8007e52:	f89a 3000 	ldrb.w	r3, [sl]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 80a1 	beq.w	8007f9e <_svfiprintf_r+0x1c6>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e66:	f10a 0a01 	add.w	sl, sl, #1
 8007e6a:	9304      	str	r3, [sp, #16]
 8007e6c:	9307      	str	r3, [sp, #28]
 8007e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e72:	931a      	str	r3, [sp, #104]	; 0x68
 8007e74:	4654      	mov	r4, sl
 8007e76:	2205      	movs	r2, #5
 8007e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7c:	4850      	ldr	r0, [pc, #320]	; (8007fc0 <_svfiprintf_r+0x1e8>)
 8007e7e:	f7f8 f9a7 	bl	80001d0 <memchr>
 8007e82:	9a04      	ldr	r2, [sp, #16]
 8007e84:	b9d8      	cbnz	r0, 8007ebe <_svfiprintf_r+0xe6>
 8007e86:	06d0      	lsls	r0, r2, #27
 8007e88:	bf44      	itt	mi
 8007e8a:	2320      	movmi	r3, #32
 8007e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e90:	0711      	lsls	r1, r2, #28
 8007e92:	bf44      	itt	mi
 8007e94:	232b      	movmi	r3, #43	; 0x2b
 8007e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea0:	d015      	beq.n	8007ece <_svfiprintf_r+0xf6>
 8007ea2:	9a07      	ldr	r2, [sp, #28]
 8007ea4:	4654      	mov	r4, sl
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	f04f 0c0a 	mov.w	ip, #10
 8007eac:	4621      	mov	r1, r4
 8007eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb2:	3b30      	subs	r3, #48	; 0x30
 8007eb4:	2b09      	cmp	r3, #9
 8007eb6:	d94d      	bls.n	8007f54 <_svfiprintf_r+0x17c>
 8007eb8:	b1b0      	cbz	r0, 8007ee8 <_svfiprintf_r+0x110>
 8007eba:	9207      	str	r2, [sp, #28]
 8007ebc:	e014      	b.n	8007ee8 <_svfiprintf_r+0x110>
 8007ebe:	eba0 0308 	sub.w	r3, r0, r8
 8007ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	46a2      	mov	sl, r4
 8007ecc:	e7d2      	b.n	8007e74 <_svfiprintf_r+0x9c>
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	1d19      	adds	r1, r3, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	9103      	str	r1, [sp, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfbb      	ittet	lt
 8007eda:	425b      	neglt	r3, r3
 8007edc:	f042 0202 	orrlt.w	r2, r2, #2
 8007ee0:	9307      	strge	r3, [sp, #28]
 8007ee2:	9307      	strlt	r3, [sp, #28]
 8007ee4:	bfb8      	it	lt
 8007ee6:	9204      	strlt	r2, [sp, #16]
 8007ee8:	7823      	ldrb	r3, [r4, #0]
 8007eea:	2b2e      	cmp	r3, #46	; 0x2e
 8007eec:	d10c      	bne.n	8007f08 <_svfiprintf_r+0x130>
 8007eee:	7863      	ldrb	r3, [r4, #1]
 8007ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef2:	d134      	bne.n	8007f5e <_svfiprintf_r+0x186>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	1d1a      	adds	r2, r3, #4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	9203      	str	r2, [sp, #12]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bfb8      	it	lt
 8007f00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f04:	3402      	adds	r4, #2
 8007f06:	9305      	str	r3, [sp, #20]
 8007f08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007fd0 <_svfiprintf_r+0x1f8>
 8007f0c:	7821      	ldrb	r1, [r4, #0]
 8007f0e:	2203      	movs	r2, #3
 8007f10:	4650      	mov	r0, sl
 8007f12:	f7f8 f95d 	bl	80001d0 <memchr>
 8007f16:	b138      	cbz	r0, 8007f28 <_svfiprintf_r+0x150>
 8007f18:	9b04      	ldr	r3, [sp, #16]
 8007f1a:	eba0 000a 	sub.w	r0, r0, sl
 8007f1e:	2240      	movs	r2, #64	; 0x40
 8007f20:	4082      	lsls	r2, r0
 8007f22:	4313      	orrs	r3, r2
 8007f24:	3401      	adds	r4, #1
 8007f26:	9304      	str	r3, [sp, #16]
 8007f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2c:	4825      	ldr	r0, [pc, #148]	; (8007fc4 <_svfiprintf_r+0x1ec>)
 8007f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f32:	2206      	movs	r2, #6
 8007f34:	f7f8 f94c 	bl	80001d0 <memchr>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d038      	beq.n	8007fae <_svfiprintf_r+0x1d6>
 8007f3c:	4b22      	ldr	r3, [pc, #136]	; (8007fc8 <_svfiprintf_r+0x1f0>)
 8007f3e:	bb1b      	cbnz	r3, 8007f88 <_svfiprintf_r+0x1b0>
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	3307      	adds	r3, #7
 8007f44:	f023 0307 	bic.w	r3, r3, #7
 8007f48:	3308      	adds	r3, #8
 8007f4a:	9303      	str	r3, [sp, #12]
 8007f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4e:	4433      	add	r3, r6
 8007f50:	9309      	str	r3, [sp, #36]	; 0x24
 8007f52:	e768      	b.n	8007e26 <_svfiprintf_r+0x4e>
 8007f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f58:	460c      	mov	r4, r1
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	e7a6      	b.n	8007eac <_svfiprintf_r+0xd4>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	3401      	adds	r4, #1
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	4619      	mov	r1, r3
 8007f66:	f04f 0c0a 	mov.w	ip, #10
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f70:	3a30      	subs	r2, #48	; 0x30
 8007f72:	2a09      	cmp	r2, #9
 8007f74:	d903      	bls.n	8007f7e <_svfiprintf_r+0x1a6>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0c6      	beq.n	8007f08 <_svfiprintf_r+0x130>
 8007f7a:	9105      	str	r1, [sp, #20]
 8007f7c:	e7c4      	b.n	8007f08 <_svfiprintf_r+0x130>
 8007f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f82:	4604      	mov	r4, r0
 8007f84:	2301      	movs	r3, #1
 8007f86:	e7f0      	b.n	8007f6a <_svfiprintf_r+0x192>
 8007f88:	ab03      	add	r3, sp, #12
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	462a      	mov	r2, r5
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <_svfiprintf_r+0x1f4>)
 8007f90:	a904      	add	r1, sp, #16
 8007f92:	4638      	mov	r0, r7
 8007f94:	f7fd fe6a 	bl	8005c6c <_printf_float>
 8007f98:	1c42      	adds	r2, r0, #1
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	d1d6      	bne.n	8007f4c <_svfiprintf_r+0x174>
 8007f9e:	89ab      	ldrh	r3, [r5, #12]
 8007fa0:	065b      	lsls	r3, r3, #25
 8007fa2:	f53f af2d 	bmi.w	8007e00 <_svfiprintf_r+0x28>
 8007fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fa8:	b01d      	add	sp, #116	; 0x74
 8007faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fae:	ab03      	add	r3, sp, #12
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <_svfiprintf_r+0x1f4>)
 8007fb6:	a904      	add	r1, sp, #16
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f7fe f8fb 	bl	80061b4 <_printf_i>
 8007fbe:	e7eb      	b.n	8007f98 <_svfiprintf_r+0x1c0>
 8007fc0:	08008ae4 	.word	0x08008ae4
 8007fc4:	08008aee 	.word	0x08008aee
 8007fc8:	08005c6d 	.word	0x08005c6d
 8007fcc:	08007d25 	.word	0x08007d25
 8007fd0:	08008aea 	.word	0x08008aea

08007fd4 <__sflush_r>:
 8007fd4:	898a      	ldrh	r2, [r1, #12]
 8007fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fda:	4605      	mov	r5, r0
 8007fdc:	0710      	lsls	r0, r2, #28
 8007fde:	460c      	mov	r4, r1
 8007fe0:	d458      	bmi.n	8008094 <__sflush_r+0xc0>
 8007fe2:	684b      	ldr	r3, [r1, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dc05      	bgt.n	8007ff4 <__sflush_r+0x20>
 8007fe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	dc02      	bgt.n	8007ff4 <__sflush_r+0x20>
 8007fee:	2000      	movs	r0, #0
 8007ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	d0f9      	beq.n	8007fee <__sflush_r+0x1a>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008000:	682f      	ldr	r7, [r5, #0]
 8008002:	6a21      	ldr	r1, [r4, #32]
 8008004:	602b      	str	r3, [r5, #0]
 8008006:	d032      	beq.n	800806e <__sflush_r+0x9a>
 8008008:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	075a      	lsls	r2, r3, #29
 800800e:	d505      	bpl.n	800801c <__sflush_r+0x48>
 8008010:	6863      	ldr	r3, [r4, #4]
 8008012:	1ac0      	subs	r0, r0, r3
 8008014:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008016:	b10b      	cbz	r3, 800801c <__sflush_r+0x48>
 8008018:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800801a:	1ac0      	subs	r0, r0, r3
 800801c:	2300      	movs	r3, #0
 800801e:	4602      	mov	r2, r0
 8008020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008022:	6a21      	ldr	r1, [r4, #32]
 8008024:	4628      	mov	r0, r5
 8008026:	47b0      	blx	r6
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	d106      	bne.n	800803c <__sflush_r+0x68>
 800802e:	6829      	ldr	r1, [r5, #0]
 8008030:	291d      	cmp	r1, #29
 8008032:	d82b      	bhi.n	800808c <__sflush_r+0xb8>
 8008034:	4a29      	ldr	r2, [pc, #164]	; (80080dc <__sflush_r+0x108>)
 8008036:	410a      	asrs	r2, r1
 8008038:	07d6      	lsls	r6, r2, #31
 800803a:	d427      	bmi.n	800808c <__sflush_r+0xb8>
 800803c:	2200      	movs	r2, #0
 800803e:	6062      	str	r2, [r4, #4]
 8008040:	04d9      	lsls	r1, r3, #19
 8008042:	6922      	ldr	r2, [r4, #16]
 8008044:	6022      	str	r2, [r4, #0]
 8008046:	d504      	bpl.n	8008052 <__sflush_r+0x7e>
 8008048:	1c42      	adds	r2, r0, #1
 800804a:	d101      	bne.n	8008050 <__sflush_r+0x7c>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	b903      	cbnz	r3, 8008052 <__sflush_r+0x7e>
 8008050:	6560      	str	r0, [r4, #84]	; 0x54
 8008052:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008054:	602f      	str	r7, [r5, #0]
 8008056:	2900      	cmp	r1, #0
 8008058:	d0c9      	beq.n	8007fee <__sflush_r+0x1a>
 800805a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800805e:	4299      	cmp	r1, r3
 8008060:	d002      	beq.n	8008068 <__sflush_r+0x94>
 8008062:	4628      	mov	r0, r5
 8008064:	f7ff f9e2 	bl	800742c <_free_r>
 8008068:	2000      	movs	r0, #0
 800806a:	6360      	str	r0, [r4, #52]	; 0x34
 800806c:	e7c0      	b.n	8007ff0 <__sflush_r+0x1c>
 800806e:	2301      	movs	r3, #1
 8008070:	4628      	mov	r0, r5
 8008072:	47b0      	blx	r6
 8008074:	1c41      	adds	r1, r0, #1
 8008076:	d1c8      	bne.n	800800a <__sflush_r+0x36>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0c5      	beq.n	800800a <__sflush_r+0x36>
 800807e:	2b1d      	cmp	r3, #29
 8008080:	d001      	beq.n	8008086 <__sflush_r+0xb2>
 8008082:	2b16      	cmp	r3, #22
 8008084:	d101      	bne.n	800808a <__sflush_r+0xb6>
 8008086:	602f      	str	r7, [r5, #0]
 8008088:	e7b1      	b.n	8007fee <__sflush_r+0x1a>
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	e7ad      	b.n	8007ff0 <__sflush_r+0x1c>
 8008094:	690f      	ldr	r7, [r1, #16]
 8008096:	2f00      	cmp	r7, #0
 8008098:	d0a9      	beq.n	8007fee <__sflush_r+0x1a>
 800809a:	0793      	lsls	r3, r2, #30
 800809c:	680e      	ldr	r6, [r1, #0]
 800809e:	bf08      	it	eq
 80080a0:	694b      	ldreq	r3, [r1, #20]
 80080a2:	600f      	str	r7, [r1, #0]
 80080a4:	bf18      	it	ne
 80080a6:	2300      	movne	r3, #0
 80080a8:	eba6 0807 	sub.w	r8, r6, r7
 80080ac:	608b      	str	r3, [r1, #8]
 80080ae:	f1b8 0f00 	cmp.w	r8, #0
 80080b2:	dd9c      	ble.n	8007fee <__sflush_r+0x1a>
 80080b4:	6a21      	ldr	r1, [r4, #32]
 80080b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080b8:	4643      	mov	r3, r8
 80080ba:	463a      	mov	r2, r7
 80080bc:	4628      	mov	r0, r5
 80080be:	47b0      	blx	r6
 80080c0:	2800      	cmp	r0, #0
 80080c2:	dc06      	bgt.n	80080d2 <__sflush_r+0xfe>
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ca:	81a3      	strh	r3, [r4, #12]
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	e78e      	b.n	8007ff0 <__sflush_r+0x1c>
 80080d2:	4407      	add	r7, r0
 80080d4:	eba8 0800 	sub.w	r8, r8, r0
 80080d8:	e7e9      	b.n	80080ae <__sflush_r+0xda>
 80080da:	bf00      	nop
 80080dc:	dfbffffe 	.word	0xdfbffffe

080080e0 <_fflush_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	690b      	ldr	r3, [r1, #16]
 80080e4:	4605      	mov	r5, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	b913      	cbnz	r3, 80080f0 <_fflush_r+0x10>
 80080ea:	2500      	movs	r5, #0
 80080ec:	4628      	mov	r0, r5
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	b118      	cbz	r0, 80080fa <_fflush_r+0x1a>
 80080f2:	6a03      	ldr	r3, [r0, #32]
 80080f4:	b90b      	cbnz	r3, 80080fa <_fflush_r+0x1a>
 80080f6:	f7fe f9f9 	bl	80064ec <__sinit>
 80080fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0f3      	beq.n	80080ea <_fflush_r+0xa>
 8008102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008104:	07d0      	lsls	r0, r2, #31
 8008106:	d404      	bmi.n	8008112 <_fflush_r+0x32>
 8008108:	0599      	lsls	r1, r3, #22
 800810a:	d402      	bmi.n	8008112 <_fflush_r+0x32>
 800810c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800810e:	f7fe fb03 	bl	8006718 <__retarget_lock_acquire_recursive>
 8008112:	4628      	mov	r0, r5
 8008114:	4621      	mov	r1, r4
 8008116:	f7ff ff5d 	bl	8007fd4 <__sflush_r>
 800811a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800811c:	07da      	lsls	r2, r3, #31
 800811e:	4605      	mov	r5, r0
 8008120:	d4e4      	bmi.n	80080ec <_fflush_r+0xc>
 8008122:	89a3      	ldrh	r3, [r4, #12]
 8008124:	059b      	lsls	r3, r3, #22
 8008126:	d4e1      	bmi.n	80080ec <_fflush_r+0xc>
 8008128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800812a:	f7fe faf6 	bl	800671a <__retarget_lock_release_recursive>
 800812e:	e7dd      	b.n	80080ec <_fflush_r+0xc>

08008130 <memmove>:
 8008130:	4288      	cmp	r0, r1
 8008132:	b510      	push	{r4, lr}
 8008134:	eb01 0402 	add.w	r4, r1, r2
 8008138:	d902      	bls.n	8008140 <memmove+0x10>
 800813a:	4284      	cmp	r4, r0
 800813c:	4623      	mov	r3, r4
 800813e:	d807      	bhi.n	8008150 <memmove+0x20>
 8008140:	1e43      	subs	r3, r0, #1
 8008142:	42a1      	cmp	r1, r4
 8008144:	d008      	beq.n	8008158 <memmove+0x28>
 8008146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800814a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800814e:	e7f8      	b.n	8008142 <memmove+0x12>
 8008150:	4402      	add	r2, r0
 8008152:	4601      	mov	r1, r0
 8008154:	428a      	cmp	r2, r1
 8008156:	d100      	bne.n	800815a <memmove+0x2a>
 8008158:	bd10      	pop	{r4, pc}
 800815a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800815e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008162:	e7f7      	b.n	8008154 <memmove+0x24>

08008164 <_sbrk_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d06      	ldr	r5, [pc, #24]	; (8008180 <_sbrk_r+0x1c>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	602b      	str	r3, [r5, #0]
 8008170:	f7f9 fba2 	bl	80018b8 <_sbrk>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_sbrk_r+0x1a>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_sbrk_r+0x1a>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	2000448c 	.word	0x2000448c

08008184 <__assert_func>:
 8008184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008186:	4614      	mov	r4, r2
 8008188:	461a      	mov	r2, r3
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <__assert_func+0x2c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4605      	mov	r5, r0
 8008190:	68d8      	ldr	r0, [r3, #12]
 8008192:	b14c      	cbz	r4, 80081a8 <__assert_func+0x24>
 8008194:	4b07      	ldr	r3, [pc, #28]	; (80081b4 <__assert_func+0x30>)
 8008196:	9100      	str	r1, [sp, #0]
 8008198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800819c:	4906      	ldr	r1, [pc, #24]	; (80081b8 <__assert_func+0x34>)
 800819e:	462b      	mov	r3, r5
 80081a0:	f000 f872 	bl	8008288 <fiprintf>
 80081a4:	f000 f882 	bl	80082ac <abort>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__assert_func+0x38>)
 80081aa:	461c      	mov	r4, r3
 80081ac:	e7f3      	b.n	8008196 <__assert_func+0x12>
 80081ae:	bf00      	nop
 80081b0:	20000068 	.word	0x20000068
 80081b4:	08008aff 	.word	0x08008aff
 80081b8:	08008b0c 	.word	0x08008b0c
 80081bc:	08008b3a 	.word	0x08008b3a

080081c0 <_calloc_r>:
 80081c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081c2:	fba1 2402 	umull	r2, r4, r1, r2
 80081c6:	b94c      	cbnz	r4, 80081dc <_calloc_r+0x1c>
 80081c8:	4611      	mov	r1, r2
 80081ca:	9201      	str	r2, [sp, #4]
 80081cc:	f7ff f9a2 	bl	8007514 <_malloc_r>
 80081d0:	9a01      	ldr	r2, [sp, #4]
 80081d2:	4605      	mov	r5, r0
 80081d4:	b930      	cbnz	r0, 80081e4 <_calloc_r+0x24>
 80081d6:	4628      	mov	r0, r5
 80081d8:	b003      	add	sp, #12
 80081da:	bd30      	pop	{r4, r5, pc}
 80081dc:	220c      	movs	r2, #12
 80081de:	6002      	str	r2, [r0, #0]
 80081e0:	2500      	movs	r5, #0
 80081e2:	e7f8      	b.n	80081d6 <_calloc_r+0x16>
 80081e4:	4621      	mov	r1, r4
 80081e6:	f7fe fa1a 	bl	800661e <memset>
 80081ea:	e7f4      	b.n	80081d6 <_calloc_r+0x16>

080081ec <__ascii_mbtowc>:
 80081ec:	b082      	sub	sp, #8
 80081ee:	b901      	cbnz	r1, 80081f2 <__ascii_mbtowc+0x6>
 80081f0:	a901      	add	r1, sp, #4
 80081f2:	b142      	cbz	r2, 8008206 <__ascii_mbtowc+0x1a>
 80081f4:	b14b      	cbz	r3, 800820a <__ascii_mbtowc+0x1e>
 80081f6:	7813      	ldrb	r3, [r2, #0]
 80081f8:	600b      	str	r3, [r1, #0]
 80081fa:	7812      	ldrb	r2, [r2, #0]
 80081fc:	1e10      	subs	r0, r2, #0
 80081fe:	bf18      	it	ne
 8008200:	2001      	movne	r0, #1
 8008202:	b002      	add	sp, #8
 8008204:	4770      	bx	lr
 8008206:	4610      	mov	r0, r2
 8008208:	e7fb      	b.n	8008202 <__ascii_mbtowc+0x16>
 800820a:	f06f 0001 	mvn.w	r0, #1
 800820e:	e7f8      	b.n	8008202 <__ascii_mbtowc+0x16>

08008210 <_realloc_r>:
 8008210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008214:	4680      	mov	r8, r0
 8008216:	4614      	mov	r4, r2
 8008218:	460e      	mov	r6, r1
 800821a:	b921      	cbnz	r1, 8008226 <_realloc_r+0x16>
 800821c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008220:	4611      	mov	r1, r2
 8008222:	f7ff b977 	b.w	8007514 <_malloc_r>
 8008226:	b92a      	cbnz	r2, 8008234 <_realloc_r+0x24>
 8008228:	f7ff f900 	bl	800742c <_free_r>
 800822c:	4625      	mov	r5, r4
 800822e:	4628      	mov	r0, r5
 8008230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008234:	f000 f841 	bl	80082ba <_malloc_usable_size_r>
 8008238:	4284      	cmp	r4, r0
 800823a:	4607      	mov	r7, r0
 800823c:	d802      	bhi.n	8008244 <_realloc_r+0x34>
 800823e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008242:	d812      	bhi.n	800826a <_realloc_r+0x5a>
 8008244:	4621      	mov	r1, r4
 8008246:	4640      	mov	r0, r8
 8008248:	f7ff f964 	bl	8007514 <_malloc_r>
 800824c:	4605      	mov	r5, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	d0ed      	beq.n	800822e <_realloc_r+0x1e>
 8008252:	42bc      	cmp	r4, r7
 8008254:	4622      	mov	r2, r4
 8008256:	4631      	mov	r1, r6
 8008258:	bf28      	it	cs
 800825a:	463a      	movcs	r2, r7
 800825c:	f7fe fa5e 	bl	800671c <memcpy>
 8008260:	4631      	mov	r1, r6
 8008262:	4640      	mov	r0, r8
 8008264:	f7ff f8e2 	bl	800742c <_free_r>
 8008268:	e7e1      	b.n	800822e <_realloc_r+0x1e>
 800826a:	4635      	mov	r5, r6
 800826c:	e7df      	b.n	800822e <_realloc_r+0x1e>

0800826e <__ascii_wctomb>:
 800826e:	b149      	cbz	r1, 8008284 <__ascii_wctomb+0x16>
 8008270:	2aff      	cmp	r2, #255	; 0xff
 8008272:	bf85      	ittet	hi
 8008274:	238a      	movhi	r3, #138	; 0x8a
 8008276:	6003      	strhi	r3, [r0, #0]
 8008278:	700a      	strbls	r2, [r1, #0]
 800827a:	f04f 30ff 	movhi.w	r0, #4294967295
 800827e:	bf98      	it	ls
 8008280:	2001      	movls	r0, #1
 8008282:	4770      	bx	lr
 8008284:	4608      	mov	r0, r1
 8008286:	4770      	bx	lr

08008288 <fiprintf>:
 8008288:	b40e      	push	{r1, r2, r3}
 800828a:	b503      	push	{r0, r1, lr}
 800828c:	4601      	mov	r1, r0
 800828e:	ab03      	add	r3, sp, #12
 8008290:	4805      	ldr	r0, [pc, #20]	; (80082a8 <fiprintf+0x20>)
 8008292:	f853 2b04 	ldr.w	r2, [r3], #4
 8008296:	6800      	ldr	r0, [r0, #0]
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	f000 f83f 	bl	800831c <_vfiprintf_r>
 800829e:	b002      	add	sp, #8
 80082a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082a4:	b003      	add	sp, #12
 80082a6:	4770      	bx	lr
 80082a8:	20000068 	.word	0x20000068

080082ac <abort>:
 80082ac:	b508      	push	{r3, lr}
 80082ae:	2006      	movs	r0, #6
 80082b0:	f000 fa0c 	bl	80086cc <raise>
 80082b4:	2001      	movs	r0, #1
 80082b6:	f7f9 fa87 	bl	80017c8 <_exit>

080082ba <_malloc_usable_size_r>:
 80082ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082be:	1f18      	subs	r0, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bfbc      	itt	lt
 80082c4:	580b      	ldrlt	r3, [r1, r0]
 80082c6:	18c0      	addlt	r0, r0, r3
 80082c8:	4770      	bx	lr

080082ca <__sfputc_r>:
 80082ca:	6893      	ldr	r3, [r2, #8]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	b410      	push	{r4}
 80082d2:	6093      	str	r3, [r2, #8]
 80082d4:	da08      	bge.n	80082e8 <__sfputc_r+0x1e>
 80082d6:	6994      	ldr	r4, [r2, #24]
 80082d8:	42a3      	cmp	r3, r4
 80082da:	db01      	blt.n	80082e0 <__sfputc_r+0x16>
 80082dc:	290a      	cmp	r1, #10
 80082de:	d103      	bne.n	80082e8 <__sfputc_r+0x1e>
 80082e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e4:	f000 b934 	b.w	8008550 <__swbuf_r>
 80082e8:	6813      	ldr	r3, [r2, #0]
 80082ea:	1c58      	adds	r0, r3, #1
 80082ec:	6010      	str	r0, [r2, #0]
 80082ee:	7019      	strb	r1, [r3, #0]
 80082f0:	4608      	mov	r0, r1
 80082f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <__sfputs_r>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	4606      	mov	r6, r0
 80082fc:	460f      	mov	r7, r1
 80082fe:	4614      	mov	r4, r2
 8008300:	18d5      	adds	r5, r2, r3
 8008302:	42ac      	cmp	r4, r5
 8008304:	d101      	bne.n	800830a <__sfputs_r+0x12>
 8008306:	2000      	movs	r0, #0
 8008308:	e007      	b.n	800831a <__sfputs_r+0x22>
 800830a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830e:	463a      	mov	r2, r7
 8008310:	4630      	mov	r0, r6
 8008312:	f7ff ffda 	bl	80082ca <__sfputc_r>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d1f3      	bne.n	8008302 <__sfputs_r+0xa>
 800831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800831c <_vfiprintf_r>:
 800831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	460d      	mov	r5, r1
 8008322:	b09d      	sub	sp, #116	; 0x74
 8008324:	4614      	mov	r4, r2
 8008326:	4698      	mov	r8, r3
 8008328:	4606      	mov	r6, r0
 800832a:	b118      	cbz	r0, 8008334 <_vfiprintf_r+0x18>
 800832c:	6a03      	ldr	r3, [r0, #32]
 800832e:	b90b      	cbnz	r3, 8008334 <_vfiprintf_r+0x18>
 8008330:	f7fe f8dc 	bl	80064ec <__sinit>
 8008334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008336:	07d9      	lsls	r1, r3, #31
 8008338:	d405      	bmi.n	8008346 <_vfiprintf_r+0x2a>
 800833a:	89ab      	ldrh	r3, [r5, #12]
 800833c:	059a      	lsls	r2, r3, #22
 800833e:	d402      	bmi.n	8008346 <_vfiprintf_r+0x2a>
 8008340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008342:	f7fe f9e9 	bl	8006718 <__retarget_lock_acquire_recursive>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	071b      	lsls	r3, r3, #28
 800834a:	d501      	bpl.n	8008350 <_vfiprintf_r+0x34>
 800834c:	692b      	ldr	r3, [r5, #16]
 800834e:	b99b      	cbnz	r3, 8008378 <_vfiprintf_r+0x5c>
 8008350:	4629      	mov	r1, r5
 8008352:	4630      	mov	r0, r6
 8008354:	f000 f93a 	bl	80085cc <__swsetup_r>
 8008358:	b170      	cbz	r0, 8008378 <_vfiprintf_r+0x5c>
 800835a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800835c:	07dc      	lsls	r4, r3, #31
 800835e:	d504      	bpl.n	800836a <_vfiprintf_r+0x4e>
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	b01d      	add	sp, #116	; 0x74
 8008366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	0598      	lsls	r0, r3, #22
 800836e:	d4f7      	bmi.n	8008360 <_vfiprintf_r+0x44>
 8008370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008372:	f7fe f9d2 	bl	800671a <__retarget_lock_release_recursive>
 8008376:	e7f3      	b.n	8008360 <_vfiprintf_r+0x44>
 8008378:	2300      	movs	r3, #0
 800837a:	9309      	str	r3, [sp, #36]	; 0x24
 800837c:	2320      	movs	r3, #32
 800837e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008382:	f8cd 800c 	str.w	r8, [sp, #12]
 8008386:	2330      	movs	r3, #48	; 0x30
 8008388:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800853c <_vfiprintf_r+0x220>
 800838c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008390:	f04f 0901 	mov.w	r9, #1
 8008394:	4623      	mov	r3, r4
 8008396:	469a      	mov	sl, r3
 8008398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800839c:	b10a      	cbz	r2, 80083a2 <_vfiprintf_r+0x86>
 800839e:	2a25      	cmp	r2, #37	; 0x25
 80083a0:	d1f9      	bne.n	8008396 <_vfiprintf_r+0x7a>
 80083a2:	ebba 0b04 	subs.w	fp, sl, r4
 80083a6:	d00b      	beq.n	80083c0 <_vfiprintf_r+0xa4>
 80083a8:	465b      	mov	r3, fp
 80083aa:	4622      	mov	r2, r4
 80083ac:	4629      	mov	r1, r5
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff ffa2 	bl	80082f8 <__sfputs_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	f000 80a9 	beq.w	800850c <_vfiprintf_r+0x1f0>
 80083ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083bc:	445a      	add	r2, fp
 80083be:	9209      	str	r2, [sp, #36]	; 0x24
 80083c0:	f89a 3000 	ldrb.w	r3, [sl]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80a1 	beq.w	800850c <_vfiprintf_r+0x1f0>
 80083ca:	2300      	movs	r3, #0
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d4:	f10a 0a01 	add.w	sl, sl, #1
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	9307      	str	r3, [sp, #28]
 80083dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083e0:	931a      	str	r3, [sp, #104]	; 0x68
 80083e2:	4654      	mov	r4, sl
 80083e4:	2205      	movs	r2, #5
 80083e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ea:	4854      	ldr	r0, [pc, #336]	; (800853c <_vfiprintf_r+0x220>)
 80083ec:	f7f7 fef0 	bl	80001d0 <memchr>
 80083f0:	9a04      	ldr	r2, [sp, #16]
 80083f2:	b9d8      	cbnz	r0, 800842c <_vfiprintf_r+0x110>
 80083f4:	06d1      	lsls	r1, r2, #27
 80083f6:	bf44      	itt	mi
 80083f8:	2320      	movmi	r3, #32
 80083fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083fe:	0713      	lsls	r3, r2, #28
 8008400:	bf44      	itt	mi
 8008402:	232b      	movmi	r3, #43	; 0x2b
 8008404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008408:	f89a 3000 	ldrb.w	r3, [sl]
 800840c:	2b2a      	cmp	r3, #42	; 0x2a
 800840e:	d015      	beq.n	800843c <_vfiprintf_r+0x120>
 8008410:	9a07      	ldr	r2, [sp, #28]
 8008412:	4654      	mov	r4, sl
 8008414:	2000      	movs	r0, #0
 8008416:	f04f 0c0a 	mov.w	ip, #10
 800841a:	4621      	mov	r1, r4
 800841c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008420:	3b30      	subs	r3, #48	; 0x30
 8008422:	2b09      	cmp	r3, #9
 8008424:	d94d      	bls.n	80084c2 <_vfiprintf_r+0x1a6>
 8008426:	b1b0      	cbz	r0, 8008456 <_vfiprintf_r+0x13a>
 8008428:	9207      	str	r2, [sp, #28]
 800842a:	e014      	b.n	8008456 <_vfiprintf_r+0x13a>
 800842c:	eba0 0308 	sub.w	r3, r0, r8
 8008430:	fa09 f303 	lsl.w	r3, r9, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	46a2      	mov	sl, r4
 800843a:	e7d2      	b.n	80083e2 <_vfiprintf_r+0xc6>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1d19      	adds	r1, r3, #4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	9103      	str	r1, [sp, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	bfbb      	ittet	lt
 8008448:	425b      	neglt	r3, r3
 800844a:	f042 0202 	orrlt.w	r2, r2, #2
 800844e:	9307      	strge	r3, [sp, #28]
 8008450:	9307      	strlt	r3, [sp, #28]
 8008452:	bfb8      	it	lt
 8008454:	9204      	strlt	r2, [sp, #16]
 8008456:	7823      	ldrb	r3, [r4, #0]
 8008458:	2b2e      	cmp	r3, #46	; 0x2e
 800845a:	d10c      	bne.n	8008476 <_vfiprintf_r+0x15a>
 800845c:	7863      	ldrb	r3, [r4, #1]
 800845e:	2b2a      	cmp	r3, #42	; 0x2a
 8008460:	d134      	bne.n	80084cc <_vfiprintf_r+0x1b0>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	1d1a      	adds	r2, r3, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	9203      	str	r2, [sp, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	bfb8      	it	lt
 800846e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008472:	3402      	adds	r4, #2
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800854c <_vfiprintf_r+0x230>
 800847a:	7821      	ldrb	r1, [r4, #0]
 800847c:	2203      	movs	r2, #3
 800847e:	4650      	mov	r0, sl
 8008480:	f7f7 fea6 	bl	80001d0 <memchr>
 8008484:	b138      	cbz	r0, 8008496 <_vfiprintf_r+0x17a>
 8008486:	9b04      	ldr	r3, [sp, #16]
 8008488:	eba0 000a 	sub.w	r0, r0, sl
 800848c:	2240      	movs	r2, #64	; 0x40
 800848e:	4082      	lsls	r2, r0
 8008490:	4313      	orrs	r3, r2
 8008492:	3401      	adds	r4, #1
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849a:	4829      	ldr	r0, [pc, #164]	; (8008540 <_vfiprintf_r+0x224>)
 800849c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084a0:	2206      	movs	r2, #6
 80084a2:	f7f7 fe95 	bl	80001d0 <memchr>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d03f      	beq.n	800852a <_vfiprintf_r+0x20e>
 80084aa:	4b26      	ldr	r3, [pc, #152]	; (8008544 <_vfiprintf_r+0x228>)
 80084ac:	bb1b      	cbnz	r3, 80084f6 <_vfiprintf_r+0x1da>
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	3307      	adds	r3, #7
 80084b2:	f023 0307 	bic.w	r3, r3, #7
 80084b6:	3308      	adds	r3, #8
 80084b8:	9303      	str	r3, [sp, #12]
 80084ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084bc:	443b      	add	r3, r7
 80084be:	9309      	str	r3, [sp, #36]	; 0x24
 80084c0:	e768      	b.n	8008394 <_vfiprintf_r+0x78>
 80084c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80084c6:	460c      	mov	r4, r1
 80084c8:	2001      	movs	r0, #1
 80084ca:	e7a6      	b.n	800841a <_vfiprintf_r+0xfe>
 80084cc:	2300      	movs	r3, #0
 80084ce:	3401      	adds	r4, #1
 80084d0:	9305      	str	r3, [sp, #20]
 80084d2:	4619      	mov	r1, r3
 80084d4:	f04f 0c0a 	mov.w	ip, #10
 80084d8:	4620      	mov	r0, r4
 80084da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084de:	3a30      	subs	r2, #48	; 0x30
 80084e0:	2a09      	cmp	r2, #9
 80084e2:	d903      	bls.n	80084ec <_vfiprintf_r+0x1d0>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0c6      	beq.n	8008476 <_vfiprintf_r+0x15a>
 80084e8:	9105      	str	r1, [sp, #20]
 80084ea:	e7c4      	b.n	8008476 <_vfiprintf_r+0x15a>
 80084ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80084f0:	4604      	mov	r4, r0
 80084f2:	2301      	movs	r3, #1
 80084f4:	e7f0      	b.n	80084d8 <_vfiprintf_r+0x1bc>
 80084f6:	ab03      	add	r3, sp, #12
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	462a      	mov	r2, r5
 80084fc:	4b12      	ldr	r3, [pc, #72]	; (8008548 <_vfiprintf_r+0x22c>)
 80084fe:	a904      	add	r1, sp, #16
 8008500:	4630      	mov	r0, r6
 8008502:	f7fd fbb3 	bl	8005c6c <_printf_float>
 8008506:	4607      	mov	r7, r0
 8008508:	1c78      	adds	r0, r7, #1
 800850a:	d1d6      	bne.n	80084ba <_vfiprintf_r+0x19e>
 800850c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800850e:	07d9      	lsls	r1, r3, #31
 8008510:	d405      	bmi.n	800851e <_vfiprintf_r+0x202>
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	059a      	lsls	r2, r3, #22
 8008516:	d402      	bmi.n	800851e <_vfiprintf_r+0x202>
 8008518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851a:	f7fe f8fe 	bl	800671a <__retarget_lock_release_recursive>
 800851e:	89ab      	ldrh	r3, [r5, #12]
 8008520:	065b      	lsls	r3, r3, #25
 8008522:	f53f af1d 	bmi.w	8008360 <_vfiprintf_r+0x44>
 8008526:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008528:	e71c      	b.n	8008364 <_vfiprintf_r+0x48>
 800852a:	ab03      	add	r3, sp, #12
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	462a      	mov	r2, r5
 8008530:	4b05      	ldr	r3, [pc, #20]	; (8008548 <_vfiprintf_r+0x22c>)
 8008532:	a904      	add	r1, sp, #16
 8008534:	4630      	mov	r0, r6
 8008536:	f7fd fe3d 	bl	80061b4 <_printf_i>
 800853a:	e7e4      	b.n	8008506 <_vfiprintf_r+0x1ea>
 800853c:	08008ae4 	.word	0x08008ae4
 8008540:	08008aee 	.word	0x08008aee
 8008544:	08005c6d 	.word	0x08005c6d
 8008548:	080082f9 	.word	0x080082f9
 800854c:	08008aea 	.word	0x08008aea

08008550 <__swbuf_r>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	460e      	mov	r6, r1
 8008554:	4614      	mov	r4, r2
 8008556:	4605      	mov	r5, r0
 8008558:	b118      	cbz	r0, 8008562 <__swbuf_r+0x12>
 800855a:	6a03      	ldr	r3, [r0, #32]
 800855c:	b90b      	cbnz	r3, 8008562 <__swbuf_r+0x12>
 800855e:	f7fd ffc5 	bl	80064ec <__sinit>
 8008562:	69a3      	ldr	r3, [r4, #24]
 8008564:	60a3      	str	r3, [r4, #8]
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	071a      	lsls	r2, r3, #28
 800856a:	d525      	bpl.n	80085b8 <__swbuf_r+0x68>
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	b31b      	cbz	r3, 80085b8 <__swbuf_r+0x68>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	6922      	ldr	r2, [r4, #16]
 8008574:	1a98      	subs	r0, r3, r2
 8008576:	6963      	ldr	r3, [r4, #20]
 8008578:	b2f6      	uxtb	r6, r6
 800857a:	4283      	cmp	r3, r0
 800857c:	4637      	mov	r7, r6
 800857e:	dc04      	bgt.n	800858a <__swbuf_r+0x3a>
 8008580:	4621      	mov	r1, r4
 8008582:	4628      	mov	r0, r5
 8008584:	f7ff fdac 	bl	80080e0 <_fflush_r>
 8008588:	b9e0      	cbnz	r0, 80085c4 <__swbuf_r+0x74>
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	3b01      	subs	r3, #1
 800858e:	60a3      	str	r3, [r4, #8]
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	6022      	str	r2, [r4, #0]
 8008596:	701e      	strb	r6, [r3, #0]
 8008598:	6962      	ldr	r2, [r4, #20]
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	429a      	cmp	r2, r3
 800859e:	d004      	beq.n	80085aa <__swbuf_r+0x5a>
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	07db      	lsls	r3, r3, #31
 80085a4:	d506      	bpl.n	80085b4 <__swbuf_r+0x64>
 80085a6:	2e0a      	cmp	r6, #10
 80085a8:	d104      	bne.n	80085b4 <__swbuf_r+0x64>
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f7ff fd97 	bl	80080e0 <_fflush_r>
 80085b2:	b938      	cbnz	r0, 80085c4 <__swbuf_r+0x74>
 80085b4:	4638      	mov	r0, r7
 80085b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b8:	4621      	mov	r1, r4
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 f806 	bl	80085cc <__swsetup_r>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d0d5      	beq.n	8008570 <__swbuf_r+0x20>
 80085c4:	f04f 37ff 	mov.w	r7, #4294967295
 80085c8:	e7f4      	b.n	80085b4 <__swbuf_r+0x64>
	...

080085cc <__swsetup_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4b2a      	ldr	r3, [pc, #168]	; (8008678 <__swsetup_r+0xac>)
 80085d0:	4605      	mov	r5, r0
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	460c      	mov	r4, r1
 80085d6:	b118      	cbz	r0, 80085e0 <__swsetup_r+0x14>
 80085d8:	6a03      	ldr	r3, [r0, #32]
 80085da:	b90b      	cbnz	r3, 80085e0 <__swsetup_r+0x14>
 80085dc:	f7fd ff86 	bl	80064ec <__sinit>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085e6:	0718      	lsls	r0, r3, #28
 80085e8:	d422      	bmi.n	8008630 <__swsetup_r+0x64>
 80085ea:	06d9      	lsls	r1, r3, #27
 80085ec:	d407      	bmi.n	80085fe <__swsetup_r+0x32>
 80085ee:	2309      	movs	r3, #9
 80085f0:	602b      	str	r3, [r5, #0]
 80085f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085f6:	81a3      	strh	r3, [r4, #12]
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	e034      	b.n	8008668 <__swsetup_r+0x9c>
 80085fe:	0758      	lsls	r0, r3, #29
 8008600:	d512      	bpl.n	8008628 <__swsetup_r+0x5c>
 8008602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008604:	b141      	cbz	r1, 8008618 <__swsetup_r+0x4c>
 8008606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800860a:	4299      	cmp	r1, r3
 800860c:	d002      	beq.n	8008614 <__swsetup_r+0x48>
 800860e:	4628      	mov	r0, r5
 8008610:	f7fe ff0c 	bl	800742c <_free_r>
 8008614:	2300      	movs	r3, #0
 8008616:	6363      	str	r3, [r4, #52]	; 0x34
 8008618:	89a3      	ldrh	r3, [r4, #12]
 800861a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	2300      	movs	r3, #0
 8008622:	6063      	str	r3, [r4, #4]
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	f043 0308 	orr.w	r3, r3, #8
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	b94b      	cbnz	r3, 8008648 <__swsetup_r+0x7c>
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800863a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800863e:	d003      	beq.n	8008648 <__swsetup_r+0x7c>
 8008640:	4621      	mov	r1, r4
 8008642:	4628      	mov	r0, r5
 8008644:	f000 f884 	bl	8008750 <__smakebuf_r>
 8008648:	89a0      	ldrh	r0, [r4, #12]
 800864a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800864e:	f010 0301 	ands.w	r3, r0, #1
 8008652:	d00a      	beq.n	800866a <__swsetup_r+0x9e>
 8008654:	2300      	movs	r3, #0
 8008656:	60a3      	str	r3, [r4, #8]
 8008658:	6963      	ldr	r3, [r4, #20]
 800865a:	425b      	negs	r3, r3
 800865c:	61a3      	str	r3, [r4, #24]
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	b943      	cbnz	r3, 8008674 <__swsetup_r+0xa8>
 8008662:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008666:	d1c4      	bne.n	80085f2 <__swsetup_r+0x26>
 8008668:	bd38      	pop	{r3, r4, r5, pc}
 800866a:	0781      	lsls	r1, r0, #30
 800866c:	bf58      	it	pl
 800866e:	6963      	ldrpl	r3, [r4, #20]
 8008670:	60a3      	str	r3, [r4, #8]
 8008672:	e7f4      	b.n	800865e <__swsetup_r+0x92>
 8008674:	2000      	movs	r0, #0
 8008676:	e7f7      	b.n	8008668 <__swsetup_r+0x9c>
 8008678:	20000068 	.word	0x20000068

0800867c <_raise_r>:
 800867c:	291f      	cmp	r1, #31
 800867e:	b538      	push	{r3, r4, r5, lr}
 8008680:	4604      	mov	r4, r0
 8008682:	460d      	mov	r5, r1
 8008684:	d904      	bls.n	8008690 <_raise_r+0x14>
 8008686:	2316      	movs	r3, #22
 8008688:	6003      	str	r3, [r0, #0]
 800868a:	f04f 30ff 	mov.w	r0, #4294967295
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008692:	b112      	cbz	r2, 800869a <_raise_r+0x1e>
 8008694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008698:	b94b      	cbnz	r3, 80086ae <_raise_r+0x32>
 800869a:	4620      	mov	r0, r4
 800869c:	f000 f830 	bl	8008700 <_getpid_r>
 80086a0:	462a      	mov	r2, r5
 80086a2:	4601      	mov	r1, r0
 80086a4:	4620      	mov	r0, r4
 80086a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086aa:	f000 b817 	b.w	80086dc <_kill_r>
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d00a      	beq.n	80086c8 <_raise_r+0x4c>
 80086b2:	1c59      	adds	r1, r3, #1
 80086b4:	d103      	bne.n	80086be <_raise_r+0x42>
 80086b6:	2316      	movs	r3, #22
 80086b8:	6003      	str	r3, [r0, #0]
 80086ba:	2001      	movs	r0, #1
 80086bc:	e7e7      	b.n	800868e <_raise_r+0x12>
 80086be:	2400      	movs	r4, #0
 80086c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086c4:	4628      	mov	r0, r5
 80086c6:	4798      	blx	r3
 80086c8:	2000      	movs	r0, #0
 80086ca:	e7e0      	b.n	800868e <_raise_r+0x12>

080086cc <raise>:
 80086cc:	4b02      	ldr	r3, [pc, #8]	; (80086d8 <raise+0xc>)
 80086ce:	4601      	mov	r1, r0
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	f7ff bfd3 	b.w	800867c <_raise_r>
 80086d6:	bf00      	nop
 80086d8:	20000068 	.word	0x20000068

080086dc <_kill_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4d07      	ldr	r5, [pc, #28]	; (80086fc <_kill_r+0x20>)
 80086e0:	2300      	movs	r3, #0
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	4611      	mov	r1, r2
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	f7f9 f85d 	bl	80017a8 <_kill>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d102      	bne.n	80086f8 <_kill_r+0x1c>
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	b103      	cbz	r3, 80086f8 <_kill_r+0x1c>
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	bd38      	pop	{r3, r4, r5, pc}
 80086fa:	bf00      	nop
 80086fc:	2000448c 	.word	0x2000448c

08008700 <_getpid_r>:
 8008700:	f7f9 b84a 	b.w	8001798 <_getpid>

08008704 <__swhatbuf_r>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	460c      	mov	r4, r1
 8008708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870c:	2900      	cmp	r1, #0
 800870e:	b096      	sub	sp, #88	; 0x58
 8008710:	4615      	mov	r5, r2
 8008712:	461e      	mov	r6, r3
 8008714:	da0d      	bge.n	8008732 <__swhatbuf_r+0x2e>
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	f013 0f80 	tst.w	r3, #128	; 0x80
 800871c:	f04f 0100 	mov.w	r1, #0
 8008720:	bf0c      	ite	eq
 8008722:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008726:	2340      	movne	r3, #64	; 0x40
 8008728:	2000      	movs	r0, #0
 800872a:	6031      	str	r1, [r6, #0]
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	b016      	add	sp, #88	; 0x58
 8008730:	bd70      	pop	{r4, r5, r6, pc}
 8008732:	466a      	mov	r2, sp
 8008734:	f000 f848 	bl	80087c8 <_fstat_r>
 8008738:	2800      	cmp	r0, #0
 800873a:	dbec      	blt.n	8008716 <__swhatbuf_r+0x12>
 800873c:	9901      	ldr	r1, [sp, #4]
 800873e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008742:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008746:	4259      	negs	r1, r3
 8008748:	4159      	adcs	r1, r3
 800874a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800874e:	e7eb      	b.n	8008728 <__swhatbuf_r+0x24>

08008750 <__smakebuf_r>:
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008754:	079d      	lsls	r5, r3, #30
 8008756:	4606      	mov	r6, r0
 8008758:	460c      	mov	r4, r1
 800875a:	d507      	bpl.n	800876c <__smakebuf_r+0x1c>
 800875c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	2301      	movs	r3, #1
 8008766:	6163      	str	r3, [r4, #20]
 8008768:	b002      	add	sp, #8
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	ab01      	add	r3, sp, #4
 800876e:	466a      	mov	r2, sp
 8008770:	f7ff ffc8 	bl	8008704 <__swhatbuf_r>
 8008774:	9900      	ldr	r1, [sp, #0]
 8008776:	4605      	mov	r5, r0
 8008778:	4630      	mov	r0, r6
 800877a:	f7fe fecb 	bl	8007514 <_malloc_r>
 800877e:	b948      	cbnz	r0, 8008794 <__smakebuf_r+0x44>
 8008780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008784:	059a      	lsls	r2, r3, #22
 8008786:	d4ef      	bmi.n	8008768 <__smakebuf_r+0x18>
 8008788:	f023 0303 	bic.w	r3, r3, #3
 800878c:	f043 0302 	orr.w	r3, r3, #2
 8008790:	81a3      	strh	r3, [r4, #12]
 8008792:	e7e3      	b.n	800875c <__smakebuf_r+0xc>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	6020      	str	r0, [r4, #0]
 8008798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879c:	81a3      	strh	r3, [r4, #12]
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	6163      	str	r3, [r4, #20]
 80087a2:	9b01      	ldr	r3, [sp, #4]
 80087a4:	6120      	str	r0, [r4, #16]
 80087a6:	b15b      	cbz	r3, 80087c0 <__smakebuf_r+0x70>
 80087a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ac:	4630      	mov	r0, r6
 80087ae:	f000 f81d 	bl	80087ec <_isatty_r>
 80087b2:	b128      	cbz	r0, 80087c0 <__smakebuf_r+0x70>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	f043 0301 	orr.w	r3, r3, #1
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	431d      	orrs	r5, r3
 80087c4:	81a5      	strh	r5, [r4, #12]
 80087c6:	e7cf      	b.n	8008768 <__smakebuf_r+0x18>

080087c8 <_fstat_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d07      	ldr	r5, [pc, #28]	; (80087e8 <_fstat_r+0x20>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	4611      	mov	r1, r2
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	f7f9 f846 	bl	8001866 <_fstat>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	d102      	bne.n	80087e4 <_fstat_r+0x1c>
 80087de:	682b      	ldr	r3, [r5, #0]
 80087e0:	b103      	cbz	r3, 80087e4 <_fstat_r+0x1c>
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	bd38      	pop	{r3, r4, r5, pc}
 80087e6:	bf00      	nop
 80087e8:	2000448c 	.word	0x2000448c

080087ec <_isatty_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d06      	ldr	r5, [pc, #24]	; (8008808 <_isatty_r+0x1c>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7f9 f845 	bl	8001886 <_isatty>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_isatty_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_isatty_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	2000448c 	.word	0x2000448c

0800880c <_init>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr

08008818 <_fini>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr
